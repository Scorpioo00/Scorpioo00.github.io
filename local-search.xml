<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>RocketMQ</title>
    <link href="/2024/07/31/RocketMQ/"/>
    <url>/2024/07/31/RocketMQ/</url>
    
    <content type="html"><![CDATA[<h1 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h1><h2 id="MQ简介"><a href="#MQ简介" class="headerlink" title="MQ简介"></a>MQ简介</h2><p>消息队列是一种“先进先出”的数据结构</p><p><img src="/img/rocketmq/jiagou.png" alt="jiagou"></p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><h4 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h4><p>系统的耦合性越高，容错率越低。使用消息队列解耦合，系统的耦合性就会提高了</p><p><img src="/img/rocketmq/jieou.png" alt="jieou"></p><h4 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h4><p>应用系统如果遇到系统请求流量瞬间猛增，有可能会将系统压垮。有了消息队列可以将大量请求缓存起来，分散到很长一段时间处理，这样可以大大提高系统的稳定性和用户体验</p><p><img src="/img/rocketmq/xiaofeng.png" alt="xiaofeng"></p><h4 id="数据分发"><a href="#数据分发" class="headerlink" title="数据分发"></a>数据分发</h4><p>通过消息队列可以让数据在多个系统之间进行流通。数据的产生方，不需要关心哪个系统来使用数据，只需要将数据发送到消息队列，数据使用放直接在消息队列中获取数据即可</p><p><img src="/img/rocketmq/fenfa.png" alt="fenfa"></p><h3 id="MQ的优点和缺点"><a href="#MQ的优点和缺点" class="headerlink" title="MQ的优点和缺点"></a>MQ的优点和缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>解耦、削峰、数据分发</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p><strong>系统的可用性降低</strong></p><p>系统引入的外部依赖越多，系统稳定性越差，一旦MQ宕机，就会对业务造成影响</p><p><strong>系统复杂度提高</strong></p><p>MQ的加入大大增加了系统的复杂度，例如:消息丢失、消息重复消费、消息重复发送、消息顺序错乱,消息积压等各种问题</p><p><strong>一致性问题</strong></p><p>如果没有MQ有事务保持系统一致性,用了MQ以后,A系统保存操作,再向MQ发送消息,B系统成功操作数据库,C系统也成功操作,但是当到D系统时操作失败.再用MQ没有事务的情况下,就导致不一致</p><h3 id="各种MQ比较"><a href="#各种MQ比较" class="headerlink" title="各种MQ比较"></a>各种MQ比较</h3><table><thead><tr><th>产品</th><th>ActiveMQ</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td>开发语言</td><td>java</td><td>erlang</td><td>java</td><td>scala</td></tr><tr><td>单机吞吐量</td><td>万级</td><td>万级</td><td>10万级</td><td>10万级</td></tr><tr><td>时效性</td><td>ms级</td><td>us级</td><td>ms级</td><td>ms级以内</td></tr><tr><td>可用性</td><td>高（中从架构）</td><td>高（主从架构）</td><td>非常高（分布式架构）</td><td>非常高（分布式架构）</td></tr><tr><td>功能特性</td><td>成熟的产品，在很多公司得到应用；有较多的文档；各种协议支持较好</td><td>基于erlang开发，所以并发能力很强，性能及其好，延时很低；管理界面较丰富</td><td>MQ功能比较完备，扩展性高</td><td>只支持主要的MQ功能，像一些消息查询，消息回溯等功能没有提供，毕竟是为大数据准备的，在大数据领域应用广</td></tr></tbody></table><h2 id="RocketMQ快速入门"><a href="#RocketMQ快速入门" class="headerlink" title="RocketMQ快速入门"></a>RocketMQ快速入门</h2><p>RocketMQ是阿里巴巴2016年MQ中间件，使用Java语言开发，在阿里内部，RocketMQ承接了例如“双11”等高并发场景的消息流转，能够处理万亿级别的消息</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="下载RocketMQ"><a href="#下载RocketMQ" class="headerlink" title="下载RocketMQ"></a>下载RocketMQ</h4><p>RocketMQ最新版本：4.5.1</p><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>Linux64位系统</p><p>JDK1.8(64位)</p><p>Maven3.6.3</p><h3 id="安装RocketMQ"><a href="#安装RocketMQ" class="headerlink" title="安装RocketMQ"></a>安装RocketMQ</h3><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><p>下载源码包</p><p><a href="http://rocketmq.apache.org/">http://rocketmq.apache.org/</a></p><p>将源码包放入指定文件目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/src/</span>rocketmq<br></code></pre></td></tr></table></figure><p>解压</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">unzip</span> rocketmq-<span class="hljs-literal">all</span>-<span class="hljs-number">4</span>.<span class="hljs-number">7</span>.<span class="hljs-number">1</span>-bin-release.zip<br></code></pre></td></tr></table></figure><p>重命名并进入解压目录</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#重命名</span><br><span class="hljs-attribute">mv</span> rocketmq-<span class="hljs-literal">all</span>-<span class="hljs-number">4</span>.<span class="hljs-number">7</span>.<span class="hljs-number">1</span>-bin-release my-rocketmq<br><span class="hljs-comment">#进入解压目录</span><br><span class="hljs-attribute">cd</span> my-rocketmq<br></code></pre></td></tr></table></figure><h4 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h4><p><strong>bin：</strong>启动脚本，包括shell脚本和CMD脚本</p><p><strong>conf：</strong>实例配置文件，包裹broker配置文件、logback配置文件等</p><p><strong>lib：</strong>依赖jar包，包括Netty、commons-lang、FastJSON等</p><h3 id="启动RocketMQ"><a href="#启动RocketMQ" class="headerlink" title="启动RocketMQ"></a>启动RocketMQ</h3><p><strong>启动NameServer</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#启动NameServer</span><br><span class="hljs-built_in">nohup</span> sh bin/mqnamesrv &amp;<br></code></pre></td></tr></table></figure><p><strong>启动Broker</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#启动Broker</span><br><span class="hljs-built_in">nohup</span> sh bin/mqbroker -n 127.0.0.1:9876 &amp;<br></code></pre></td></tr></table></figure><p>问题描述：</p><p>RocketMQ默认的虚拟机内存较大，启动Broker如果因为内存不足失败，需要编辑如下两个配置文件，修改JVM内存大小</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">#编辑runbroker.<span class="hljs-keyword">sh</span>和runserver.<span class="hljs-keyword">sh</span>修改默认JVM大小<br><span class="hljs-keyword">vim</span> runbroker.<span class="hljs-keyword">sh</span><br><span class="hljs-keyword">vim</span> runserver.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p>参考配置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#runbroker.sh</span><br><span class="hljs-attr">JAVA_OPT</span>=<span class="hljs-string">&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m&quot;</span><br><span class="hljs-comment">#runserver.sh</span><br><span class="hljs-attr">JAVA_OPT</span>=<span class="hljs-string">&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span><br></code></pre></td></tr></table></figure><h3 id="测试RocketMQ"><a href="#测试RocketMQ" class="headerlink" title="测试RocketMQ"></a>测试RocketMQ</h3><h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#配置环境变量</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">NAMESRV_ADDR</span>=127.0.0.1:9876<br><span class="hljs-comment">#使用安装包的Demo发送消息</span><br>sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer<br></code></pre></td></tr></table></figure><h4 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#配置环境变量</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">NAMESRV_ADDR</span>=127.0.0.1:9876<br><span class="hljs-comment">#接收消息</span><br>sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer<br></code></pre></td></tr></table></figure><h3 id="关闭RocketMQ"><a href="#关闭RocketMQ" class="headerlink" title="关闭RocketMQ"></a>关闭RocketMQ</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#关闭Namesrv</span><br><span class="hljs-keyword">sh </span><span class="hljs-keyword">bin/mqshutdown </span>namesrv<br><span class="hljs-comment">#关闭Broker</span><br><span class="hljs-keyword">sh </span><span class="hljs-keyword">bin/mqshutdown </span><span class="hljs-keyword">broker</span><br></code></pre></td></tr></table></figure><h2 id="RocketMQ集群搭建"><a href="#RocketMQ集群搭建" class="headerlink" title="RocketMQ集群搭建"></a>RocketMQ集群搭建</h2><h3 id="各角色介绍"><a href="#各角色介绍" class="headerlink" title="各角色介绍"></a>各角色介绍</h3><p><strong>Producer：</strong>消息的发送者</p><p><strong>Consumer：</strong>消息的接收者</p><p><strong>Broker：</strong>暂存和传输信息</p><p><strong>NameServer：</strong>管理Broker</p><p><strong>Topic：</strong>分区消息的种类；一个发送者可以发送消息给一个或者多个Topic；一个消息的接收者可以订阅一个或者多个Topic消息</p><p><strong>Message Queue：</strong>相当于是topic的分区；用于并行发送和接收消息</p><p><img src="/img/rocketmq/jiqun.webp" alt="jiqun"></p><h3 id="集群搭建方式"><a href="#集群搭建方式" class="headerlink" title="集群搭建方式"></a>集群搭建方式</h3><h4 id="集群特点"><a href="#集群特点" class="headerlink" title="集群特点"></a>集群特点</h4><p>NameServer是一个几乎无状态节点，可集群部署，节点之间无任何消息同步</p><p>Broker部署相对复杂，Broker分为Master与Slave，一个Master可以对应多个Slave，但是一个Slave只能对应一个Master，Master与Slave的对应关系通过指定相同的BrokerName，不同的BrokerId来定义，BrokerId为0表示Master，非0表示Slave。Master也可以部署多个。每个Broker与NameServer集群中的所有节点建立长连接，定时注册Topic信息到所有NameServer</p><p>Producer与NameServer集群中的其中一个节点（随机选择）建立长连接，定期从NameServer取Topic路由信息，并向提供Topic服务的Master、Slave建立长连接，且定时向Master、Slave发送心跳。Consumer既可以从Master订阅消息，也可以从Slave订阅消息，订阅规则由Broker配置决定</p><h4 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h4><p><strong>单Master模式</strong></p><p>这种方式风险较大，一旦Broker重启或者宕机时，会导致整个服务不可用。不建议线上环境使用，可以用于本地测试</p><p><strong>多Master模式</strong></p><p>一个集群无Slave，全是Master。优缺点如下：</p><p><strong>优点：</strong>配置简单，单个Master宕机或重启维护对应用无影响，在磁盘配置为RAID10时，即便及其宕机不可恢复的情况下，由于RAID10磁盘非常可靠，消息也不会丢（异步刷盘丢失少量消息，同步刷盘一条不丢），性能最高</p><p><strong>缺点：</strong>但机器宕机期间，这台机器上未被消费的消息在机器恢复之前不可订阅，消息实时性会受到影响</p><p><strong>多Master多Slave模式（异步）</strong></p><p>每个Master配置一个Slave，有多对Master-Slave，HA采用异步复制的方式，主备有短暂消息延迟（毫秒级），这种模式的优缺点如下：</p><p><strong>优点：</strong>即使磁盘损坏，消息丢失的非常少，且消息实时性不会受影响，同时Master宕机后，消费者仍然可以从Slave消费，而且此过程对应用透明，不需要人工干预，性能同多Master模式几乎一样</p><p><strong>缺点：</strong>Master宕机，磁盘损坏抢矿洗啊会丢失少量消息</p><p><strong>多Master多Slave模式（同步）</strong></p><p>每个Master配置一个Slave，有多对Master-Slave，HA采用同步双写方式，即只有主备都写成功，才向应用返回成功，这种模式的优缺点如下：</p><p><strong>优点：</strong>数据与服务都无单点故障，Master宕机情况下，消息无延迟，服务可用性与数据可用性都非常高</p><p><strong>缺点：</strong>性能比异步复制模式略低（大概低10%左右），发送单个消息的RT会略高，且目前版本在主节点宕机后，备机不能自动切换为主机</p><h3 id="双主双从集群搭建"><a href="#双主双从集群搭建" class="headerlink" title="双主双从集群搭建"></a>双主双从集群搭建</h3><h4 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h4><p>消息高可用采用2m-2s（同步双写）方式</p><p><img src="/img/rocketmq/2m2s.png" alt="2m2s"></p><h4 id="集群工作流程"><a href="#集群工作流程" class="headerlink" title="集群工作流程"></a>集群工作流程</h4><p>启动NameServer，NameServer起来后监听端口，等待Broker、Producer、Consumer连上来，相当于一个路由控制中心。</p><p>Broker启动，跟所有的NameServer保持长连接，定时发送心跳包。心跳包中包含当前Broker信息（IP+端口等）以及存储所有Topic信息。注册成功后，NameServer集群中就有Topic跟Broker的映射关系</p><p>收发消息前，先创建Topic，创建Topic时需要制定该Topic要存储在哪些Broker上，也可以在发送消息时自动创建Topic</p><p>Producer发送消息，启动时先跟NameServer集群中的其中一台建立长连接，并从NameServer中获取当前发送的Topic存在哪些Broker上，轮询从队列列表中选择一个队列，然后与队列所在的Broker建立长连接从而向Broker发消息</p><p>Consumer跟Producer类似，跟其中一台NameServer建立长连接，获取当前订阅Topic存在哪些Broker上，然后直接跟Broker建立连接通道，开始消费消息</p><h4 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h4><p>RocketMQ默认使用3个端口：9876、10911、11011</p><p><strong>nameserver</strong>默认使用9876端口</p><p><strong>master</strong>默认使用10911端口</p><p><strong>slave</strong>默认使用11011端口</p><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/profile<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export ROCKETMQ_HOME=/usr/local/src/rocketmq<br>PATH=$PATH:$ROCKETMQ_HOME/bin<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile<br></code></pre></td></tr></table></figure><h4 id="创建消息存储路径"><a href="#创建消息存储路径" class="headerlink" title="创建消息存储路径"></a>创建消息存储路径</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir /usr/local/src/rocketmq/store<br>mkdir /usr/local/src/rocketmq/store/commitlog<br>mkdir /usr/local/src/rocketmq/store/consumequeue<br>mkdir /usr/local/src/rocketmq/store/index<br>mkdir /usr/local/src/rocketmq/store1<br>mkdir /usr/local/src/rocketmq/store/commitlog1<br>mkdir /usr/local/src/rocketmq/store/consumequeue1<br>mkdir /usr/local/src/rocketmq/store/index1<br></code></pre></td></tr></table></figure><h4 id="broker配置文件"><a href="#broker配置文件" class="headerlink" title="broker配置文件"></a>broker配置文件</h4><p><strong>master1</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /usr/local/src/rocketmq/conf/2m-2s-sync/broker-a.properties<br></code></pre></td></tr></table></figure><p>修改配置如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">所属集群名字</span><br>brokerClusterName=rocketmq-cluster<br><span class="hljs-meta prompt_">#</span><span class="language-bash">broker名字，注意此处不同的配置文件填写的不一样</span><br>brokerName=broker-a<br><span class="hljs-meta prompt_">#</span><span class="language-bash">0表示Master，&gt;0表示Slave</span><br>brokerId=0<br><span class="hljs-meta prompt_">#</span><span class="language-bash">nameServer地址，分号分隔</span><br>namesrvAddr=192.168.1.85:9876;192.168.1.220:9876<br><span class="hljs-meta prompt_">#</span><span class="language-bash">在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span><br>defaultTopicQueueNums=4<br><span class="hljs-meta prompt_">#</span><span class="language-bash">是否允许Broker自动创建Topic，建议线下开启，线上关闭</span><br>autoCreateTopicEnable=true<br><span class="hljs-meta prompt_">#</span><span class="language-bash">是否允许Broker自动穿件订阅组，建议线下开启，线上关闭</span><br>autoCreateSucscriptionGroup=true<br><span class="hljs-meta prompt_">#</span><span class="language-bash">Broker对外服务的监听端口</span><br>listenPort=10911<br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除文件的时间点，默认凌晨4点</span><br>deleteWhen=04<br><span class="hljs-meta prompt_">#</span><span class="language-bash">文件保存时间，默认48小时</span><br>fileReservedTime=120<br><span class="hljs-meta prompt_">#</span><span class="language-bash">commitLog每个文件的大小，默认1g</span><br>mapedFileSizeCommitLof=1073741824<br><span class="hljs-meta prompt_">#</span><span class="language-bash">ConsumeQueue每个文件默认存30w条，根据业务情况调整</span><br>mapedFileSizeConsumeQueue=300000<br><span class="hljs-meta prompt_">#</span><span class="language-bash">destroyMapedFileIntervalForcibly=120000</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">redeleteHangedFileInterval=120000</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">检测物理文件磁盘空间</span><br>diskMaxUsedSpaceRatio=88<br><span class="hljs-meta prompt_">#</span><span class="language-bash">存储路径</span><br>storePathRootDir=/usr/local/src/rocketmq/store<br><span class="hljs-meta prompt_">#</span><span class="language-bash">commitLog存储路径</span><br>storePathCommitLog=/usr/local/src/rocketmq/store/commitlog<br><span class="hljs-meta prompt_">#</span><span class="language-bash">消费队列存储路径</span><br>storePathConsumeQueue=/usr/local/src/rocketmq/store/consumequeue<br><span class="hljs-meta prompt_">#</span><span class="language-bash">消息索引存储位置</span><br>storePathIndex=/usr/local/src/rocket/storemq/index<br><span class="hljs-meta prompt_">#</span><span class="language-bash">checkpoint文件存储路径</span><br>storeCheckpoint=/usr/local/src/rocket/storemq/checkpoint<br><span class="hljs-meta prompt_">#</span><span class="language-bash">abort文件存储路径</span><br>abortFile=/usr/local/src/rocket/storemq/abort<br><span class="hljs-meta prompt_">#</span><span class="language-bash">限制的消息大小</span><br>maxMessageSize=65536<br><span class="hljs-meta prompt_">#</span><span class="language-bash">flushCommitLogLeaestPages=4</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">flushConsumeQueueLeaestPages=2</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">flushCommitLogThoroughInterval=1000</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">flushConsumeQueueThroughInterval=60000</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Broker的角色</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">- ASYNC_MASTER 异步复制Master</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">- SYNC_MASTER 同步双写Master</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">- SLAVE</span><br>brokerRole=SYNC_MASTER<br><span class="hljs-meta prompt_">#</span><span class="language-bash">刷盘方式</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">- ASYNC_FLUSH 异步刷盘</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">- SYNC_FLUSH 同步刷盘</span><br>flushDiskType=SYNC_FLUSH<br><span class="hljs-meta prompt_">#</span><span class="language-bash">checkTransactionMessageEnable=<span class="hljs-literal">false</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">发消息线程池数量</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">sendMessageThreadPoolNums=128</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">拉消息线程池数量</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">pullMessageThreadPoolNums=128</span><br></code></pre></td></tr></table></figure><p><strong>slave2</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /usr/local/src/rocketmq/conf/2m-2s-sync/broker-b-s.properties<br></code></pre></td></tr></table></figure><p>修改配置如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">所属集群名字</span><br>brokerClusterName=rocketmq-cluster<br><span class="hljs-meta prompt_">#</span><span class="language-bash">broker名字，注意此处不同的配置文件填写的不一样</span><br>brokerName=broker-b<br><span class="hljs-meta prompt_">#</span><span class="language-bash">0表示Master，&gt;0表示Slave</span><br>brokerId=1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">nameServer地址，分号分隔</span><br>namesrvAddr=192.168.1.85:9876;192.168.1.220:9876<br><span class="hljs-meta prompt_">#</span><span class="language-bash">在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span><br>defaultTopicQueueNums=4<br><span class="hljs-meta prompt_">#</span><span class="language-bash">是否允许Broker自动创建Topic，建议线下开启，线上关闭</span><br>autoCreateTopicEnable=true<br><span class="hljs-meta prompt_">#</span><span class="language-bash">是否允许Broker自动穿件订阅组，建议线下开启，线上关闭</span><br>autoCreateSucscriptionGroup=true<br><span class="hljs-meta prompt_">#</span><span class="language-bash">Broker对外服务的监听端口</span><br>listenPort=11011<br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除文件的时间点，默认凌晨4点</span><br>deleteWhen=04<br><span class="hljs-meta prompt_">#</span><span class="language-bash">文件保存时间，默认48小时</span><br>fileReservedTime=120<br><span class="hljs-meta prompt_">#</span><span class="language-bash">commitLog每个文件的大小，默认1g</span><br>mapedFileSizeCommitLof=1073741824<br><span class="hljs-meta prompt_">#</span><span class="language-bash">ConsumeQueue每个文件默认存30w条，根据业务情况调整</span><br>mapedFileSizeConsumeQueue=300000<br><span class="hljs-meta prompt_">#</span><span class="language-bash">destroyMapedFileIntervalForcibly=120000</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">redeleteHangedFileInterval=120000</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">检测物理文件磁盘空间</span><br>diskMaxUsedSpaceRatio=88<br><span class="hljs-meta prompt_">#</span><span class="language-bash">存储路径</span><br>storePathRootDir=/usr/local/src/rocketmq/store1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">commitLog存储路径</span><br>storePathCommitLog=/usr/local/src/rocketmq/store/commitlog1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">消费队列存储路径</span><br>storePathConsumeQueue=/usr/local/src/rocketmq/store/consumequeue1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">消息索引存储位置</span><br>storePathIndex=/usr/local/src/rocketmq/store/index1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">checkpoint文件存储路径</span><br>storeCheckpoint=/usr/local/src/rocketmq/store/checkpoint1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">abort文件存储路径</span><br>abortFile=/usr/local/src/rocketmq/store/abort1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">限制的消息大小</span><br>maxMessageSize=65536<br><span class="hljs-meta prompt_">#</span><span class="language-bash">flushCommitLogLeaestPages=4</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">flushConsumeQueueLeaestPages=2</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">flushCommitLogThoroughInterval=1000</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">flushConsumeQueueThroughInterval=60000</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Broker的角色</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">- ASYNC_MASTER 异步复制Master</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">- SYNC_MASTER 同步双写Master</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">- SLAVE</span><br>brokerRole=SLAVE<br><span class="hljs-meta prompt_">#</span><span class="language-bash">刷盘方式</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">- ASYNC_FLUSH 异步刷盘</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">- SYNC_FLUSH 同步刷盘</span><br>flushDiskType=ASYNC_FLUSH<br><span class="hljs-meta prompt_">#</span><span class="language-bash">checkTransactionMessageEnable=<span class="hljs-literal">false</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">发消息线程池数量</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">sendMessageThreadPoolNums=128</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">拉消息线程池数量</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">pullMessageThreadPoolNums=128</span><br></code></pre></td></tr></table></figure><p><strong>master2</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /usr/local/src/rocketmq/conf/2m-2s-sync/broker-b.properties<br></code></pre></td></tr></table></figure><p>修改配置如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">所属集群名字</span><br>brokerClusterName=rocketmq-cluster<br><span class="hljs-meta prompt_">#</span><span class="language-bash">broker名字，注意此处不同的配置文件填写的不一样</span><br>brokerName=broker-b<br><span class="hljs-meta prompt_">#</span><span class="language-bash">0表示Master，&gt;0表示Slave</span><br>brokerId=0<br><span class="hljs-meta prompt_">#</span><span class="language-bash">nameServer地址，分号分隔</span><br>namesrvAddr=192.168.1.85:9876;192.168.1.220:9876<br><span class="hljs-meta prompt_">#</span><span class="language-bash">在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span><br>defaultTopicQueueNums=4<br><span class="hljs-meta prompt_">#</span><span class="language-bash">是否允许Broker自动创建Topic，建议线下开启，线上关闭</span><br>autoCreateTopicEnable=true<br><span class="hljs-meta prompt_">#</span><span class="language-bash">是否允许Broker自动穿件订阅组，建议线下开启，线上关闭</span><br>autoCreateSucscriptionGroup=true<br><span class="hljs-meta prompt_">#</span><span class="language-bash">Broker对外服务的监听端口</span><br>listenPort=10911<br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除文件的时间点，默认凌晨4点</span><br>deleteWhen=04<br><span class="hljs-meta prompt_">#</span><span class="language-bash">文件保存时间，默认48小时</span><br>fileReservedTime=120<br><span class="hljs-meta prompt_">#</span><span class="language-bash">commitLog每个文件的大小，默认1g</span><br>mapedFileSizeCommitLof=1073741824<br><span class="hljs-meta prompt_">#</span><span class="language-bash">ConsumeQueue每个文件默认存30w条，根据业务情况调整</span><br>mapedFileSizeConsumeQueue=300000<br><span class="hljs-meta prompt_">#</span><span class="language-bash">destroyMapedFileIntervalForcibly=120000</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">redeleteHangedFileInterval=120000</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">检测物理文件磁盘空间</span><br>diskMaxUsedSpaceRatio=88<br><span class="hljs-meta prompt_">#</span><span class="language-bash">存储路径</span><br>storePathRootDir=/usr/local/src/rocketmq/store<br><span class="hljs-meta prompt_">#</span><span class="language-bash">commitLog存储路径</span><br>storePathCommitLog=/usr/local/src/rocketmq/store/commitlog<br><span class="hljs-meta prompt_">#</span><span class="language-bash">消费队列存储路径</span><br>storePathConsumeQueue=/usr/local/src/rocketmq/store/consumequeue<br><span class="hljs-meta prompt_">#</span><span class="language-bash">消息索引存储位置</span><br>storePathIndex=/usr/local/src/rocketmq/store/index<br><span class="hljs-meta prompt_">#</span><span class="language-bash">checkpoint文件存储路径</span><br>storeCheckpoint=/usr/local/src/rocketmq/store/checkpoint<br><span class="hljs-meta prompt_">#</span><span class="language-bash">abort文件存储路径</span><br>abortFile=/usr/local/src/rocketmq/store/abort<br><span class="hljs-meta prompt_">#</span><span class="language-bash">限制的消息大小</span><br>maxMessageSize=65536<br><span class="hljs-meta prompt_">#</span><span class="language-bash">flushCommitLogLeaestPages=4</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">flushConsumeQueueLeaestPages=2</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">flushCommitLogThoroughInterval=1000</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">flushConsumeQueueThroughInterval=60000</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Broker的角色</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">- ASYNC_MASTER 异步复制Master</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">- SYNC_MASTER 同步双写Master</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">- SLAVE</span><br>brokerRole=SYNC_MASTER<br><span class="hljs-meta prompt_">#</span><span class="language-bash">刷盘方式</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">- ASYNC_FLUSH 异步刷盘</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">- SYNC_FLUSH 同步刷盘</span><br>flushDiskType=SYNC_FLUSH<br><span class="hljs-meta prompt_">#</span><span class="language-bash">checkTransactionMessageEnable=<span class="hljs-literal">false</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">发消息线程池数量</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">sendMessageThreadPoolNums=128</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">拉消息线程池数量</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">pullMessageThreadPoolNums=128</span><br></code></pre></td></tr></table></figure><p><strong>slave1</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /usr/local/src/rocketmq/conf/2m-2s-sync/broker-a-s.properties<br></code></pre></td></tr></table></figure><p>修改配置如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">所属集群名字</span><br>brokerClusterName=rocketmq-cluster<br><span class="hljs-meta prompt_">#</span><span class="language-bash">broker名字，注意此处不同的配置文件填写的不一样</span><br>brokerName=broker-a<br><span class="hljs-meta prompt_">#</span><span class="language-bash">0表示Master，&gt;0表示Slave</span><br>brokerId=1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">nameServer地址，分号分隔</span><br>namesrvAddr=192.168.1.85:9876;192.168.1.220:9876<br><span class="hljs-meta prompt_">#</span><span class="language-bash">在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span><br>defaultTopicQueueNums=4<br><span class="hljs-meta prompt_">#</span><span class="language-bash">是否允许Broker自动创建Topic，建议线下开启，线上关闭</span><br>autoCreateTopicEnable=true<br><span class="hljs-meta prompt_">#</span><span class="language-bash">是否允许Broker自动穿件订阅组，建议线下开启，线上关闭</span><br>autoCreateSucscriptionGroup=true<br><span class="hljs-meta prompt_">#</span><span class="language-bash">Broker对外服务的监听端口</span><br>listenPort=11011<br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除文件的时间点，默认凌晨4点</span><br>deleteWhen=04<br><span class="hljs-meta prompt_">#</span><span class="language-bash">文件保存时间，默认48小时</span><br>fileReservedTime=120<br><span class="hljs-meta prompt_">#</span><span class="language-bash">commitLog每个文件的大小，默认1g</span><br>mapedFileSizeCommitLof=1073741824<br><span class="hljs-meta prompt_">#</span><span class="language-bash">ConsumeQueue每个文件默认存30w条，根据业务情况调整</span><br>mapedFileSizeConsumeQueue=300000<br><span class="hljs-meta prompt_">#</span><span class="language-bash">destroyMapedFileIntervalForcibly=120000</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">redeleteHangedFileInterval=120000</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">检测物理文件磁盘空间</span><br>diskMaxUsedSpaceRatio=88<br><span class="hljs-meta prompt_">#</span><span class="language-bash">存储路径</span><br>storePathRootDir=/usr/local/src/rocketmq/store1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">commitLog存储路径</span><br>storePathCommitLog=/usr/local/src/rocketmq/store/commitlog1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">消费队列存储路径</span><br>storePathConsumeQueue=/usr/local/src/rocketmq/store/consumequeue1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">消息索引存储位置</span><br>storePathIndex=/usr/local/src/rocketmq/store/index1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">checkpoint文件存储路径</span><br>storeCheckpoint=/usr/local/src/rocketmq/store/checkpoint1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">abort文件存储路径</span><br>abortFile=/usr/local/src/rocketmq/store/abort1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">限制的消息大小</span><br>maxMessageSize=65536<br><span class="hljs-meta prompt_">#</span><span class="language-bash">flushCommitLogLeaestPages=4</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">flushConsumeQueueLeaestPages=2</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">flushCommitLogThoroughInterval=1000</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">flushConsumeQueueThroughInterval=60000</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Broker的角色</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">- ASYNC_MASTER 异步复制Master</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">- SYNC_MASTER 同步双写Master</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">- SLAVE</span><br>brokerRole=SLAVE<br><span class="hljs-meta prompt_">#</span><span class="language-bash">刷盘方式</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">- ASYNC_FLUSH 异步刷盘</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">- SYNC_FLUSH 同步刷盘</span><br>flushDiskType=ASYNC_FLUSH<br><span class="hljs-meta prompt_">#</span><span class="language-bash">checkTransactionMessageEnable=<span class="hljs-literal">false</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">发消息线程池数量</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">sendMessageThreadPoolNums=128</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">拉消息线程池数量</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">pullMessageThreadPoolNums=128</span><br></code></pre></td></tr></table></figure><h4 id="修改启动脚本文件"><a href="#修改启动脚本文件" class="headerlink" title="修改启动脚本文件"></a>修改启动脚本文件</h4><p><strong>runbroker.sh</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /usr/local/src/rocketmq/bin/runbroker.sh<br></code></pre></td></tr></table></figure><p>需要根据内存大小进行适当的对JVM参数进行调整</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">JAVA_OPT=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -server -Xms256m -Xmx256m -Xmn128m&quot;</span><br></code></pre></td></tr></table></figure><p><strong>runserver.sh</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /usr/local/src/rocketmq/bin/runserver.sh<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">JAVA_OPT=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -server -Xms256m -Xmx256m -Xmn128m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span><br></code></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p><strong>启动NameServer集群</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/src/rocketmq/bin<br><span class="hljs-built_in">nohup</span> sh mqnamesrv &amp;<br></code></pre></td></tr></table></figure><p><strong>启动Broker集群</strong></p><p>master1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/src/rocketmq/bin<br><span class="hljs-built_in">nohup</span> sh mqbroker -c /usr/local/src/rocketmq/conf/2m-2s-<span class="hljs-built_in">sync</span>/broker-a.properties &amp;<br></code></pre></td></tr></table></figure><p>slave2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/src/rocketmq/bin<br><span class="hljs-built_in">nohup</span> sh mqbroker -c /usr/local/src/rocketmq/conf/2m-2s-<span class="hljs-built_in">sync</span>/broker-b-s.properties &amp;<br></code></pre></td></tr></table></figure><p>master2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/src/rocketmq/bin<br><span class="hljs-built_in">nohup</span> sh mqbroker -c /usr/local/src/rocketmq/conf/2m-2s-<span class="hljs-built_in">sync</span>/broker-b.properties &amp;<br></code></pre></td></tr></table></figure><p>slave1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/src/rocketmq/bin<br><span class="hljs-built_in">nohup</span> sh mqbroker -c /usr/local/src/rocketmq/conf/2m-2s-<span class="hljs-built_in">sync</span>/broker-a-s.properties &amp;<br></code></pre></td></tr></table></figure><h4 id="查看进程状态"><a href="#查看进程状态" class="headerlink" title="查看进程状态"></a>查看进程状态</h4><p><img src="/img/rocketmq/jps.png" alt="jps"></p><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> -500f ~/logs/rocketmqlogs/namesrv.log<br><span class="hljs-built_in">tail</span> -500f ~/logs/rocketmqlogs/broker.log<br></code></pre></td></tr></table></figure><h3 id="mqadmin管理工具"><a href="#mqadmin管理工具" class="headerlink" title="mqadmin管理工具"></a>mqadmin管理工具</h3><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>进入RocketMQ安装位置，在bin目录下执行.&#x2F;mqadmin {command} {args}</p><h4 id="命令介绍"><a href="#命令介绍" class="headerlink" title="命令介绍"></a>命令介绍</h4><p><strong>Topic相关命令</strong></p><table border=0 cellpadding=0 cellspacing=0 width=714> <col width=177> <col width=175> <col width=177> <col width=185> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl63 width=177 style='height:17.0pt;width:133pt'>名称</td>  <td class=xl64 width=175 style='width:131pt'>含义</td>  <td class=xl64 width=177 style='width:133pt'>命令选项</td>  <td class=xl64 width=185 style='width:139pt'>说明</td> </tr> <tr height=132 style='height:99.0pt'>  <td rowspan=8 height=593 class=xl68 width=163 style='border-bottom:1.0pt;  height:444.0pt;border-top:none;width:122pt'>updateTopic</td>  <td rowspan=8 class=xl70 width=135 style='border-bottom:1.0pt;  border-top:none;width:101pt'>创建更新Topic配置</td>  <td class=xl65 width=149 style='width:112pt'>-b</td>  <td class=xl66 width=159 style='width:119pt'>Broker 地址，表示 topic 所在  Broker，只支持单台Broker，地址为ip:port</td> </tr> <tr height=132 style='height:99.0pt'>  <td height=132 class=xl65 width=149 style='height:99.0pt;width:112pt'>-c</td>  <td class=xl66 width=159 style='width:119pt'>cluster 名称，表示 topic 所在集群（集群可通过  clusterList 查询）</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl65 width=149 style='height:17.0pt;width:112pt'>-h-</td>  <td class=xl66 width=159 style='width:119pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl65 width=149 style='height:43.0pt;width:112pt'>-n</td>  <td class=xl66 width=159 style='width:119pt'>NameServer服务地址，格式 ip:port</td> </tr> <tr height=76 style='height:57.0pt'>  <td height=76 class=xl65 width=149 style='height:57.0pt;width:112pt'>-p</td>  <td class=xl66 width=159 style='width:119pt'>指定新topic的读写权限( W=2|R=4|WR=6 )</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl65 width=149 style='height:29.0pt;width:112pt'>-r</td>  <td class=xl66 width=159 style='width:119pt'>可读队列数（默认为 8）</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl65 width=149 style='height:29.0pt;width:112pt'>-w</td>  <td class=xl66 width=159 style='width:119pt'>可写队列数（默认为 8）</td> </tr> <tr height=95 style='height:71.0pt'>  <td height=95 class=xl65 width=149 style='height:71.0pt;width:112pt'>-t</td>  <td class=xl66 width=159 style='width:119pt'>topic 名称（名称只能使用字符  ^[a-zA-Z0-9_-]+$ ）</td> </tr> <tr height=132 style='height:99.0pt'>  <td rowspan=4 height=307 class=xl68 width=163 style='border-bottom:1.0pt;  height:230.0pt;border-top:none;width:122pt'>deleteTopic</td>  <td rowspan=4 class=xl70 width=135 style='border-bottom:1.0pt;  border-top:none;width:101pt'>删除Topic</td>  <td class=xl65 width=149 style='width:112pt'>-c</td>  <td class=xl66 width=159 style='width:119pt'>cluster 名称，表示删除某集群下的某个 topic （集群  可通过 clusterList 查询）</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl65 width=149 style='height:17.0pt;width:112pt'>-h</td>  <td class=xl66 width=159 style='width:119pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl65 width=149 style='height:43.0pt;width:112pt'>-n</td>  <td class=xl66 width=159 style='width:119pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=95 style='height:71.0pt'>  <td height=95 class=xl65 width=149 style='height:71.0pt;width:112pt'>-t</td>  <td class=xl66 width=159 style='width:119pt'>topic 名称（名称只能使用字符  ^[a-zA-Z0-9_-]+$ ）</td> </tr> <tr height=23 style='height:17.0pt'>  <td rowspan=3 height=287 class=xl68 width=163 style='border-bottom:1.0pt;  height:215.0pt;border-top:none;width:122pt'>topicList</td>  <td rowspan=3 class=xl70 width=135 style='border-bottom:1.0pt;  border-top:none;width:101pt'>查看 Topic 列表信息</td>  <td class=xl65 width=149 style='width:112pt'>-h</td>  <td class=xl66 width=159 style='width:119pt'>打印帮助</td> </tr> <tr height=207 style='height:155.0pt'>  <td height=207 class=xl65 width=149 style='height:155.0pt;width:112pt'>-c</td>  <td class=xl66 width=159 style='width:119pt'>不配置-c只返回topic列表，增加-c返回clusterName,  topic, consumerGroup信息，即topic的所属集群和订阅关系，没有参数</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl65 width=149 style='height:43.0pt;width:112pt'>-n</td>  <td class=xl66 width=159 style='width:119pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td rowspan=3 height=103 class=xl68 width=163 style='border-bottom:1.0pt;  height:77.0pt;border-top:none;width:122pt'>topicRoute</td>  <td rowspan=3 class=xl70 width=135 style='border-bottom:1.0pt;  border-top:none;width:101pt'>查看 Topic 路由信息</td>  <td class=xl65 width=149 style='width:112pt'>-t</td>  <td class=xl66 width=159 style='width:119pt'>topic 名称</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl65 width=149 style='height:17.0pt;width:112pt'>-h</td>  <td class=xl66 width=159 style='width:119pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl65 width=149 style='height:43.0pt;width:112pt'>-n</td>  <td class=xl66 width=159 style='width:119pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td rowspan=3 height=103 class=xl68 width=163 style='border-bottom:1.0pt;  height:77.0pt;border-top:none;width:122pt'>topicStatus</td>  <td rowspan=3 class=xl70 width=135 style='border-bottom:1.0pt;  border-top:none;width:101pt'>查看 Topic 消息队列offset</td>  <td class=xl65 width=149 style='width:112pt'>-t</td>  <td class=xl66 width=159 style='width:119pt'>topic 名称</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl65 width=149 style='height:17.0pt;width:112pt'>-h</td>  <td class=xl66 width=159 style='width:119pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl65 width=149 style='height:43.0pt;width:112pt'>-n</td>  <td class=xl66 width=159 style='width:119pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td rowspan=3 height=103 class=xl68 width=163 style='border-bottom:1.0pt;  height:77.0pt;border-top:none;width:122pt'>topicClusterList</td>  <td rowspan=3 class=xl70 width=135 style='border-bottom:1.0pt;  border-top:none;width:101pt'>查看 Topic 所在集群列表</td>  <td class=xl65 width=149 style='width:112pt'>-t</td>  <td class=xl66 width=159 style='width:119pt'>topic 名称</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl65 width=149 style='height:17.0pt;width:112pt'>-h</td>  <td class=xl66 width=159 style='width:119pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl65 width=149 style='height:43.0pt;width:112pt'>-n</td>  <td class=xl66 width=159 style='width:119pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td rowspan=6 height=518 class=xl68 width=163 style='border-bottom:1.0pt;  height:380pt;border-top:none;width:122pt'>updateTopicPerm</td>  <td rowspan=6 class=xl70 width=135 style='border-bottom:1.0pt;  border-top:none;width:101pt'>更新 Topic 读写权限</td>  <td class=xl65 width=149 style='width:112pt'>-t</td>  <td class=xl66 width=159 style='width:119pt'>topic 名称</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl65 width=149 style='height:17.0pt;width:112pt'>-h</td>  <td class=xl66 width=159 style='width:119pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl65 width=149 style='height:43.0pt;width:112pt'>-n</td>  <td class=xl66 width=159 style='width:119pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=132 style='height:99.0pt'>  <td height=132 class=xl65 width=149 style='height:99.0pt;width:112pt'>-b</td>  <td class=xl66 width=159 style='width:119pt'>Broker 地址，表示 topic 所在  Broker，只支持单台Broker，地址为ip:port</td> </tr> <tr height=76 style='height:57.0pt'>  <td height=76 class=xl65 width=149 style='height:57.0pt;width:112pt'>-p</td>  <td class=xl66 width=159 style='width:119pt'>指定新 topic 的读写权限( W=2|R=4|WR=6 )</td> </tr> <tr height=207 style='height:155.0pt'>  <td height=207 class=xl65 width=149 style='height:155.0pt;width:112pt'>-c</td>  <td class=xl66 width=159 style='width:119pt'>cluster 名称，表示 topic 所在集群（集群可通过  clusterList 查询），-b优先，如果没有-b，则对集群中所有Broker执行命令</td> </tr> <tr height=23 style='height:17.0pt'>  <td rowspan=5 height=199 class=xl68 width=163 style='border-bottom:1.0pt;  height:149.0pt;border-top:none;width:122pt'>updateOrderConf</td>  <td rowspan=5 class=xl70 width=135 style='border-bottom:1.0pt;  border-top:none;width:101pt'>从NameServer上创建、删除、获取特定命名空间的kv配置，目前还未启用</td>  <td class=xl65 width=149 style='width:112pt'>-h</td>  <td class=xl66 width=159 style='width:119pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl65 width=149 style='height:43.0pt;width:112pt'>-n</td>  <td class=xl66 width=159 style='width:119pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl65 width=149 style='height:17.0pt;width:112pt'>-t</td>  <td class=xl66 width=159 style='width:119pt'>topic，键</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl65 width=149 style='height:29.0pt;width:112pt'>-v</td>  <td class=xl66 width=159 style='width:119pt'>orderConf，值</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl65 width=149 style='height:43.0pt;width:112pt'>-m</td>  <td class=xl66 width=159 style='width:119pt'>method，可选get、put、delete</td> </tr> <tr height=23 style='height:17.0pt'>  <td rowspan=4 height=198 class=xl68 width=163 style='border-bottom:1.0pt;  height:140pt;border-top:none;width:122pt'>allocateMQ</td>  <td rowspan=4 class=xl70 width=135 style='border-bottom:1.0pt;  border-top:none;width:101pt'>以平均负载算法计算消费者列表负载消息队列的负载结果</td>  <td class=xl65 width=149 style='width:112pt'>-t</td>  <td class=xl66 width=159 style='width:119pt'>topic 名称</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl65 width=149 style='height:17.0pt;width:112pt'>-h</td>  <td class=xl66 width=159 style='width:119pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl65 width=149 style='height:43.0pt;width:112pt'>-n</td>  <td class=xl66 width=159 style='width:119pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=95 style='height:71.0pt'>  <td height=95 class=xl65 width=149 style='height:71.0pt;width:112pt'>-i</td>  <td class=xl66 width=159 style='width:119pt'>ipList，用逗号分隔，计算这些ip去负载Topic的消息队列</td> </tr> <tr height=23 style='height:17.0pt'>  <td rowspan=4 height=142 class=xl68 width=163 style='border-bottom:1.0pt solid black;  height:106.0pt;border-top:1.0pt;width:122pt'>statsAll</td>  <td rowspan=4 class=xl70 width=135 style='border-bottom:1.0pt;  border-top:none;width:101pt'>打印Topic订阅关系、TPS、积累量、24h读写总量等信息</td>  <td class=xl65 width=149 style='width:112pt'>-h</td>  <td class=xl66 width=159 style='width:119pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl65 width=149 style='height:43.0pt;width:112pt'>-n</td>  <td class=xl66 width=159 style='width:119pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl65 width=149 style='height:29.0pt;width:112pt'>-a</td>  <td class=xl66 width=159 style='width:119pt'>是否只打印活跃topic</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl65 width=149 style='height:17.0pt;width:112pt'>-t</td>  <td class=xl66 width=159 style='width:119pt'>指定topic</td> </tr></table><p><strong>集群相关</strong></p><table border=0 cellpadding=0 cellspacing=0 width=714> <col width=177> <col width=175> <col width=177> <col width=185> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl63 width=177 style='height:17.0pt;width:133pt'>名称</td>  <td class=xl64 width=175 style='width:131pt'>含义</td>  <td class=xl64 width=177 style='width:133pt'>命令选项</td>  <td class=xl64 width=185 style='width:139pt'>说明</td> </tr> <tr height=207 style='height:155.0pt'>  <td rowspan=4 height=326 class=xl67 width=177 style='border-bottom:1.0pt;  height:244.0pt;border-top:none;width:133pt'><span  style='mso-spacerun:yes'> </span>clusterList</td>  <td rowspan=4 class=xl70 width=175 style='border-bottom:1.0pt;  border-top:none;width:131pt'>查看集群信息，集群、BrokerName、BrokerId、TPS等信息</td>  <td class=xl65 width=177 style='width:133pt'>-m</td>  <td class=xl66 width=185 style='width:139pt'>打印更多信息 (增加打印出如下信息 #InTotalYest,  #OutTotalYest, #InTotalToday ,#OutTotalToday)</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl65 width=177 style='height:17.0pt;width:133pt'>-h</td>  <td class=xl66 width=185 style='width:139pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl65 width=177 style='height:43.0pt;width:133pt'>-n</td>  <td class=xl66 width=185 style='width:139pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl65 width=177 style='height:29.0pt;width:133pt'>-i</td>  <td class=xl66 width=185 style='width:139pt'>打印间隔，单位秒</td> </tr> <tr height=95 style='height:71.0pt'>  <td rowspan=8 height=391 class=xl67 width=177 style='border-bottom:1.0pt;  height:292.0pt;border-top:none;width:133pt'>clusterRT</td>  <td rowspan=8 class=xl70 width=175 style='border-bottom:1.0pt;  border-top:none;width:131pt'>发送消息检测集群各Broker RT。消息发往${BrokerName} Topic。</td>  <td class=xl65 width=177 style='width:133pt'>-a</td>  <td class=xl66 width=185 style='width:139pt'>amount，每次探测的总数，RT = 总时间 /  amount</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl65 width=177 style='height:29.0pt;width:133pt'>-s</td>  <td class=xl66 width=185 style='width:139pt'>消息大小，单位B</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl65 width=177 style='height:17.0pt;width:133pt'>-c</td>  <td class=xl66 width=185 style='width:139pt'>探测哪个集群</td> </tr> <tr height=76 style='height:57.0pt'>  <td height=76 class=xl65 width=177 style='height:57.0pt;width:133pt'>-p</td>  <td class=xl66 width=185 style='width:139pt'>是否打印格式化日志，以|分割，默认不打印</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl65 width=177 style='height:17.0pt;width:133pt'>-h</td>  <td class=xl66 width=185 style='width:139pt'>打印帮助</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl65 width=177 style='height:29.0pt;width:133pt'>-m</td>  <td class=xl66 width=185 style='width:139pt'>所属机房，打印使用</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl65 width=177 style='height:29.0pt;width:133pt'>-i</td>  <td class=xl66 width=185 style='width:139pt'>发送间隔，单位秒</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl65 width=177 style='height:43.0pt;width:133pt'>-n</td>  <td class=xl66 width=185 style='width:139pt'>NameServer 服务地址，格式 ip:port</td> </tr></table><p><strong>Broker相关</strong></p><table border=0 cellpadding=0 cellspacing=0 width=714> <col width=177> <col width=175> <col width=177> <col width=185> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl63 width=177 style='height:17.0pt;width:133pt'>名称</td>  <td class=xl64 width=175 style='width:131pt'>含义</td>  <td class=xl64 width=177 style='width:133pt'>命令选项</td>  <td class=xl64 width=185 style='width:139pt'>说明</td> </tr> <tr height=57 style='height:43.0pt'>  <td rowspan=6 height=206 class=xl69 width=191 style='border-bottom:1.0pt;  height:154.0pt;border-top:none;width:143pt'>updateBrokerConfig</td>  <td rowspan=6 class=xl72 width=87 style='border-bottom:1.0pt;  border-top:none;width:65pt'>更新 Broker 配置文件，会修改Broker.conf</td>  <td class=xl67 width=87 style='width:65pt'>-b</td>  <td class=xl68 width=87 style='width:65pt'>Broker 地址，格式为ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-c</td>  <td class=xl68 width=87 style='width:65pt'>cluster 名称</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-k</td>  <td class=xl68 width=87 style='width:65pt'>key 值</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-v</td>  <td class=xl68 width=87 style='width:65pt'>value 值</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=57 style='height:43.0pt'>  <td rowspan=3 height=137 class=xl69 width=191 style='border-bottom:1.0pt;  height:103.0pt;border-top:none;width:143pt'>brokerStatus</td>  <td rowspan=3 class=xl72 width=87 style='border-bottom:1.0pt;  border-top:none;width:65pt'>查看 Broker 统计信息、运行状态（你想要的信息几乎都在里面）</td>  <td class=xl67 width=87 style='width:65pt'>-b</td>  <td class=xl68 width=87 style='width:65pt'>Broker 地址，地址为ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=57 style='height:43.0pt'>  <td rowspan=6 height=256 class=xl69 width=191 style='border-bottom:1.0pt;  height:192.0pt;border-top:none;width:143pt'>brokerConsumeStats</td>  <td rowspan=6 class=xl72 width=87 style='border-bottom:1.0pt;  border-top:none;width:65pt'>Broker中各个消费者的消费情况，按Message Queue维度返回Consume  Offset，Broker Offset，Diff，TImestamp等信息</td>  <td class=xl67 width=87 style='width:65pt'>-b</td>  <td class=xl68 width=87 style='width:65pt'>Broker 地址，地址为ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>  <td class=xl68 width=87 style='width:65pt'>请求超时时间</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-l</td>  <td class=xl68 width=87 style='width:65pt'>diff阈值，超过阈值才打印</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-o</td>  <td class=xl68 width=87 style='width:65pt'>是否为顺序topic，一般为false</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=57 style='height:43.0pt'>  <td rowspan=2 height=114 class=xl69 width=191 style='border-bottom:1.0pt;  height:86.0pt;border-top:none;width:143pt'>getBrokerConfig</td>  <td rowspan=2 class=xl72 width=87 style='border-bottom:1.0pt  border-top:none;width:65pt'>获取Broker配置</td>  <td class=xl67 width=87 style='width:65pt'>-b</td>  <td class=xl68 width=87 style='width:65pt'>Broker 地址，地址为ip:port</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=57 style='height:43.0pt'>  <td rowspan=3 height=137 class=xl69 width=191 style='border-bottom:1.0pt;  height:103.0pt;border-top:none;width:143pt'>wipeWritePerm</td>  <td rowspan=3 class=xl72 width=87 style='border-bottom:1.0pt  border-top:none;width:65pt'>从NameServer上清除 Broker写权限</td>  <td class=xl67 width=87 style='width:65pt'>-b</td>  <td class=xl68 width=87 style='width:65pt'>Broker 地址，地址为ip:port</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td rowspan=4 height=160 class=xl69 width=191 style='border-bottom:1.0pt;  height:120.0pt;border-top:none;width:143pt'>cleanExpiredCQ</td>  <td rowspan=4 class=xl72 width=87 style='border-bottom:1.0pt  border-top:none;width:65pt'>清理Broker上过期的Consume Queue，如果手动减少对列数可能产生过期队列</td>  <td class=xl67 width=87 style='width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-b</td>  <td class=xl68 width=87 style='width:65pt'>Broker 地址，地址为ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-c</td>  <td class=xl68 width=87 style='width:65pt'>集群名称</td> </tr> <tr height=88 style='mso-height-source:userset;height:66.0pt'>  <td rowspan=4 height=191 class=xl69 width=191 style='border-bottom:1.0pt;  height:143.0pt;border-top:none;width:143pt'>cleanUnusedTopic</td>  <td rowspan=4 class=xl72 width=87 style='border-bottom:1.0pt  border-top:none;width:65pt'>清理Broker上不使用的Topic，从内存中释放Topic的Consume  Queue，如果手动删除Topic会产生不使用的Topic</td>  <td class=xl67 width=87 style='width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-b</td>  <td class=xl68 width=87 style='width:65pt'>Broker 地址，地址为ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-c</td>  <td class=xl68 width=87 style='width:65pt'>集群名称</td> </tr> <tr height=57 style='height:43.0pt'>  <td rowspan=5 height=199 class=xl69 width=191 style='border-bottom:1.0pt;  height:149.0pt;border-top:none;width:143pt'>sendMsgStatus</td>  <td rowspan=5 class=xl72 width=87 style='border-bottom:1.0pt  border-top:none;width:65pt'>向Broker发消息，返回发送状态和RT</td>  <td class=xl67 width=87 style='width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-b</td>  <td class=xl68 width=87 style='width:65pt'>BrokerName，注意不同于Broker地址</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-s</td>  <td class=xl68 width=87 style='width:65pt'>消息大小，单位B</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-c</td>  <td class=xl68 width=87 style='width:65pt'>发送次数</td> </tr></table><p><strong>消息相关</strong></p><table border=0 cellpadding=0 cellspacing=0 width=714> <col width=177> <col width=175> <col width=177> <col width=185><tr height=23 style='height:17.0pt'>  <td height=23 class=xl63 width=177 style='height:17.0pt;width:133pt'>名称</td>  <td class=xl64 width=175 style='width:131pt'>含义</td>  <td class=xl64 width=177 style='width:133pt'>命令选项</td>  <td class=xl64 width=185 style='width:139pt'>说明</td> </tr> <tr height=128 style='height:96.0pt'>  <td rowspan=3 height=208 class=xl69 width=87 style='border-bottom:1.0pt;  height:156.0pt;border-top:none;width:65pt'>queryMsgById</td>  <td rowspan=3 class=xl72 width=87 style='border-bottom:1.0pt;  border-top:none;width:65pt'>根据offsetMsgId查询msg，如果使用开源控制台，应使用offsetMsgId，此命令还有其他参数，具体作用请阅读QueryMsgByIdSubCommand。</td>  <td class=xl67 width=87 style='width:65pt'>-i</td>  <td class=xl67 width=87 style='width:65pt'>msgId</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td rowspan=4 height=126 class=xl69 width=87 style='border-bottom:1.0pt;  height:94.0pt;border-top:none;width:65pt'>queryMsgByKey</td>  <td rowspan=4 class=xl72 width=87 style='border-bottom:1.0pt;  border-top:none;width:65pt'>根据消息 Key 查询消息</td>  <td class=xl67 width=87 style='width:65pt'>-k</td>  <td class=xl67 width=87 style='width:65pt'>msgKey</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>  <td class=xl68 width=87 style='width:65pt'>Topic 名称</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=225 style='height:169.0pt'>  <td rowspan=6 height=390 class=xl69 width=87 style='border-bottom:1.0pt;  height:292.0pt;border-top:none;width:65pt'>queryMsgByOffset</td>  <td rowspan=6 class=xl72 width=87 style='border-bottom:1.0pt;  border-top:none;width:65pt'>根据 Offset 查询消息</td>  <td class=xl67 width=87 style='width:65pt'>-b</td>  <td class=xl68 width=87 style='width:65pt'>Broker 名称，（这里需要注意  填写的是 Broker 的名称，不是 Broker 的地址，Broker 名称可以在 clusterList 查到）</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-i</td>  <td class=xl68 width=87 style='width:65pt'>query 队列 id</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-o</td>  <td class=xl68 width=87 style='width:65pt'>offset 值</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>  <td class=xl68 width=87 style='width:65pt'>topic 名称</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=47>  <td rowspan=6 height=209 class=xl69 width=87 style='border-bottom:1.0pt;  height:156.0pt;border-top:none;width:65pt'>queryMsgByUniqueKey</td>  <td rowspan=6 class=xl72 width=87 style='border-bottom:1.0pt;  border-top:none;width:65pt'>根据msgId查询，msgId不同于offsetMsgId，区别详见常见运维问题。-g，-d配合使用，查到消息后尝试让特定的消费者消费消息并返回消费结果</td>  <td class=xl67 width=87 style='width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-i</td>  <td class=xl67 width=87 style='width:65pt'>uniqe msg id</td> </tr> <tr height=36 style='height:27.0pt'>  <td height=36 class=xl67 width=87 style='height:27.0pt;width:65pt'>-g</td>  <td class=xl67 width=87 style='width:65pt'>consumerGroup</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-d</td>  <td class=xl67 width=87 style='width:65pt'>clientId</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>  <td class=xl68 width=87 style='width:65pt'>topic名称</td> </tr> <tr height=23 style='height:17.0pt'>  <td rowspan=5 height=149 class=xl69 width=87 style='border-bottom:1.0pt  height:111.0pt;border-top:none;width:65pt'>checkMsgSendRT</td>  <td rowspan=5 class=xl72 width=87 style='border-bottom:1.0pt;  border-top:none;width:65pt'>检测向topic发消息的RT，功能类似clusterRT</td>  <td class=xl67 width=87 style='width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>  <td class=xl68 width=87 style='width:65pt'>topic名称</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-a</td>  <td class=xl68 width=87 style='width:65pt'>探测次数</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-s</td>  <td class=xl68 width=87 style='width:65pt'>消息大小</td> </tr> <tr height=23 style='height:17.0pt'>  <td rowspan=8 height=218 class=xl69 width=87 style='border-bottom:1.0pt;  height:162.0pt;border-top:none;width:65pt'>sendMessage</td>  <td rowspan=8 class=xl72 width=87 style='border-bottom:1.0pt;  border-top:none;width:65pt'>发送一条消息，可以根据配置发往特定Message Queue，或普通发送。</td>  <td class=xl67 width=87 style='width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>  <td class=xl68 width=87 style='width:65pt'>topic名称</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-p</td>  <td class=xl68 width=87 style='width:65pt'>body，消息体</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-k</td>  <td class=xl67 width=87 style='width:65pt'>keys</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-c</td>  <td class=xl67 width=87 style='width:65pt'>tags</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-b</td>  <td class=xl67 width=87 style='width:65pt'>BrokerName</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-i</td>  <td class=xl67 width=87 style='width:65pt'>queueId</td> </tr> <tr height=23 style='height:17.0pt'>  <td rowspan=10 height=312 class=xl69 width=87 style='border-bottom:1.0pt;  height:232.0pt;border-top:none;width:65pt'>consumeMessage</td>  <td rowspan=10 class=xl72 width=87 style='border-bottom:1.0pt;  border-top:none;width:65pt'>消费消息。可以根据offset、开始&amp;结束时间戳、消息队列消费消息，配置不同执行不同消费逻辑，详见ConsumeMessageCommand。</td>  <td class=xl67 width=87 style='width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>  <td class=xl68 width=87 style='width:65pt'>topic名称</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-b</td>  <td class=xl67 width=87 style='width:65pt'>BrokerName</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-o</td>  <td class=xl68 width=87 style='width:65pt'>从offset开始消费</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-i</td>  <td class=xl67 width=87 style='width:65pt'>queueId</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-g</td>  <td class=xl68 width=87 style='width:65pt'>消费者分组</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-s</td>  <td class=xl68 width=87 style='width:65pt'>开始时间戳，格式详见-h</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-d</td>  <td class=xl68 width=87 style='width:65pt'>结束时间戳</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-c</td>  <td class=xl68 width=87 style='width:65pt'>消费多少条消息</td> </tr> <tr height=23 style='height:17.0pt'>  <td rowspan=8 height=282 class=xl69 width=87 style='border-bottom:1.0pt;  height:210.0pt;border-top:none;width:65pt'>printMsg</td>  <td rowspan=8 class=xl72 width=87 style='border-bottom:1.0pt;  border-top:none;width:65pt'>从Broker消费消息并打印，可选时间段</td>  <td class=xl67 width=87 style='width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>  <td class=xl68 width=87 style='width:65pt'>topic名称</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-c</td>  <td class=xl68 width=87 style='width:65pt'>字符集，例如UTF-8</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-s</td>  <td class=xl68 width=87 style='width:65pt'>subExpress，过滤表达式</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-b</td>  <td class=xl68 width=87 style='width:65pt'>开始时间戳，格式参见-h</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-e</td>  <td class=xl68 width=87 style='width:65pt'>结束时间戳</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-d</td>  <td class=xl68 width=87 style='width:65pt'>是否打印消息体</td> </tr> <tr height=23 style='height:17.0pt'>  <td rowspan=12 height=390 class=xl69 width=87 style='border-bottom:1.0pt;  height:290.0pt;border-top:none;width:65pt'>printMsgByQueue</td>  <td rowspan=12 class=xl72 width=87 style='border-bottom:1.0pt;  border-top:none;width:65pt'>类似printMsg，但指定Message Queue</td>  <td class=xl67 width=87 style='width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>  <td class=xl68 width=87 style='width:65pt'>topic名称</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-i</td>  <td class=xl67 width=87 style='width:65pt'>queueId</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-a</td>  <td class=xl67 width=87 style='width:65pt'>BrokerName</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-c</td>  <td class=xl68 width=87 style='width:65pt'>字符集，例如UTF-8</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-s</td>  <td class=xl68 width=87 style='width:65pt'>subExpress，过滤表达式</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-b</td>  <td class=xl68 width=87 style='width:65pt'>开始时间戳，格式参见-h</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-e</td>  <td class=xl68 width=87 style='width:65pt'>结束时间戳</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-p</td>  <td class=xl68 width=87 style='width:65pt'>是否打印消息</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-d</td>  <td class=xl68 width=87 style='width:65pt'>是否打印消息体</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-f</td>  <td class=xl68 width=87 style='width:65pt'>是否统计tag数量并打印</td> </tr> <tr height=23 style='height:17.0pt'>  <td rowspan=7 height=410 class=xl69 width=87 style='border-bottom:1.0pt;  height:307.0pt;border-top:none;width:65pt'>resetOffsetByTime</td>  <td rowspan=7 class=xl72 width=87 style='border-bottom:1.0pt;  border-top:none;width:65pt'>按时间戳重置offset，Broker和consumer都会重置</td>  <td class=xl67 width=87 style='width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-g</td>  <td class=xl68 width=87 style='width:65pt'>消费者分组</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>  <td class=xl68 width=87 style='width:65pt'>topic名称</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-s</td>  <td class=xl68 width=87 style='width:65pt'>重置为此时间戳对应的offset</td> </tr> <tr height=188 style='height:141.0pt'>  <td height=188 class=xl67 width=87 style='height:141.0pt;width:65pt'>-f</td>  <td class=xl68 width=87 style='width:65pt'>是否强制重置，如果false，只支持回溯offset，如果true，不管时间戳对应offset与consumeOffset关系</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-c</td>  <td class=xl68 width=87 style='width:65pt'>是否重置c++客户端offset</td> </tr></table><p><strong>消费者、消费组相关</strong></p><table border=0 cellpadding=0 cellspacing=0 width=714> <col width=177> <col width=175> <col width=177> <col width=185><tr height=23 style='height:17.0pt'>  <td height=23 class=xl63 width=177 style='height:17.0pt;width:133pt'>名称</td>  <td class=xl64 width=175 style='width:131pt'>含义</td>  <td class=xl64 width=177 style='width:133pt'>命令选项</td>  <td class=xl64 width=185 style='width:139pt'>说明</td> </tr> <tr height=39 style='height:29.0pt'>  <td rowspan=4 height=158 class=xl69 width=87 style='border-bottom:1.0pt;  height:110pt;border-top:none;width:65pt'>consumerProgress</td>  <td rowspan=4 class=xl72 width=87 style='border-bottom:1.0pt;  border-top:none;width:65pt'>查看订阅组消费状态，可以查看具体的client IP的消息积累量</td>  <td class=xl67 width=87 style='width:65pt'>-g</td>  <td class=xl68 width=87 style='width:65pt'>消费者所属组名</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-s</td>  <td class=xl68 width=87 style='width:65pt'>是否打印client IP</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=105 style='mso-height-source:userset;height:79.0pt'>  <td rowspan=5 height=260 class=xl69 width=87 style='border-bottom:1.0pt;  height:195.0pt;border-top:none;width:65pt'>consumerStatus</td>  <td rowspan=5 class=xl72 width=87 style='border-bottom:1.0pt  border-top:none;width:65pt'>查看消费者状态，包括同一个分组中是否都是相同的订阅，分析Process  Queue是否堆积，返回消费者jstack结果，内容较多，使用者参见ConsumerStatusSubCommand</td>  <td class=xl67 width=87 style='width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=36 style='height:27.0pt'>  <td height=36 class=xl67 width=87 style='height:27.0pt;width:65pt'>-g</td>  <td class=xl67 width=87 style='width:65pt'>consumer group</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-i</td>  <td class=xl67 width=87 style='width:65pt'>clientId</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-s</td>  <td class=xl68 width=87 style='width:65pt'>是否执行jstack</td> </tr> <tr height=39 style='height:29.0pt'>  <td rowspan=5 height=181 class=xl69 width=87 style='border-bottom:1.0pt  height:135.0pt;border-top:none;width:65pt'>getConsumerStatus</td>  <td rowspan=5 class=xl72 width=87 style='border-bottom:1.0pt  border-top:none;width:65pt'>获取 Consumer 消费进度</td>  <td class=xl67 width=87 style='width:65pt'>-g</td>  <td class=xl68 width=87 style='width:65pt'>消费者所属组名</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>  <td class=xl68 width=87 style='width:65pt'>查询主题</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-i</td>  <td class=xl68 width=87 style='width:65pt'>Consumer 客户端 ip</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td rowspan=13 height=761 class=xl69 width=87 style='border-bottom:1.0pt  height:569.0pt;border-top:none;width:65pt'>updateSubGroup</td>  <td rowspan=13 class=xl72 width=87 style='border-bottom:1.0pt  border-top:none;width:65pt'>更新或创建订阅关系</td>  <td class=xl67 width=87 style='width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-b</td>  <td class=xl68 width=87 style='width:65pt'>Broker地址</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-c</td>  <td class=xl68 width=87 style='width:65pt'>集群名称</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-g</td>  <td class=xl68 width=87 style='width:65pt'>消费者分组名称</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-s</td>  <td class=xl68 width=87 style='width:65pt'>分组是否允许消费</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-m</td>  <td class=xl68 width=87 style='width:65pt'>是否从最小offset开始消费</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-d</td>  <td class=xl68 width=87 style='width:65pt'>是否是广播模式</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-q</td>  <td class=xl68 width=87 style='width:65pt'>重试队列数量</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-r</td>  <td class=xl68 width=87 style='width:65pt'>最大重试次数</td> </tr> <tr height=207 style='height:155.0pt'>  <td height=207 class=xl67 width=87 style='height:155.0pt;width:65pt'>-i</td>  <td class=xl68 width=87 style='width:65pt'>当slaveReadEnable开启时有效，且还未达到从slave消费时建议从哪个BrokerId消费，可以配置备机id，主动从备机消费</td> </tr> <tr height=132 style='height:99.0pt'>  <td height=132 class=xl67 width=87 style='height:99.0pt;width:65pt'>-w</td>  <td class=xl68 width=87 style='width:65pt'>如果Broker建议从slave消费，配置决定从哪个slave消费，配置BrokerId，例如1</td> </tr> <tr height=76 style='height:57.0pt'>  <td height=76 class=xl67 width=87 style='height:57.0pt;width:65pt'>-a</td>  <td class=xl68 width=87 style='width:65pt'>当消费者数量变化时是否通知其他消费者负载均衡</td> </tr> <tr height=57 style='height:43.0pt'>  <td rowspan=5 height=165 class=xl69 width=87 style='border-bottom:1.0pt  height:123.0pt;border-top:none;width:65pt'>deleteSubGroup</td>  <td rowspan=5 class=xl72 width=87 style='border-bottom:1.0pt  border-top:none;width:65pt'>从Broker删除订阅关系</td>  <td class=xl67 width=87 style='width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-b</td>  <td class=xl68 width=87 style='width:65pt'>Broker地址</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-c</td>  <td class=xl68 width=87 style='width:65pt'>集群名称</td> </tr> <tr height=39 style='height:29.0pt'>  <td height=39 class=xl67 width=87 style='height:29.0pt;width:65pt'>-g</td>  <td class=xl68 width=87 style='width:65pt'>消费者分组名称</td> </tr> <tr height=57 style='height:43.0pt'>  <td rowspan=6 height=172 class=xl69 width=87 style='border-bottom:1.0pt  height:120pt;border-top:none;width:65pt'>cloneGroupOffset</td>  <td rowspan=6 class=xl72 width=87 style='border-bottom:1.0pt  border-top:none;width:65pt'>在目标群组中使用源群组的offset</td>  <td class=xl67 width=87 style='width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-s</td>  <td class=xl68 width=87 style='width:65pt'>源消费者组</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-d</td>  <td class=xl68 width=87 style='width:65pt'>目标消费者组</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>  <td class=xl68 width=87 style='width:65pt'>topic名称</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-o</td>  <td class=xl68 width=87 style='width:65pt'>暂未使用</td> </tr></table><p><strong>连接相关</strong></p><table border=0 cellpadding=0 cellspacing=0 width=714> <col width=177> <col width=175> <col width=177> <col width=185><tr height=23 style='height:17.0pt'>  <td height=23 class=xl63 width=177 style='height:17.0pt;width:133pt'>名称</td>  <td class=xl64 width=175 style='width:131pt'>含义</td>  <td class=xl64 width=177 style='width:133pt'>命令选项</td>  <td class=xl64 width=185 style='width:139pt'>说明</td> </tr> <tr height=39 style='height:29.0pt'>  <td rowspan=3 height=119 class=xl69 width=87 style='border-bottom:1.0pt  height:89.0pt;border-top:none;width:65pt'>consumerConnec tion</td>  <td rowspan=3 class=xl72 width=87 style='border-bottom:1.0pt  border-top:none;width:65pt'>查询 Consumer 的网络连接</td>  <td class=xl67 width=87 style='width:65pt'>-g</td>  <td class=xl68 width=87 style='width:65pt'>消费者所属组名</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=39 style='height:29.0pt'>  <td rowspan=4 height=142 class=xl69 width=87 style='border-bottom:1.0pt  height:106.0pt;border-top:none;width:65pt'>producerConnec tion</td>  <td rowspan=4 class=xl72 width=87 style='border-bottom:1.0pt  border-top:none;width:65pt'>查询 Producer 的网络连接</td>  <td class=xl67 width=87 style='width:65pt'>-g</td>  <td class=xl68 width=87 style='width:65pt'>生产者所属组名</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-t</td>  <td class=xl68 width=87 style='width:65pt'>主题名称</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr></table><p><strong>NameServer相关</strong></p><table border=0 cellpadding=0 cellspacing=0 width=714> <col width=177> <col width=175> <col width=177> <col width=185><tr height=23 style='height:17.0pt'>  <td height=23 class=xl63 width=177 style='height:17.0pt;width:133pt'>名称</td>  <td class=xl64 width=175 style='width:131pt'>含义</td>  <td class=xl64 width=177 style='width:133pt'>命令选项</td>  <td class=xl64 width=185 style='width:139pt'>说明</td> </tr> <tr height=21 style='height:16.0pt'>  <td rowspan=5 height=143 class=xl69 width=87 style='border-bottom:1.0pt  height:100pt;border-top:none;width:65pt'>updateKvConfig</td>  <td rowspan=5 class=xl72 width=87 style='border-bottom:1.0pt  border-top:none;width:65pt'>更新NameServer的kv配置，目前还未使用</td>  <td class=xl75 width=87 style='width:65pt'>-s</td>  <td class=xl76 width=87 style='width:65pt'>命名空间</td> </tr> <tr height=21 style='height:16.0pt'>  <td height=21 class=xl75 width=87 style='height:16.0pt;width:65pt'>-k</td>  <td class=xl75 width=87 style='width:65pt'>key</td> </tr> <tr height=21 style='height:16.0pt'>  <td height=21 class=xl75 width=87 style='height:16.0pt;width:65pt'>-v</td>  <td class=xl75 width=87 style='width:65pt'>value</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=23 style='height:17.0pt'>  <td rowspan=4 height=126 class=xl69 width=87 style='border-bottom:1.0pt  height:94.0pt;border-top:none;width:65pt'>deleteKvConfig</td>  <td rowspan=4 class=xl72 width=87 style='border-bottom:1.0pt  border-top:none;width:65pt'>删除NameServer的kv配置</td>  <td class=xl67 width=87 style='width:65pt'>-s</td>  <td class=xl68 width=87 style='width:65pt'>命名空间</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-k</td>  <td class=xl67 width=87 style='width:65pt'>key</td> </tr> <tr height=57 style='height:43.0pt'>  <td height=57 class=xl67 width=87 style='height:43.0pt;width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td rowspan=2 height=80 class=xl69 width=87 style='border-bottom:1.0pt  height:60.0pt;border-top:none;width:65pt'>getNamesrvConfig</td>  <td rowspan=2 class=xl72 width=87 style='border-bottom:1.0pt  border-top:none;width:65pt'>获取NameServer配置</td>  <td class=xl67 width=87 style='width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=57 style='height:43.0pt'>  <td rowspan=4 height=126 class=xl69 width=87 style='border-bottom:1.0pt  height:94.0pt;border-top:none;width:65pt'>updateNamesrvConfig</td>  <td rowspan=4 class=xl72 width=87 style='border-bottom:1.0pt  border-top:none;width:65pt'>修改NameServer配置</td>  <td class=xl67 width=87 style='width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-k</td>  <td class=xl67 width=87 style='width:65pt'>key</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-v</td>  <td class=xl67 width=87 style='width:65pt'>value</td> </tr></table><p><strong>其他</strong></p><table border=0 cellpadding=0 cellspacing=0 width=714> <col width=177> <col width=175> <col width=177> <col width=185><tr height=23 style='height:17.0pt'>  <td height=23 class=xl63 width=177 style='height:17.0pt;width:133pt'>名称</td>  <td class=xl64 width=175 style='width:131pt'>含义</td>  <td class=xl64 width=177 style='width:133pt'>命令选项</td>  <td class=xl64 width=185 style='width:139pt'>说明</td> </tr> <tr height=57 style='height:43.0pt'>  <td rowspan=2 height=80 class=xl69 width=87 style='border-bottom:1.0pt  height:60.0pt;border-top:none;width:65pt'>startMonitoring</td>  <td rowspan=2 class=xl71 width=87 style='border-bottom:1.0pt  border-top:none;width:65pt'>开启监控进程，监控消息误删、重试队列消息数等</td>  <td class=xl67 width=87 style='width:65pt'>-n</td>  <td class=xl68 width=87 style='width:65pt'>NameServer 服务地址，格式 ip:port</td> </tr> <tr height=23 style='height:17.0pt'>  <td height=23 class=xl67 width=87 style='height:17.0pt;width:65pt'>-h</td>  <td class=xl68 width=87 style='width:65pt'>打印帮助</td> </tr></table><p><strong>注意事项</strong></p><p>几乎所有命令都需要配置-n表示NameServer地址，格式为ip:port</p><p>几乎所有命令都可以通过-h获取帮助</p><p>如果既有Broker地址（-b）配置项又有clusterName（-c）配置项，则优先以Broker地址执行命令；如果不配置Broker地址，则对集群中所有主机执行命令</p><h3 id="集群监控平台搭建"><a href="#集群监控平台搭建" class="headerlink" title="集群监控平台搭建"></a>集群监控平台搭建</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>RocketMQ有一个对其扩展的开源项目rocketmq-externals这个项目有一个子模块叫rocketmq-console，这个便是管理控制台项目了，先将rocketmq-externals拉到本地，因为我们需要自己对rocketmq-console进行编译打包运行</p><p>地址：<a href="https://github.com/apache/rocketmq-externals.git">https://github.com/apache/rocketmq-externals.git</a></p><h4 id="下载并编译打包"><a href="#下载并编译打包" class="headerlink" title="下载并编译打包"></a>下载并编译打包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/apache/rocketmq-externals.git<br><span class="hljs-built_in">cd</span> rocketmq-console<br>mvn clean package -Dmaven.test.skip=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>注意：打包前在rocketmq-console中配置namesrv集群地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rocketmq.config.namesrvAddr=192.168.1.85:9876;192.168.1.220:9876<br></code></pre></td></tr></table></figure><p>启动rocketmq-console</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar rocketmq-console-ng-1.0.0.jar<br></code></pre></td></tr></table></figure><p>启动成功之后，访问地址：<a href="http://localhost:8080/">http://localhost:8080</a></p><p><img src="/img/rocketmq/rocketmq-console2.png" alt="rocketmq-console"></p><p>集群状态：</p><p><img src="/img/rocketmq/cluster.png" alt="cluster"></p><h2 id="消息发送样例"><a href="#消息发送样例" class="headerlink" title="消息发送样例"></a>消息发送样例</h2><p>导入MQ客户端依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.rocketmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>rocketmq-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.7.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>消息生产者步骤分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>创建消息生产者producer，并制定生产者组名<br><span class="hljs-number">2.</span>制定NameServer地址<br><span class="hljs-number">3.</span>启动producer<br><span class="hljs-number">4.</span>创建消息对象，制定主题topic<br><span class="hljs-number">5.</span>发送消息<br><span class="hljs-number">6.</span>关闭消息生产者producer<br></code></pre></td></tr></table></figure><p>消息消费者步骤分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>创建消费者Consumer，制定消费者组名<br><span class="hljs-number">2.</span>指定NameServer地址<br><span class="hljs-number">3.</span>订阅主题Topic和Tag<br><span class="hljs-number">4.</span>设置回调函数，处理消息<br><span class="hljs-number">5.</span>启动消费者consumer<br></code></pre></td></tr></table></figure><h3 id="基本样例"><a href="#基本样例" class="headerlink" title="基本样例"></a>基本样例</h3><h4 id="消息发送"><a href="#消息发送" class="headerlink" title="消息发送"></a>消息发送</h4><p><strong>发送同步消息</strong></p><p>这种可靠性同步地发送方式使用的比较广泛，比如：重要的消息通知，短信通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SyncProducer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MQClientException, RemotingException, InterruptedException, MQBrokerException &#123;<br>        <span class="hljs-comment">//创建消息生产者对象，并指定生产者组名</span><br>        <span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;Group1&quot;</span>);<br>        <span class="hljs-comment">//指定NameServer地址</span><br>        producer.setNamesrvAddr(<span class="hljs-string">&quot;192.168.1.95:9876;192.168.1.220:9876&quot;</span>);<br>        <span class="hljs-comment">//启动producer</span><br>        producer.start();<br>        <span class="hljs-comment">//创建消息对象，指定Topic、Tag和消息体</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 参数一：消息主题Topic</span><br><span class="hljs-comment">             * 参数二：消息Tag</span><br><span class="hljs-comment">             * 参数三：消息内容</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;Tag1&quot;</span>,(<span class="hljs-string">&quot;message&quot;</span>+(i+<span class="hljs-number">1</span>)).getBytes());<br>            <span class="hljs-comment">//发送消息</span><br>            <span class="hljs-type">SendResult</span> <span class="hljs-variable">sendResult</span> <span class="hljs-operator">=</span> producer.send(message);<br>            System.out.println(<span class="hljs-string">&quot;发送状态：&quot;</span>+sendResult.getSendStatus());<br>            System.out.println(<span class="hljs-string">&quot;发送消息id：&quot;</span>+sendResult.getMsgId());<br>            System.out.println(<span class="hljs-string">&quot;当前队列id：&quot;</span>+sendResult.getMessageQueue().getQueueId());<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">//关闭生产者producer</span><br>        producer.shutdown();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>发送异步消息</strong></p><p>异步消息通常在对响应时间敏感的行业场景，即发送端不能容忍长时间地等待Broker的响应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AsyncProducer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MQClientException, UnsupportedEncodingException, RemotingException, InterruptedException &#123;<br>        <span class="hljs-comment">//实例化消息生产者Producer</span><br>        <span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;Group2&quot;</span>);<br>        <span class="hljs-comment">//设置NameServer的地址</span><br>        producer.setNamesrvAddr(<span class="hljs-string">&quot;192.168.1.95:9876;192.168.1.220:9876&quot;</span>);<br>        <span class="hljs-comment">//启动Producer实例</span><br>        producer.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-comment">//创建消息，并指定Topic，Tag和消息体</span><br>            <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;TopicTest&quot;</span>,<span class="hljs-string">&quot;TagA&quot;</span>,(<span class="hljs-string">&quot;message&quot;</span>+(i+<span class="hljs-number">1</span>)).getBytes());<br>            <span class="hljs-comment">//sendCallback接收异步返回结果的回调</span><br>            producer.send(message, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendCallback</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSuccess</span><span class="hljs-params">(SendResult sendResult)</span> &#123;<br>                    System.out.printf(<span class="hljs-string">&quot;%-10d OK %s %n&quot;</span>,index,sendResult.getMsgId());<br>                &#125;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onException</span><span class="hljs-params">(Throwable throwable)</span> &#123;<br>                    System.out.printf(<span class="hljs-string">&quot;%-10d Exception %s %n&quot;</span>,index,throwable);<br>                &#125;<br>            &#125;);<br><br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">//关闭生产者</span><br>        producer.shutdown();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>单向发送消息</strong></p><p>这种方式主要用在不特别关心发送结果的场景，例如日志发送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OneDirectProducer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MQClientException, RemotingException, InterruptedException &#123;<br>        <span class="hljs-comment">//实例化消息生产者Producer</span><br>        <span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;Group3&quot;</span>);<br>        <span class="hljs-comment">//设置NameServer的地址</span><br>        producer.setNamesrvAddr(<span class="hljs-string">&quot;192.168.1.95:9876;192.168.1.220:9876&quot;</span>);<br>        <span class="hljs-comment">//启动Producer实例</span><br>        producer.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-comment">//创建消息，并指定Topic，Tag和消息体</span><br>            <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;OneWayTest&quot;</span>,<span class="hljs-string">&quot;TagB&quot;</span>,(<span class="hljs-string">&quot;message&quot;</span>+(i+<span class="hljs-number">1</span>)).getBytes());<br>            <span class="hljs-comment">//sendCallback接收异步返回结果的回调</span><br>            producer.sendOneway(message);<br><br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">//关闭生产者</span><br>        producer.shutdown();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="消费消息"><a href="#消费消息" class="headerlink" title="消费消息"></a>消费消息</h4><p><strong>负载均衡模式</strong></p><p>消费者采用负载均衡方式消费消息，多个消费者共同消费队列消息，每个消费者处理的消息不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RibbonConsumer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MQClientException &#123;<br>        <span class="hljs-comment">//创建消费者，指定消费者组名</span><br>        <span class="hljs-type">DefaultMQPushConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQPushConsumer</span>(<span class="hljs-string">&quot;Group1&quot;</span>);<br>        <span class="hljs-comment">//指定NameServer地址</span><br>        consumer.setNamesrvAddr(<span class="hljs-string">&quot;192.168.1.70:9876;192.168.1.97:9876&quot;</span>);<br>        <span class="hljs-comment">//订阅主题Topic和Tag</span><br>        consumer.subscribe(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;Tag1 || TagA || TagB&quot;</span>);<br>        <span class="hljs-comment">//负载均衡模式消费</span><br>        consumer.setMessageModel(MessageModel.CLUSTERING);<br>        <span class="hljs-comment">//设置回调函数，处理消息</span><br>        consumer.registerMessageListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerConcurrently</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> ConsumeConcurrentlyStatus <span class="hljs-title function_">consumeMessage</span><span class="hljs-params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> &#123;<br>                list.stream().forEach(msg -&gt;&#123;<br>                    System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(msg.getBody()));<br>                &#125;);<br>                <span class="hljs-keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//启动消费者</span><br>        consumer.start();<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>广播模式</strong></p><p>消费者采用广播的方式消费消息，每个消费者消费的消息都是相同的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RibbonConsumer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MQClientException &#123;<br>        <span class="hljs-comment">//创建消费者，指定消费者组名</span><br>        <span class="hljs-type">DefaultMQPushConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQPushConsumer</span>(<span class="hljs-string">&quot;Group1&quot;</span>);<br>        <span class="hljs-comment">//指定NameServer地址</span><br>        consumer.setNamesrvAddr(<span class="hljs-string">&quot;192.168.1.70:9876;192.168.1.97:9876&quot;</span>);<br>        <span class="hljs-comment">//订阅主题Topic和Tag</span><br>        consumer.subscribe(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;Tag1 || TagA || TagB&quot;</span>);<br>        <span class="hljs-comment">//负载均衡模式消费</span><br>        consumer.setMessageModel(MessageModel.BROADCASTING);<br>        <span class="hljs-comment">//设置回调函数，处理消息</span><br>        consumer.registerMessageListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerConcurrently</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> ConsumeConcurrentlyStatus <span class="hljs-title function_">consumeMessage</span><span class="hljs-params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> &#123;<br>                list.stream().forEach(msg -&gt;&#123;<br>                    System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(msg.getBody()));<br>                &#125;);<br>                <span class="hljs-keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//启动消费者</span><br>        consumer.start();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="顺序消息"><a href="#顺序消息" class="headerlink" title="顺序消息"></a>顺序消息</h3><p>消息有序指的是可以按照消息的发送顺序来消费（FIFO）。RocketMQ可以严格的保证消息有序，可以分为分区有序或者全局有序。</p><p>顺序消费的原理解析，在默认的情况下消息发送回采用Round Robbin轮询方式把消息发送到不同的queue（分区队列）；而消费消息的时候从多个queue上拉取消息，这种情况发送和消费是不能保证顺序。但是如果控制发送的顺序消息只依次发送到同一个queue中，消费的时候只从这个queue上依次拉取，则就保证了顺序。当发送和消费参与的queue只有一个，则是全局有序；如果多个queue参与，则为分区有序，即相对每个queue，消息都是有序的。</p><p><strong>生产者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderProducer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MQClientException, RemotingException, InterruptedException, MQBrokerException &#123;<br>        <span class="hljs-comment">//创建消息生产者对象，并指定生产者组名</span><br>        <span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;Group1&quot;</span>);<br>        <span class="hljs-comment">//指定NameServer地址</span><br>        producer.setNamesrvAddr(<span class="hljs-string">&quot;192.168.1.70:9876;192.168.1.97:9876&quot;</span>);<br>        <span class="hljs-comment">//启动producer</span><br>        producer.start();<br><br>        List&lt;OrderStep&gt; orderStepList = OrderStep.buildOrder();<br><br>        <span class="hljs-comment">//发送消息</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; orderStepList.size(); i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> orderStepList.get(i)+<span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;OrderTopic&quot;</span>,<span class="hljs-string">&quot;OrderTag&quot;</span>,<span class="hljs-string">&quot;i：&quot;</span>+i,body.getBytes());<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 参数一：消息对象</span><br><span class="hljs-comment">             * 参数二：消息队列的选择器</span><br><span class="hljs-comment">             * 参数三：选择队列业务标识</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-type">SendResult</span> <span class="hljs-variable">sendResult</span> <span class="hljs-operator">=</span> producer.send(msg, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageQueueSelector</span>() &#123;<br>                <span class="hljs-comment">/**</span><br><span class="hljs-comment">                 * <span class="hljs-doctag">@param</span> list 队列集合</span><br><span class="hljs-comment">                 * <span class="hljs-doctag">@param</span> message 消息对象</span><br><span class="hljs-comment">                 * <span class="hljs-doctag">@param</span> o 业务标识参数</span><br><span class="hljs-comment">                 * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">                 */</span><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> MessageQueue <span class="hljs-title function_">select</span><span class="hljs-params">(List&lt;MessageQueue&gt; list, Message message, Object o)</span> &#123;<br>                    <span class="hljs-type">Long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> (Long) o;<br>                    <span class="hljs-type">long</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> orderId % list.size();<br>                    <span class="hljs-keyword">return</span> list.get((<span class="hljs-type">int</span>) index);<br>                &#125;<br>            &#125;, orderStepList.get(i).getOrderId());<br>            System.out.println(<span class="hljs-string">&quot;发送结果：&quot;</span>+sendResult);<br>        &#125;<br><br>        producer.shutdown();<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderConsumer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MQClientException &#123;<br>        <span class="hljs-comment">//创建消费者，指定消费者组名</span><br>        <span class="hljs-type">DefaultMQPushConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQPushConsumer</span>(<span class="hljs-string">&quot;Group1&quot;</span>);<br>        <span class="hljs-comment">//指定NameServer地址</span><br>        consumer.setNamesrvAddr(<span class="hljs-string">&quot;192.168.1.70:9876;192.168.1.97:9876&quot;</span>);<br>        <span class="hljs-comment">//订阅主题Topic和Tag</span><br>        consumer.subscribe(<span class="hljs-string">&quot;OrderTopic&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br><br>        <span class="hljs-comment">//注册消息监听器</span><br>        consumer.registerMessageListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerOrderly</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> ConsumeOrderlyStatus <span class="hljs-title function_">consumeMessage</span><span class="hljs-params">(List&lt;MessageExt&gt; list, ConsumeOrderlyContext consumeOrderlyContext)</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;线程名称：&quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot;-----&quot;</span>+<span class="hljs-string">&quot;消费消息：&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(list.get(i).getBody()));<br>                &#125;<br>                <span class="hljs-keyword">return</span> ConsumeOrderlyStatus.SUCCESS;<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">//启动消费者</span><br>        consumer.start();<br>        System.out.println(<span class="hljs-string">&quot;消费者启动&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="延时消息"><a href="#延时消息" class="headerlink" title="延时消息"></a>延时消息</h3><p><strong>生产者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelayProducer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MQClientException, RemotingException, InterruptedException, MQBrokerException &#123;<br>        <span class="hljs-comment">//创建消息生产者对象，并指定生产者组名</span><br>        <span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;Group1&quot;</span>);<br>        <span class="hljs-comment">//指定NameServer地址</span><br>        producer.setNamesrvAddr(<span class="hljs-string">&quot;192.168.1.70:9876;192.168.1.97:9876&quot;</span>);<br>        <span class="hljs-comment">//启动producer</span><br>        producer.start();<br>        <span class="hljs-comment">//创建消息对象，指定Topic、Tag和消息体</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 参数一：消息主题Topic</span><br><span class="hljs-comment">             * 参数二：消息Tag</span><br><span class="hljs-comment">             * 参数三：消息内容</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;DelayTopic&quot;</span>,<span class="hljs-string">&quot;DelayTag&quot;</span>,(<span class="hljs-string">&quot;message&quot;</span>+(i+<span class="hljs-number">1</span>)).getBytes());<br>            message.setDelayTimeLevel(<span class="hljs-number">2</span>);<br>            <span class="hljs-comment">//发送消息</span><br>            <span class="hljs-type">SendResult</span> <span class="hljs-variable">sendResult</span> <span class="hljs-operator">=</span> producer.send(message);<br>            System.out.println(<span class="hljs-string">&quot;发送结果：&quot;</span>+sendResult);<br>        &#125;<br>        <span class="hljs-comment">//关闭生产者producer</span><br>        producer.shutdown();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>使用限制</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// org/apache/rocketmq/store/config/MessageStoreConfig.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">messageDelayLevel</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h&quot;</span>;<br></code></pre></td></tr></table></figure><p>现在RocketMq并不支持任意时间的延时，需要设置几个固定的延时等级，从1s到2h分别对应着等级1到18</p><h3 id="批量消息"><a href="#批量消息" class="headerlink" title="批量消息"></a>批量消息</h3><p>批量发送消息能显著提高传递消息的性能。限制是这些批量消息应该有相同的topic，相同的waitStoreMsgOK，而且不能是延时消息。此外，这一批消息的总大小不应超过4MB</p><p><strong>发送批量消息</strong></p><p><strong>生产者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, RemotingException, MQClientException, MQBrokerException &#123;<br>    <span class="hljs-comment">//创建消息生产者对象，并指定生产者组名</span><br>    <span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;Group1&quot;</span>);<br>    <span class="hljs-comment">//指定NameServer地址</span><br>    producer.setNamesrvAddr(<span class="hljs-string">&quot;192.168.100.224:9876&quot;</span>);<br>    <span class="hljs-comment">//启动producer</span><br>    producer.start();<br>    List&lt;Message&gt; messageList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">//创建消息对象，指定Topic、Tag和消息体</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数一：消息主题Topic</span><br><span class="hljs-comment">         * 参数二：消息Tag</span><br><span class="hljs-comment">         * 参数三：消息内容</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;Tag1&quot;</span>,(<span class="hljs-string">&quot;message&quot;</span>+(i+<span class="hljs-number">1</span>)).getBytes());<br>        messageList.add(message);<br>    &#125;<br>    <span class="hljs-comment">//发送消息</span><br>    <span class="hljs-type">SendResult</span> <span class="hljs-variable">sendResult</span> <span class="hljs-operator">=</span> producer.send(messageList);<br>    System.out.println(<span class="hljs-string">&quot;消息发送结果：&quot;</span>+sendResult);<br>    <span class="hljs-comment">//关闭生产者producer</span><br>    producer.shutdown();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MQClientException &#123;<br>    <span class="hljs-comment">//创建消费者，指定消费者组名</span><br>    <span class="hljs-type">DefaultMQPushConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQPushConsumer</span>(<span class="hljs-string">&quot;Group1&quot;</span>);<br>    <span class="hljs-comment">//指定NameServer地址</span><br>    consumer.setNamesrvAddr(<span class="hljs-string">&quot;192.168.100.224:9876&quot;</span>);<br>    <span class="hljs-comment">//订阅主题Topic和Tag</span><br>    consumer.subscribe(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;Tag1&quot;</span>);<br>    <span class="hljs-comment">//设置回调函数，处理消息</span><br>    consumer.registerMessageListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerConcurrently</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> ConsumeConcurrentlyStatus <span class="hljs-title function_">consumeMessage</span><span class="hljs-params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> &#123;<br>            list.stream().forEach(msg -&gt;&#123;<br>                System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(msg.getBody()));<br>            &#125;);<br>            <span class="hljs-keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">//启动消费者</span><br>    consumer.start();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="过滤消息"><a href="#过滤消息" class="headerlink" title="过滤消息"></a>过滤消息</h3><p><strong>生产者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">![transaction](D:\dev\resource\document\mq\rocketm/img/rocketmq/transaction.jpg)    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, RemotingException, MQClientException, MQBrokerException &#123;<br>        <span class="hljs-comment">//创建消息生产者对象，并指定生产者组名</span><br>        <span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;Group1&quot;</span>);<br>        <span class="hljs-comment">//指定NameServer地址</span><br>        producer.setNamesrvAddr(<span class="hljs-string">&quot;192.168.100.224:9876&quot;</span>);<br>        <span class="hljs-comment">//启动producer</span><br>        producer.start();<br>        <span class="hljs-comment">//创建消息对象，指定Topic、Tag和消息体</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 参数一：消息主题Topic</span><br><span class="hljs-comment">             * 参数二：消息Tag</span><br><span class="hljs-comment">             * 参数三：消息内容</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;Tag1&quot;</span>,(<span class="hljs-string">&quot;message&quot;</span>+(i+<span class="hljs-number">1</span>)).getBytes());<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">10</span>);<br>            message.putUserProperty(<span class="hljs-string">&quot;a&quot;</span>,  a + <span class="hljs-string">&quot;&quot;</span>);<br>            <span class="hljs-comment">//发送消息</span><br>            <span class="hljs-type">SendResult</span> <span class="hljs-variable">sendResult</span> <span class="hljs-operator">=</span> producer.send(message);<br>            System.out.println(a);<br>            System.out.println(<span class="hljs-string">&quot;发送状态：&quot;</span>+sendResult.getSendStatus());<br>            System.out.println(<span class="hljs-string">&quot;发送消息id：&quot;</span>+sendResult.getMsgId());<br>            System.out.println(<span class="hljs-string">&quot;当前队列id：&quot;</span>+sendResult.getMessageQueue().getQueueId());<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">//关闭生产者producer</span><br>        producer.shutdown();<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MQClientException &#123;<br>    <span class="hljs-comment">//创建消费者，指定消费者组名</span><br>    <span class="hljs-type">DefaultMQPushConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQPushConsumer</span>(<span class="hljs-string">&quot;Group1&quot;</span>);<br>    <span class="hljs-comment">//指定NameServer地址</span><br>    consumer.setNamesrvAddr(<span class="hljs-string">&quot;192.168.100.224:9876&quot;</span>);<br>    <span class="hljs-comment">//订阅主题Topic和Tag</span><br>    consumer.subscribe(<span class="hljs-string">&quot;test&quot;</span>, MessageSelector.bySql(<span class="hljs-string">&quot;a &gt; 5&quot;</span>));<br>    <span class="hljs-comment">//负载均衡模式消费</span><br>    consumer.setMessageModel(MessageModel.CLUSTERING);<br>    <span class="hljs-comment">//设置回调函数，处理消息</span><br>    consumer.registerMessageListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerConcurrently</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> ConsumeConcurrentlyStatus <span class="hljs-title function_">consumeMessage</span><span class="hljs-params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> &#123;<br>            list.stream().forEach(msg -&gt; &#123;<br>                System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(msg.getBody()));<br>            &#125;);<br>            <span class="hljs-keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">//启动消费者</span><br>    consumer.start();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="事务消息"><a href="#事务消息" class="headerlink" title="事务消息"></a>事务消息</h3><p><img src="/img/rocketmq/transaction.jpg" alt="transaction"></p><p><strong>事务消息发送及提交</strong></p><p>发送消息（half消息）</p><p>服务端响应消息写入结果</p><p>根据发送结果执行本地事务（如果写入失败，此时half消息对业务不可见，本地逻辑不执行）</p><p>根据本地事务状态执行Commit或者Rollback（Commit操作生成消息索引，消息对消费者可见）</p><p><strong>事务补偿</strong></p><p>对没有Commit&#x2F;Rollback的事务消息（pending状态的消息），从服务端发起一次“回查”</p><p>Producer收到回查消息，检查回查消息对应本地事务的状态</p><p>根据本地事务状态，重新Commit或者Rollback</p><p>其中，补偿阶段用于解决消息Commit或者Rollback发生超时或者失败的情况</p><p><strong>事务消息状态</strong></p><ul><li>事务消息共有三种状态，提交状态、回滚状态、中间状态：</li><li>TransactionStatus.CommitTransaction：提交事务，它允许消费者消费此消息</li><li>TransactionStatus.RollbaackTransaction：回滚事务，它代表该消息将被删除，不允许被消费</li><li>TransactionStatus.Unknown：中间状态，他代表需要检查消息队列来确定状态</li></ul><p><strong>生产者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MQClientException, RemotingException, InterruptedException, MQBrokerException &#123;<br>    <span class="hljs-comment">//创建消息生产者对象，并指定生产者组名</span><br>    <span class="hljs-type">TransactionMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionMQProducer</span>(<span class="hljs-string">&quot;Group1&quot;</span>);<br>    <span class="hljs-comment">//指定NameServer地址</span><br>    producer.setNamesrvAddr(<span class="hljs-string">&quot;192.168.100.224:9876&quot;</span>);<br>    producer.setTransactionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionListener</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> LocalTransactionState <span class="hljs-title function_">executeLocalTransaction</span><span class="hljs-params">(Message message, Object o)</span> &#123;<br>            <span class="hljs-keyword">if</span> (message.getTags().equals(<span class="hljs-string">&quot;Tag1&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (message.getTags().equals(<span class="hljs-string">&quot;Tag2&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> LocalTransactionState.ROLLBACK_MESSAGE;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (message.getTags().equals(<span class="hljs-string">&quot;Tag3&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> LocalTransactionState.UNKNOW;<br>            &#125;<br>            <span class="hljs-keyword">return</span> LocalTransactionState.UNKNOW;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> LocalTransactionState <span class="hljs-title function_">checkLocalTransaction</span><span class="hljs-params">(MessageExt messageExt)</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;消息Tag：&quot;</span> + messageExt.getTags());<br>            <span class="hljs-keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">//启动producer</span><br>    producer.start();<br>    <span class="hljs-comment">//创建消息对象，指定Topic、Tag和消息体</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数一：消息主题Topic</span><br><span class="hljs-comment">         * 参数二：消息Tag</span><br><span class="hljs-comment">         * 参数三：消息内容</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;Tag3&quot;</span>, (<span class="hljs-string">&quot;message&quot;</span> + (i + <span class="hljs-number">1</span>)).getBytes());<br>        <span class="hljs-comment">//发送消息</span><br>        <span class="hljs-type">SendResult</span> <span class="hljs-variable">sendResult</span> <span class="hljs-operator">=</span> producer.sendMessageInTransaction(message, <span class="hljs-literal">null</span>);<br>        System.out.println(<span class="hljs-string">&quot;发送状态：&quot;</span> + sendResult.getSendStatus());<br>        System.out.println(<span class="hljs-string">&quot;发送消息id：&quot;</span> + sendResult.getMsgId());<br>        System.out.println(<span class="hljs-string">&quot;当前队列id：&quot;</span> + sendResult.getMessageQueue().getQueueId());<br>        TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MQClientException &#123;<br>    <span class="hljs-comment">//创建消费者，指定消费者组名</span><br>    <span class="hljs-type">DefaultMQPushConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQPushConsumer</span>(<span class="hljs-string">&quot;Group1&quot;</span>);<br>    <span class="hljs-comment">//指定NameServer地址</span><br>    consumer.setNamesrvAddr(<span class="hljs-string">&quot;192.168.100.224:9876&quot;</span>);<br>    <span class="hljs-comment">//订阅主题Topic和Tag</span><br>    consumer.subscribe(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br>    <span class="hljs-comment">//设置回调函数，处理消息</span><br>    consumer.registerMessageListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerConcurrently</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> ConsumeConcurrentlyStatus <span class="hljs-title function_">consumeMessage</span><span class="hljs-params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> &#123;<br>            list.stream().forEach(msg -&gt;&#123;<br>                System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(msg.getBody()));<br>            &#125;);<br>            <span class="hljs-keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">//启动消费者</span><br>    consumer.start();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文档</category>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka</title>
    <link href="/2024/07/31/Kafka/"/>
    <url>/2024/07/31/Kafka/</url>
    
    <content type="html"><![CDATA[<h1 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>​<strong>Kafka</strong>是一个<strong>分布式</strong>的基于<strong>发布&#x2F;订阅模式</strong>的<strong>消息队列</strong>（Message Queue），主要应用于大数据实时处理领域</p><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>异步处理、流量削峰、日志处理、消息通信</p><h4 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h4><p><strong>点对点模式</strong>（一对一，消费者主动拉取数据，消息收到后信息清除）</p><p>​消息生产者生产消息发送到Queue中，所以消息消费者从Queue中取出并且消费消息。消息被消费以后，queue中不再有存储，所以消息消费者不可能消费到已经被消费的消息。Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费</p><p><img src="/img/kafka/dianduidian.webp" alt="dianduidian"></p><p><strong>发布&#x2F;订阅模式</strong>（一对多，消费者消费数据之后不会清除消息）</p><p>​消息生产者（发布）将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息。和点对点方式不同，发布到topic的消息会被所有订阅者消费</p><p><img src="/img/kafka/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85.webp" alt="fabudingyue"></p><h3 id="Kafka基础架构"><a href="#Kafka基础架构" class="headerlink" title="Kafka基础架构"></a>Kafka基础架构</h3><p><img src="/img/kafka/jiagou.jpg" alt="jiagou"></p><p><strong>Producer：</strong>消息生产者，就是向<strong>kafka broker</strong>发送消息的客户端</p><p><strong>Consumer：</strong>消息消费者，向<strong>kafka broker</strong>取消息的客户端</p><p><strong>Consumer Group（CG）：</strong>消费者组，由多个consumer组成。消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费；消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者</p><p><strong>Broker：</strong>一台kafka服务器就是一个broker。一个集群由多个broker组成。一个broker可以容纳多个topic</p><p><strong>Topic：</strong>可以理解为一个队列，生产者和消费者面向的都是一个topic</p><p><strong>Replica：</strong>副本，为保证集群中的某个节点发生故障时，该节点上的partition数据不丢失，且kafka仍然能够继续工作，kafka提供了副本机制，一个topic的每个分区都有若干个副本，一个<strong>leader</strong>和若干个<strong>follower</strong></p><p><strong>leader：</strong>每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对象都是leader</p><p><strong>follower：</strong>每个分区多个副本中的“从”，实时从leader中同步数据，保持和leader数据的同步。leader发生故障时，某个follower会成为新的follower</p><p><strong>ps：</strong>在kafka中，每个主题可以有多个分区，每个分区又可以有多个副本。这多个副本中，只有一个是leader，而其他的都是follower副本。仅有leader副本可以对外提供服务</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h3><h4 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h4><table><thead><tr><th>hadoop01</th><th>hadoop02</th><th>hadoop03</th></tr></thead><tbody><tr><td>zk</td><td>zk</td><td>zk</td></tr><tr><td>kafka</td><td>kafka</td><td>kafka</td></tr></tbody></table><h4 id="jar包下载"><a href="#jar包下载" class="headerlink" title="jar包下载"></a>jar包下载</h4><p>下载地址：<a href="http://kafka.apache.org/downloads">http://kafka.apache.org/downloads</a></p><h4 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h4><p>将jar包放到相应文件目录下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>loca<span class="hljs-regexp">/src/</span>kafka<br></code></pre></td></tr></table></figure><p>解压文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxvf kafka_2.<span class="hljs-number">12</span>-<span class="hljs-number">2</span>.<span class="hljs-number">5</span>.<span class="hljs-number">0</span>.tgz<br></code></pre></td></tr></table></figure><p>修改文件名称</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mv</span> kafka_2.<span class="hljs-number">12</span>-<span class="hljs-number">2</span>.<span class="hljs-number">5</span>.<span class="hljs-number">0</span>.tgz my-kafka<br></code></pre></td></tr></table></figure><p>在&#x2F;usr&#x2F;loca&#x2F;src&#x2F;kafka&#x2F;my-kafka目录下创建data文件夹</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">mkdir</span> <span class="hljs-class"><span class="hljs-keyword">data</span></span><br></code></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/usr/</span>loca<span class="hljs-regexp">/src/</span>kafka<span class="hljs-regexp">/my-kafka/</span>config/server.properties<br></code></pre></td></tr></table></figure><p>输入内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># brker的全局唯一编号，不能重复，只能是整数</span><br><span class="hljs-attr">broker.id</span>=<span class="hljs-number">0</span><br><span class="hljs-comment"># 选择启用删除主题功能，默认false</span><br><span class="hljs-attr">delete.topic.enable</span>=<span class="hljs-literal">true</span><br><span class="hljs-comment">#处理网络请求的线程数</span><br><span class="hljs-attr">num.network.threads</span>=<span class="hljs-number">3</span><br><span class="hljs-comment">#用来处理磁盘IO的线程数量</span><br><span class="hljs-attr">num.io.threads</span>=<span class="hljs-number">8</span><br><span class="hljs-comment">#发送套接字的缓冲区大小</span><br><span class="hljs-attr">socket.send.buffer.bytes</span>=<span class="hljs-number">102400</span><br><span class="hljs-comment">#接收套接字的缓冲区大小</span><br><span class="hljs-attr">socket.receive.buffer.bytes</span>=<span class="hljs-number">102400</span><br><span class="hljs-comment">#kafka运行日志存放的路径</span><br><span class="hljs-attr">log.dirs</span>=/usr/loca/src/kafka/my-kafka/data<br><span class="hljs-comment">#topic在当前broker上的分区数</span><br><span class="hljs-attr">num.partitions</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">#用来恢复和清理data下数据的线程数量</span><br><span class="hljs-attr">num.recovery.threads.per.data.dir</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">#segment文件保留的最长时间，超时将被删除</span><br><span class="hljs-attr">log.retention.hours</span>=<span class="hljs-number">168</span><br><span class="hljs-comment">#配置连接zookeeper集群地址</span><br><span class="hljs-attr">zookeeper.connect</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2181</span><br><span class="hljs-attr">advertised.listeners</span>=PLAINTEXT://xxx:<span class="hljs-number">9092</span><br></code></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> /etc/<span class="hljs-keyword">profile</span><br></code></pre></td></tr></table></figure><p>输入内容</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#KAFKA_HOME</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">KAFKA_HOME</span>=/usr/local/src/kafka/my-kafka<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$KAFKA_HOME/bin<br></code></pre></td></tr></table></figure><p>zookeeper启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bin/zkServer.sh start<br></code></pre></td></tr></table></figure><p>kafka启动</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">bin/kafka-<span class="hljs-keyword">server</span>-<span class="hljs-keyword">start</span>.sh -daemon config/<span class="hljs-keyword">server</span>.properties<br></code></pre></td></tr></table></figure><h3 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h3><p>查看当前服务器中的topic</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">bin/kafka-topics<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--list</span> <span class="hljs-attr">--zookeeper</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2181</span><br></code></pre></td></tr></table></figure><p>创建topic</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">bin/kafka-topics<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--create</span> <span class="hljs-attr">--zookeeper</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2181</span> <span class="hljs-attr">--replication-factor</span> <span class="hljs-number">1</span> <span class="hljs-attr">--partitions</span> <span class="hljs-number">1</span> <span class="hljs-attr">--topic</span> test<br></code></pre></td></tr></table></figure><p>删除topic</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">bin/kafka-topics<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--delete</span> <span class="hljs-attr">--zookeeper</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2181</span> <span class="hljs-attr">--topic</span> test<br></code></pre></td></tr></table></figure><p>查看topic详情</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">bin/kafka-topics<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--describe</span> <span class="hljs-attr">--topic</span> test <span class="hljs-attr">--zookee</span><br>per <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2181</span><br></code></pre></td></tr></table></figure><p>生产者连接topic</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">bin/kafka-console-producer<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--topic</span> test <span class="hljs-attr">--broker-list</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9092</span><br></code></pre></td></tr></table></figure><p>消费者连接topic</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">bin/kafka-console-consumer<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--topic</span> test <span class="hljs-attr">--zookeeper</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9092</span> <span class="hljs-attr">--from-beginning</span><br><br>bin/kafka-console-consumer<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--topic</span> test <span class="hljs-attr">--bootstrap-server</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9092</span> <span class="hljs-attr">--from-beginning</span><br></code></pre></td></tr></table></figure><h2 id="架构深入"><a href="#架构深入" class="headerlink" title="架构深入"></a>架构深入</h2><h3 id="Kafka工作流程及文件存储机制"><a href="#Kafka工作流程及文件存储机制" class="headerlink" title="Kafka工作流程及文件存储机制"></a>Kafka工作流程及文件存储机制</h3><p>​Kafka中消息是以topic进行分类的，生产者生产消息，消费者消费消息，都是面向topic的</p><p>​topic是逻辑上的概念，而partition是物理上的概念，每个partition对应于一个log文件，该log文件中存储的就是producer生产的数据。Producer生产的数据会被不断追加到该log文件末端，每条数据都有自己的offset。消费者组中的每个消费者，都会实时记录自己消费到了哪个offset，以便出错恢复时，从上次的位置继续消费</p><p>​由于生产者生产的消息会不断追加到log文件末尾，为防止log文件过大导致数据定位效率低下，Kafka采用了分片和索引机制，将每个partition分为多个segment。每个segment对应两个文件——“index”文件和“log”文件。这些文件位于一个文件夹下，该文件夹的命名规则为：topic名称+分区序号</p><p>​index和log文件以当前segment的第一条消息的offset命名</p><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><h4 id="分区策略"><a href="#分区策略" class="headerlink" title="分区策略"></a><strong>分区策略</strong></h4><h5 id="分区原因"><a href="#分区原因" class="headerlink" title="分区原因"></a><strong>分区原因</strong></h5><p>​方便在集群中扩展，每个Partition可以通过调整以适应它所在的机器，而一个topic又可以有多个Partition组成，因此整个集群就可以适应任意大小的数据了</p><p>​可以提高并发，因为可以以Partition为单位读写</p><h5 id="分区原则"><a href="#分区原则" class="headerlink" title="分区原则"></a><strong>分区原则</strong></h5><p>​需要将producer发送的数据封装成一个ProducerRecord对象</p><p>​指明partition的情况下，直接将指明的值直接作为partition值</p><p>​没有指定partition值但有key的情况下，将key的hash值与topic的partition数进行取余得到partition值</p><p>​既没有partition值又没有key值的情况下，第一次调用时随机生成一个整数（后面每次调用在这个整数上自增），将这个值与topic可用的partition总数取余得到partition值，也就是常说的round-robin算法</p><h4 id="数据可靠性保证"><a href="#数据可靠性保证" class="headerlink" title="数据可靠性保证"></a>数据可靠性保证</h4><p>​为保证producer发送的数据，能可靠的发送到指定的topic，topic的每个partition收到producer发送的数据后，都需要向producer发送ack（acknowledgement确认收到），如果producer收到ack，就会进行下一轮的发送，否则重新发送数据</p><p><strong>副本数据同步策略</strong></p><p>​Kafka采用全部副本数据同步完成后才会发送ack的策略，当leader发生故障需要重新选举时，如果要容忍n个节点的故障，需要n+1个副本来保证数据一定存在，缺点在于网络延迟会比较高，但网络延迟对Kafka的影响比较小</p><p><strong>ISR</strong></p><p>​leader维护了一个动态的in-sync replica set（ISR），意为和leader保持同步的follower集合。当ISR中的follower完成数据的同步之后，leader就会给follower发送ack。如果follower长时间未向leader同步数据，则该follower将被踢出ISR，该时间阈值由replica.lag.time.max.ms参数设定。leader发生故障之后，就会从ISR中选举新的leader</p><p><strong>ack应答机制</strong></p><p>​对于某些不太重要的数据，对数据的可靠性要求不是很高，能够容忍数据的少量丢失，所以没必要等ISR中的follower全部接收成功</p><p>​所以Kafka为用户提供了三种可靠性级别，用户对可靠性和延迟的要求进行权衡，有几种配置：</p><p>​<strong>acks参数配置：</strong></p><p>​0：producer不等待broker的ack，这一操作提供了一个最低的延迟，broker一接收到还没有写入磁盘就已经返回，当broker故障时有可能丢失数据</p><p>​1：producer等待broker的ack，partition的leader落盘成功后返回ack，如果在follower同步成功之前leader故障，将会丢失数据</p><p>​-1：producer等待broker的ack，partition的leader和follower全部落盘成功后才返回ack，但是如果在follower同步完成之后，broker发送ack之前，leader发生故障，那么会造成数据重复</p><h4 id="故障处理"><a href="#故障处理" class="headerlink" title="故障处理"></a><strong>故障处理</strong></h4><p><strong>LEO：</strong>指的是每个副本的最大offset</p><p><strong>HW：</strong>指的是消费者能见到的最大的offset，ISR队列中最小的LEO</p><p><strong>follower故障：</strong>follower发生故障后会被临时踢出ISR，待该follower恢复后，follower会读取本地磁盘记录的上次的HW，并将log文件高于HW的部分截掉，从HW开始向leader进行同步。等该follower的LEO大于等于该Partition的HW，即follower追上leader之后，就可以重新加入ISR了</p><p><strong>leader故障：</strong>leader发生故障之后，会从ISR中选出一个新的leader之后，为保证多个副本之间的数据一致性，其余的follower会先将各自的log文件高于HW的部分截掉，然后从新的leader同步数据。但是这只能保证副本之间数据的一致性，并不能保证数据不丢失或者不重复</p><h4 id="Exactly-Once语义"><a href="#Exactly-Once语义" class="headerlink" title="Exactly Once语义"></a>Exactly Once语义</h4><p>​将服务的ACK级别设置为-1，可以保证Producer到Server之间不会丢失数据，即At Least Once语义。相对的，将服务器ACK级别设置为0，可以保证生产者每条消息只会被发送一次，即At Most Once语义</p><p>​At Least Once可以保证数据不丢失，但是不能保证数据不重复；相对的，At Most Once可以保证数据不重复，但是不能保证数据不丢失。但是，对于一些非常重要的信息，比如说交易数据，下游数据消费者要求数据既不重复也不丢失，即Exactly Once语义。在0.11版本之前的Kafka，对此是无能为力的，只能保证数据不丢失，再在下游消费者对数据做全局去重。对于多个下游应用情况，每个都需要单独做全局去重，这就对性能造成了很大影响</p><p>​0.11版本的Kafka，引入了一项重大特性：幂等性。所谓的幂等性就是指Producer不论向server发送多少次重复数据，Server端都只会持久化一条。幂等性结合At Least Once语义，就构成了Kafka的Exactly Once语义。即：At Least Once+幂等性&#x3D;Exactly Once</p><p>​要启用幂等性，只需要将Producer的参数中enable.idompotence设置为true即可。Kafaka的幂等性实现其实就是将原来下游需要做的去重放在了数据上游。开启幂等性的Producer在初始化的时候会被分配一个PID，发往同一个Partition的消息会附带Sequence Number。而Broker端会对&lt;PID,Partition,SeqNumber&gt;做缓存，当具有相同主键的消息提交时，Broker只会持久化一条</p><p>​但是PID重启就会变化，同时不同的Partition也具有不同主键，所以幂等性无法保证跨分区会话的Exactly Once</p><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><h4 id="消费方式"><a href="#消费方式" class="headerlink" title="消费方式"></a>消费方式</h4><p>​consumer采用pull（拉取）模式从broker中读取数据</p><p>​push（推）模式很难适应消费速率不同的消费者，因为消息发送速率是由broker决定的。它的目标是尽可能以最快速度传递消息，但是这样容易造成consumer来不及处理消息，典型的表现就是拒绝服务以及网络拥塞。而pull模式则可以根据consumer的消费能力以适当的速率消费消息</p><p>​pull模式不足之处是，如果Kafka没有数据，消费者可能会陷入循环中，一直返回空数据。针对这一点，kafka的消费者在消费数据时会传入一个时长参数timeout，如果当前没有数据可供消费，consumer会等待一段时间之后再返回，这段时长即为timeout</p><h4 id="分区策略-1"><a href="#分区策略-1" class="headerlink" title="分区策略"></a>分区策略</h4><p>​一个consumer group中有多个consumer，一个topic有多个partition，所以必然会涉及到partition的分配问题，即确定哪个partition由哪个consumer来消费</p><p>​Kafka有两个分配策略，一个是RoundRobin，一个是Range</p><h4 id="offset的维护"><a href="#offset的维护" class="headerlink" title="offset的维护"></a>offset的维护</h4><p>​由于consumer在消费过程中可能会出现断电宕机等故障，consumer恢复后，需要从故障前的位置继续消费，所以consumer需要实时记录自己消费到了哪个offset，以便故障恢复后继续消费</p><p>​Kafka0.9版本之前，consumer默认将offset保存在ZooKeeper中，从0.9版本开始，consumer默认将offset保存在Kafka一个内置的topic中，改topic为__consumer_offsets</p><p>​修改配置文件consumer.properties</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">exclude.internal.topics</span>=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>​读取offset</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">0.11</span>.<span class="hljs-number">0.0</span>之前版本<br>bin/kafka-console-consumer<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--topic</span> __consumer_offsets <span class="hljs-attr">--zookeeper</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2181</span> <span class="hljs-attr">--formatter</span> <span class="hljs-string">&quot;kafka.coordinator.GroupMetadataManager\$OffsetsMessageFormatter&quot;</span> <span class="hljs-attr">--consumer</span><span class="hljs-selector-class">.config</span> config/consumer<span class="hljs-selector-class">.prperties</span> <span class="hljs-attr">--from-beginning</span><br><br><span class="hljs-number">0.11</span>.<span class="hljs-number">0.0</span>之后版本（含）<br>bin/kafka-console-consumer<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--topic</span> __consumer_offsets <span class="hljs-attr">--zookeeper</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2181</span> <span class="hljs-attr">--formatter</span> <span class="hljs-string">&quot;kafka.coordinator.group.GroupMetadataManager\$OffsetsMessageFormatter&quot;</span> <span class="hljs-attr">--consumer</span><span class="hljs-selector-class">.config</span> config/consumer<span class="hljs-selector-class">.properties</span> <span class="hljs-attr">--from-beginning</span><br></code></pre></td></tr></table></figure><h4 id="消费者组"><a href="#消费者组" class="headerlink" title="消费者组"></a>消费者组</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">bin/kafka-console-consumer<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--zookeeper</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2181</span> <span class="hljs-attr">--topic</span> test <span class="hljs-attr">--consumer</span><span class="hljs-selector-class">.config</span> config/consumer.properties<br></code></pre></td></tr></table></figure><h3 id="Kafka高效读写数据"><a href="#Kafka高效读写数据" class="headerlink" title="Kafka高效读写数据"></a>Kafka高效读写数据</h3><h4 id="顺序写磁盘"><a href="#顺序写磁盘" class="headerlink" title="顺序写磁盘"></a>顺序写磁盘</h4><p>​Kafka的producer生产数据，要写入到log文件中，写的过程是一直追加到文件末端，为顺序写。官网有数据表明，同样的磁盘，顺序写能到600M&#x2F;s，而随机写只有100K&#x2F;s。这与磁盘的机械机构有关，顺序写之所以快，是因为其省去了大量磁头寻址的时间</p><h4 id="零复制技术"><a href="#零复制技术" class="headerlink" title="零复制技术"></a>零复制技术</h4><p><img src="/img/kafka/zero.webp" alt="zero"></p><h3 id="Zookeeper在Kafka中的作用"><a href="#Zookeeper在Kafka中的作用" class="headerlink" title="Zookeeper在Kafka中的作用"></a>Zookeeper在Kafka中的作用</h3><p>​Kafka集群中有一个broker会被选举为Controller，负责管理集群broker的上下线，所有topic的分区副本分配和leader选举等工作</p><p>​Controller的管理工作都是依赖于ZooKeeper的</p><p><img src="/img/kafka/leader.webp" alt="leader"></p><h3 id="Kafka事务"><a href="#Kafka事务" class="headerlink" title="Kafka事务"></a>Kafka事务</h3><p>​Kafka从0.11版本开始引入了事务支持。事务可以保证Kafka在Exactly Once的语义的基础上，生产和消费可以跨分区和回话，要么全部成功，要么全部失败</p><h4 id="Producer事务"><a href="#Producer事务" class="headerlink" title="Producer事务"></a>Producer事务</h4><p>​为了实现跨分区回话的事务，需要引入一个全局唯一的Transaction ID，并将Producer获得的PID和Transaction ID绑定。这样当Producer重启后就可以通过正在进行的Transaction ID获得原来的PID</p><p>​为了管理Transaction，Kafka引入了一个新的组件Transaction Coordiantor。Producer就是通过和Transaction  Coordinator交互获得Transaction ID对应的任务状态。Transaction Coordinator还负责将所有事务写入Kafka的一个内部Topic，这样即使整个服务重启，由于事务状态得到保存，进行中的事务状态可以得到恢复，从而继续进行</p><h4 id="Consumer事务"><a href="#Consumer事务" class="headerlink" title="Consumer事务"></a>Consumer事务</h4><p>​上述事务机制是从Producer方面考虑，对于Consumer而言，事务的保证就会相对较弱，尤其是无法保证Commit的信息被精确消费。这是由于Consumer可以通过offset访问任意信息，而且不同的Segment File生命周期不同，同一事务的消息可能会出现重启后被删除的情况</p><h2 id="Kafka-API"><a href="#Kafka-API" class="headerlink" title="Kafka API"></a>Kafka API</h2><h3 id="Producer-API"><a href="#Producer-API" class="headerlink" title="Producer API"></a>Producer API</h3><h4 id="消息发送流程"><a href="#消息发送流程" class="headerlink" title="消息发送流程"></a>消息发送流程</h4><p>​Kafka的Producer发送消息采用的是异步发送的方式。在消息发送的过程中，涉及到了两个线程——main线程和Sender线程，以及一个线程共享变量——RecordAccumulator。main线程将消息发送给RecordAccumulator，Sender线程不断从RecordAccumulator中拉取消息发送到Kafka broker</p><p><img src="/img/kafka/producer.jpg" alt="producer"></p><p><strong>相关参数：</strong></p><p><strong>batch.size：</strong>只有数据积累到bath.size之后，sender才会发送数据</p><p><strong>linger.ms：</strong>如果数据迟迟未达到batch.size，sender等待linger.time之后就会发送数据</p><h4 id="异步发送API"><a href="#异步发送API" class="headerlink" title="异步发送API"></a>异步发送API</h4><h5 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>&lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;<br>&lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">1.0</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h5 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h5><p><strong>KafkaProducer：</strong>需要创建一个生产者对象，用来发送数据</p><p><strong>ProducerConfig：</strong>获取所需的一系列配置参数</p><p><strong>ProducerRecord：</strong>每条数据都要封装成一个ProducerRecord对象</p><p>不带回调函数的API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyProducerNonCallBack</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建Kafka生产者的配置信息</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//指定连接的Kafka集群</span><br>        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="hljs-string">&quot;192.168.1.235:9092&quot;</span>);<br>        <span class="hljs-comment">//ACK应答级别</span><br>        properties.put(ProducerConfig.ACKS_CONFIG,<span class="hljs-string">&quot;all&quot;</span>);<br>        <span class="hljs-comment">//重试次数</span><br>        properties.put(ProducerConfig.RETRIES_CONFIG,<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//批次大小</span><br>        properties.put(ProducerConfig.BATCH_SIZE_CONFIG,<span class="hljs-number">16384</span>);<br>        <span class="hljs-comment">//等待时间</span><br>        properties.put(ProducerConfig.LINGER_MS_CONFIG,<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//ProducerAccumulator缓冲区大小</span><br>        properties.put(ProducerConfig.BUFFER_MEMORY_CONFIG,<span class="hljs-number">33554432</span>);<br>        <span class="hljs-comment">//键序列化</span><br>        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,<span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br>        <span class="hljs-comment">//值序列化</span><br>        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,<span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br><br>        <span class="hljs-comment">//创建Kafka生产者对象</span><br>        KafkaProducer&lt;String, String&gt; producer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaProducer</span>&lt;&gt;(properties);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-comment">//发送数据</span><br>            producer.send(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerRecord</span>&lt;String, String&gt;(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;message--&quot;</span>+i));<br>        &#125;<br><br>        <span class="hljs-comment">//关闭资源</span><br>        producer.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>带回调函数的API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyProducerCallBack</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建Kafka生产者的配置信息</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//指定连接的Kafka集群</span><br>        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="hljs-string">&quot;192.168.1.235:9092&quot;</span>);<br>        <span class="hljs-comment">//ACK应答级别</span><br>        properties.put(ProducerConfig.ACKS_CONFIG,<span class="hljs-string">&quot;all&quot;</span>);<br>        <span class="hljs-comment">//重试次数</span><br>        properties.put(ProducerConfig.RETRIES_CONFIG,<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//批次大小</span><br>        properties.put(ProducerConfig.BATCH_SIZE_CONFIG,<span class="hljs-number">16384</span>);<br>        <span class="hljs-comment">//等待时间</span><br>        properties.put(ProducerConfig.LINGER_MS_CONFIG,<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//ProducerAccumulator缓冲区大小</span><br>        properties.put(ProducerConfig.BUFFER_MEMORY_CONFIG,<span class="hljs-number">33554432</span>);<br>        <span class="hljs-comment">//键序列化</span><br>        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,<span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br>        <span class="hljs-comment">//值序列化</span><br>        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,<span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br><br>        <span class="hljs-comment">//创建Kafka生产者对象</span><br>        KafkaProducer&lt;String, String&gt; producer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaProducer</span>&lt;&gt;(properties);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-comment">//发送数据</span><br>            producer.send(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerRecord</span>&lt;String, String&gt;(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;scorpio&quot;</span>, <span class="hljs-string">&quot;message--&quot;</span>+i), (recordMetadata,e) -&gt; &#123;<br>                <span class="hljs-keyword">if</span>(e == <span class="hljs-literal">null</span>)&#123;<br>                    System.out.println(recordMetadata.partition()+<span class="hljs-string">&quot;-----&quot;</span>+recordMetadata.offset());<br>                &#125;<br>            &#125;);<br>        &#125;<br><br>        <span class="hljs-comment">//关闭资源</span><br>        producer.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="同步发送API"><a href="#同步发送API" class="headerlink" title="同步发送API"></a>同步发送API</h4><p>​同步发送的意思就是，一条消息发送之后，会阻塞当前线程，直至返回ack</p><p>​由于send方法返回的是一个Future对象，根据Future对象的特点，我们也可以实现同步发送的效果，只需在调用Future对象的get方法即可</p><h3 id="Consumer-API"><a href="#Consumer-API" class="headerlink" title="Consumer API"></a>Consumer API</h3><h4 id="自动提交offset"><a href="#自动提交offset" class="headerlink" title="自动提交offset"></a>自动提交offset</h4><h5 id="导入依赖-1"><a href="#导入依赖-1" class="headerlink" title="导入依赖"></a>导入依赖</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>&lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;<br>&lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">1.0</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h5 id="编写代码-1"><a href="#编写代码-1" class="headerlink" title="编写代码"></a>编写代码</h5><p><strong>KafkaConsumer：</strong>需要创建一个消费者对象，用来消费数据</p><p><strong>ConsumerConfig：</strong>获取所需的一系列配置参数</p><p><strong>ConsumerRecord：</strong>每条数据都要封装成一个ConsumerRecord对象</p><p>enable.auto.commit：是够开启自动提交offset功能</p><p>auto.commit.interval.ms：自动提交offset的时间间隔</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConsumerAutoCommit</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建消费者配置信息</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//配置连接集群</span><br>        properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="hljs-string">&quot;192.168.1.235:9092&quot;</span>);<br>        <span class="hljs-comment">//开启自动提交</span><br>        properties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//配置自动提交的延时</span><br>        properties.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG,<span class="hljs-string">&quot;1000&quot;</span>);<br>        <span class="hljs-comment">//键反序列化</span><br>        properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,<span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);<br>        <span class="hljs-comment">//值反序列化</span><br>        properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,<span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);<br>        <span class="hljs-comment">//消费者组</span><br>        properties.put(ConsumerConfig.GROUP_ID_CONFIG,<span class="hljs-string">&quot;scorpio&quot;</span>);<br><br>        <span class="hljs-comment">//创建消费者实例</span><br>        KafkaConsumer&lt;String, String&gt; consumer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaConsumer</span>&lt;String, String&gt;(properties);<br><br>        <span class="hljs-comment">//订阅主题</span><br>        consumer.subscribe(Arrays.asList(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;first&quot;</span>));<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-comment">//获取消息</span><br>            ConsumerRecords&lt;String, String&gt; poll = consumer.poll(<span class="hljs-number">100</span>);<br>            <span class="hljs-comment">//解析并打印poll</span><br>            <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String,String&gt; consumerRecord:poll) &#123;<br><br>                System.out.println(consumerRecord.key()+<span class="hljs-string">&quot;-----&quot;</span>+consumerRecord.value());<br><br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="手动提交offset"><a href="#手动提交offset" class="headerlink" title="手动提交offset"></a>手动提交offset</h4><p>​手动提交offset的方法有两种：分别是commitSync（同步提交）和commitAsync（异步提交）。两者的相同点是，都会将本次poll的一批数据最高的偏移量提交；不同点是，commitSync阻塞当前线程，一直到提交成功，并且会自动失败重试（由于不可控因素导致，也会出现提交失败）；而commitAsync则没有重试机制，故有可能提交失败</p><h5 id="同步提交offset"><a href="#同步提交offset" class="headerlink" title="同步提交offset"></a>同步提交offset</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConsumerManulCommit</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建消费者配置信息</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//配置连接集群</span><br>        properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="hljs-string">&quot;192.168.1.235:9092&quot;</span>);<br>        <span class="hljs-comment">//开启自动提交</span><br>        properties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,<span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">//键反序列化</span><br>        properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,<span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);<br>        <span class="hljs-comment">//值反序列化</span><br>        properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,<span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);<br>        <span class="hljs-comment">//消费者组</span><br>        properties.put(ConsumerConfig.GROUP_ID_CONFIG,<span class="hljs-string">&quot;scorpio&quot;</span>);<br><br>        <span class="hljs-comment">//创建消费者实例</span><br>        KafkaConsumer&lt;String, String&gt; consumer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaConsumer</span>&lt;String, String&gt;(properties);<br><br>        <span class="hljs-comment">//订阅主题</span><br>        consumer.subscribe(Arrays.asList(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;first&quot;</span>));<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-comment">//获取消息</span><br>            ConsumerRecords&lt;String, String&gt; poll = consumer.poll(<span class="hljs-number">100</span>);<br>            <span class="hljs-comment">//解析并打印poll</span><br>            <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String,String&gt; consumerRecord:poll) &#123;<br><br>                System.out.println(consumerRecord.key()+<span class="hljs-string">&quot;-----&quot;</span>+consumerRecord.value());<br><br>            &#125;<br>            consumer.commitSync();<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="异步提交offset"><a href="#异步提交offset" class="headerlink" title="异步提交offset"></a>异步提交offset</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConsumerManulCommit</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建消费者配置信息</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//配置连接集群</span><br>        properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="hljs-string">&quot;192.168.1.235:9092&quot;</span>);<br>        <span class="hljs-comment">//开启自动提交</span><br>        properties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,<span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">//键反序列化</span><br>        properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,<span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);<br>        <span class="hljs-comment">//值反序列化</span><br>        properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,<span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);<br>        <span class="hljs-comment">//消费者组</span><br>        properties.put(ConsumerConfig.GROUP_ID_CONFIG,<span class="hljs-string">&quot;scorpio&quot;</span>);<br><br>        <span class="hljs-comment">//创建消费者实例</span><br>        KafkaConsumer&lt;String, String&gt; consumer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaConsumer</span>&lt;String, String&gt;(properties);<br><br>        <span class="hljs-comment">//订阅主题</span><br>        consumer.subscribe(Arrays.asList(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;first&quot;</span>));<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-comment">//获取消息</span><br>            ConsumerRecords&lt;String, String&gt; poll = consumer.poll(<span class="hljs-number">100</span>);<br>            <span class="hljs-comment">//解析并打印poll</span><br>            <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String,String&gt; consumerRecord:poll) &#123;<br><br>                System.out.println(consumerRecord.key()+<span class="hljs-string">&quot;-----&quot;</span>+consumerRecord.value());<br><br>            &#125;<br>            consumer.commitAsync();<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义存储offset"><a href="#自定义存储offset" class="headerlink" title="自定义存储offset"></a>自定义存储offset</h4><p>​Kafka0.9版本之前，offset存储在zookeeper，0.9版本及之后，默认将offset存储在Kafka的一个内置的topic中。除此之外，Kafka还可以选择自定义存储offset</p><p>​offset的维护是相当繁琐的，因为需要考虑消费者的Rebalance</p><p>​当有新的消费者加入消费者组、已有的消费者推出消费者组或者所订阅的主题的分区发生变化，就会出发到分区的重新分配，重新分配的过程叫做Rebalance</p><p>​消费者发生Rebalance之后，每个消费者消费的分区就会发生变化。因此消费者要首先获取到自己被重新分配到的分区，并且定位到每个分区最近提交的offset位置继续消费</p><h5 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConsumer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;TopicPartition, Long&gt; currentOffset = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建配置信息</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//Kafka 集群</span><br>        props.put(<span class="hljs-string">&quot;bootstrap.servers&quot;</span>, <span class="hljs-string">&quot;hadoop102:9092&quot;</span>);<br>        <span class="hljs-comment">//消费者组，只要 group.id 相同，就属于同一个消费者组</span><br>        props.put(<span class="hljs-string">&quot;group.id&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-comment">//关闭自动提交 offset</span><br>        props.put(<span class="hljs-string">&quot;enable.auto.commit&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>);<br>        <span class="hljs-comment">//Key 和 Value 的反序列化类</span><br>        props.put(<span class="hljs-string">&quot;key.deserializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);<br>        props.put(<span class="hljs-string">&quot;value.deserializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);<br>        <span class="hljs-comment">//创建一个消费者</span><br>        KafkaConsumer&lt;String, String&gt; consumer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaConsumer</span>&lt;&gt;(props);<br>        <span class="hljs-comment">//消费者订阅主题</span><br>        consumer.subscribe(Arrays.asList(<span class="hljs-string">&quot;first&quot;</span>), <span class="hljs-keyword">new</span><br>                <span class="hljs-title class_">ConsumerRebalanceListener</span>() &#123;<br><br>                    <span class="hljs-comment">//该方法会在 Rebalance 之前调用</span><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span><br>                    <span class="hljs-title function_">onPartitionsRevoked</span><span class="hljs-params">(Collection&lt;TopicPartition&gt; partitions)</span> &#123;<br>                        commitOffset(currentOffset);<br>                    &#125;<br><br>                    <span class="hljs-comment">//该方法会在 Rebalance 之后调用</span><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span><br>                    <span class="hljs-title function_">onPartitionsAssigned</span><span class="hljs-params">(Collection&lt;TopicPartition&gt; partitions)</span> &#123;<br>                        currentOffset.clear();<br>                        <span class="hljs-keyword">for</span> (TopicPartition partition : partitions) &#123;<br>                            <span class="hljs-comment">//定位到最近提交的 offset 位置继续消费</span><br>                            consumer.seek(partition, getOffset(partition));<br>                        &#125;<br>                    &#125;<br>                &#125;);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="hljs-number">100</span>);<span class="hljs-comment">//消费者拉取数据</span><br>            <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;<br>                System.out.printf(<span class="hljs-string">&quot;offset = %d, key = %s, value = % s % n &quot;</span>, record.offset(), record.key(), record.value());<br>                currentOffset.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TopicPartition</span>(record.topic(),<br>                        record.partition()), record.offset());<br>            &#125;<br>            commitOffset(currentOffset);<span class="hljs-comment">//异步提交</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//获取某分区的最新 offset</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getOffset</span><span class="hljs-params">(TopicPartition partition)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//提交该消费者所有分区的 offset</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commitOffset</span><span class="hljs-params">(Map&lt;TopicPartition, Long&gt; currentOffset)</span> &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h3><h4 id="拦截器原理"><a href="#拦截器原理" class="headerlink" title="拦截器原理"></a>拦截器原理</h4><p>​Producer拦截器（interceptor）是在Kafka0.10版本被引入的，主要用于实现clients端的定制化控制逻辑</p><p>​对于producer而言，interceptor使得用户在消息发送钱以及producer回调逻辑钱有机会对消息做一些定制化需求，比兔修改消息等。同时，producer允许用户指定多个interceptor按序作用于同一条消息从而形成一个拦截链（interceptor chain）。Interceptor的实现接口是org.apache.kafka.clients.producer.ProducerInterceptor，其定义的方法包括：</p><p>​<strong>configure(configs)</strong></p><p>​获取配置信息和初始化数据时调用</p><p>​<strong>onSend(ProducerRecord)</strong></p><p>​该方法封装进KafkaProduecer.send方法中，即它运行在用户主线程中。Producer确保在消息被序列化以及计算分区前调用该方法。用户可以在该方法中对消息做任何操作，但最好保证不要修改消息所属的topic和分区，否则会影响目标分区的计算</p><p>​<strong>onAcknowledgement(RecordMetadata,Exception)</strong></p><p>​该方法会在消息从RecordAccumulator成功发送到Kafka Broker之后，或者在发送过程中失败时调用。而且通常都是在producer回调逻辑触发之前。onAckonwledgement运行在producer的IO线程中，因此不要再该方法中放入很重的逻辑，否则会拖慢producer的消息发送速率</p><p>​<strong>close()</strong></p><p>​关闭interceptor，主要用于执行一些资源清理的工作</p><p>​interceptor可能被运行在多个线程中，因此在具体实现时用户需要自行确保线程安全。另外倘若指定了多个interceptor，则producer将按照指定顺序调用它们，并仅仅是捕获每个interceptor可能抛出的异常记录到错误日志中而非在向上传递</p><h2 id="Kafka监控"><a href="#Kafka监控" class="headerlink" title="Kafka监控"></a>Kafka监控</h2><h3 id="Kafka-Eagle"><a href="#Kafka-Eagle" class="headerlink" title="Kafka Eagle"></a>Kafka Eagle</h3><h4 id="修改Kafka启动命令"><a href="#修改Kafka启动命令" class="headerlink" title="修改Kafka启动命令"></a>修改Kafka启动命令</h4><p>修改kafka-server-start.sh命令中</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">if</span> [<span class="hljs-string">&quot;x<span class="hljs-variable">$KAFKA_HEAP_OPTS</span>&quot;</span> = <span class="hljs-string">&quot;x&quot;</span>]; then<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">KAFKA_HEAP_OPTS</span>=<span class="hljs-string">&quot;-Xmx1G -Xms1G&quot;</span><br>fi<br></code></pre></td></tr></table></figure><p>为</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">if</span> [<span class="hljs-string">&quot;x<span class="hljs-variable">$KAFKA_HEAP_OPTS</span>&quot;</span> = <span class="hljs-string">&quot;x&quot;</span>]; then <br><span class="hljs-built_in">export</span> <span class="hljs-attribute">KAFKA_HEAP_OPTS</span>=<span class="hljs-string">&quot;-sever -Xms2G -Xmx2G -XX:PermSize=128m -XX:+UseG1GC --XX:MaxGCPauseMillis=200 -XX:parallelGCThreads=70&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">JMX_PORT</span>=<span class="hljs-string">&quot;9999&quot;</span><br>fi<br></code></pre></td></tr></table></figure><p>注意：修改之后启动Kafka之前要奋发至其它节点</p><p>上传压缩包kafka-eagle-bin-1.3.7.tar.gz到&#x2F;usr&#x2F;local&#x2F;src&#x2F;目录</p><h4 id="解压到本地"><a href="#解压到本地" class="headerlink" title="解压到本地"></a>解压到本地</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxvf kafka-eagle-bin-<span class="hljs-number">1</span>.<span class="hljs-number">3</span>.<span class="hljs-number">7</span>.tar.gz<br></code></pre></td></tr></table></figure><p>进入解压目录</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> kafka-eagle-bin-<span class="hljs-number">1</span>.<span class="hljs-number">3</span>.<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><h4 id="将kafka-eagle-web-1-3-7-bin-tar-gz解压到-usr-local-src-目录"><a href="#将kafka-eagle-web-1-3-7-bin-tar-gz解压到-usr-local-src-目录" class="headerlink" title="将kafka-eagle-web-1.3.7-bin.tar.gz解压到&#x2F;usr&#x2F;local&#x2F;src&#x2F;目录"></a>将kafka-eagle-web-1.3.7-bin.tar.gz解压到&#x2F;usr&#x2F;local&#x2F;src&#x2F;目录</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxvf kafka-eagle-web-<span class="hljs-number">1</span>.<span class="hljs-number">3</span>.<span class="hljs-number">7</span>-bin.tar.gz -C /usr/local/src/<br></code></pre></td></tr></table></figure><h4 id="修改名称"><a href="#修改名称" class="headerlink" title="修改名称"></a>修改名称</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mv</span> kafka-eagle-web-<span class="hljs-number">1</span>.<span class="hljs-number">3</span>.<span class="hljs-number">7</span> eagle <br></code></pre></td></tr></table></figure><h4 id="添加执行权限"><a href="#添加执行权限" class="headerlink" title="添加执行权限"></a>添加执行权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> eagle/bin<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> <span class="hljs-number">777</span> ke.sh<br></code></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs clean">######################################<br># multi zookeeper&amp;kafka cluster list<br>######################################<br>kafka.eagle.zk.cluster.alias=cluster1<br>cluster1.zk.list=<span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.235</span>:<span class="hljs-number">2181</span><br>######################################<br># kafka offset storage<br>######################################<br>cluster1.kafka.eagle.offset.storage=kafka<br>######################################<br># enable kafka metrics<br>######################################<br>kafka.eagle.metrics.charts=true<br>kafka.eagle.sql.fix.error=false<br>######################################<br># kafka jdbc driver address<br>######################################<br>kafka.eagle.driver=com.mysql.jdbc.Driver<br>kafka.eagle.url=jdbc:mysql:<span class="hljs-comment">//192.168.1.166:3306/ke?useUnicode=true&amp;ch</span><br>aracterEncoding=UTF<span class="hljs-number">-8</span>&amp;zeroDateTimeBehavior=convertToNull<br>kafka.eagle.username=root<br>kafka.eagle.password=<span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><h4 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">KE_HOME</span>=/usr/local/src/eagle<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$KE_HOME/bin<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bin/ke.sh start<br></code></pre></td></tr></table></figure><p>注意：启动之前需要先启动 ZK 以及 KAFKA  </p><p><a href="http://192.168.1.235:8048/ke-">http://192.168.1.235:8048/ke-</a></p>]]></content>
    
    
    <categories>
      
      <category>技术文档</category>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ</title>
    <link href="/2024/07/31/RabbitMQ/"/>
    <url>/2024/07/31/RabbitMQ/</url>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h2><h3 id="Simple"><a href="#Simple" class="headerlink" title="Simple"></a>Simple</h3><p><strong>简单队列</strong></p><p><img src="/img/rabbit/python-one.webp" alt="simple"></p><p>消息生产者将消息放入队列</p><p>消息的消费者(consumer) 监听(while) 消息队列,如果队列中有消息,就消费掉,消息被拿走后,自动从队列中删除</p><p>隐患：消息可能没有被消费者正确处理,已经从队列中消失了,造成消息的丢失</p><p>应用场景:聊天(中间有一个过度的服务器;p端,c端)</p><h3 id="Work-queues"><a href="#Work-queues" class="headerlink" title="Work queues"></a>Work queues</h3><p><strong>工作模式</strong></p><p><img src="/img/rabbit/python-two.webp" alt="work"></p><p>消息产生者将消息放入队列消费者可以有多个</p><p>C1,C2,同时监听同一个队列,消息被消费者C1 C2共同争抢当前的消息队列内容,谁先拿到谁负责消费消息</p><p>隐患：高并发情况下,默认会产生某一个消息被多个消费者共同使用,可以设置一个开关(syncronize,与同步锁的性能不一样) 保证一条消息只能被一个消费者使用</p><p>应用场景:红包;大项目中的资源调度(任务分配系统不需知道哪一个任务执行系统在空闲,直接将任务扔到消息队列中,空闲的系统自动争抢)</p><h3 id="Publish-Subscribe"><a href="#Publish-Subscribe" class="headerlink" title="Publish&#x2F;Subscribe"></a>Publish&#x2F;Subscribe</h3><p><strong>发布订阅(共享资源)</strong></p><p><img src="/img/rabbit/exchanges.webp" alt="publish/subscribe"></p><p>X代表交换机rabbitMQ内部组件,erlang 消息产生者是代码完成,代码的执行效率不高,消息产生者将消息放入交换机,交换机发布订阅把消息发送到所有消息队列中,对应消息队列的消费者拿到消息进行消费</p><p>相关场景:邮件群发,群聊天,广播(广告)</p><h3 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h3><p><strong>路由模式</strong></p><p><img src="/img/rabbit/direct-exchange.webp" alt="routing"></p><p>消息生产者将消息发送给交换机按照路由判断,路由是字符串(info) 当前产生的消息携带路由字符(对象的方法),交换机根据路由的key,只能匹配上路由key对应的消息队列,对应的消费者才能消费消息</p><p>根据业务功能定义路由字符串</p><p>从系统的代码逻辑中获取对应的功能字符串,将消息任务扔到对应的队列中业务场景:error 通知;EXCEPTION;错误通知的功能;传统意义的错误通知;客户通知;利用key路由,可以将程序中的错误封装成消息传入到消息队列中,开发者可以自定义消费者,实时接收错误</p><h3 id="Topics"><a href="#Topics" class="headerlink" title="Topics"></a>Topics</h3><p><strong>主题模式</strong></p><p><img src="/img/rabbit/python-five.webp" alt="topics"></p><p>*#代表通配符</p><p>*代表多个单词,#代表一个单词</p><p>路由功能添加模糊匹配</p><p>消息产生者产生消息,把消息交给交换机</p><p>交换机根据key的规则模糊匹配到对应的队列,由队列的监听消费者接收消息消费</p><h2 id="消息确认机制"><a href="#消息确认机制" class="headerlink" title="消息确认机制"></a>消息确认机制</h2><h3 id="生产者-Producer-的Confirm模式"><a href="#生产者-Producer-的Confirm模式" class="headerlink" title="生产者(Producer)的Confirm模式"></a>生产者(Producer)的Confirm模式</h3><p>通过生产者的确认模式我们是要保证消息准确达到Broker端，而与AMQP事务不同的是Confirm是针对一条消息的，而事务是可以针对多条消息的</p><p><img src="/img/rabbit/confirm.png" alt="confirm"></p><p>为了使用Confirm模式，client会发送confirm.select方法帧。通过是否设置了no-wait属性，来决定Broker端是否会以confirm.select-ok来进行应答。一旦在channel上使用confirm.select方法，channel就将处于Confirm模式。处于 transactional模式的channel不能再被设置成Confirm模式，反之亦然。</p><p>在生产者将信道设置成Confirm模式，一旦信道进入Confirm模式，所有在该信道上面发布的消息都会被指派一个唯一的ID(以confirm.select为基础从1开始计数)，一旦消息被投递到所有匹配的队列之后，Broker就会发送一个确认给生产者（包含消息的唯一ID）,这就使得生产者知道消息已经正确到达目的队列了，如果消息和队列是可持久化的，那么确认消息会将消息写入磁盘之后发出，Broker回传给生产者的确认消息中deliver-tag域包含了确认消息的序列号，此外Broker也可以设置basic.ack的multiple域，表示到这个序列号之前的所有消息都已经得到了处理。</p><p>Confirm模式最大的好处在于它是异步的，一旦发布一条消息，生产者应用程序就可以在等信道返回确认的同时继续发送下一条消息，当消息最终得到确认之后，生产者应用便可以通过回调方法来处理该确认消息，如果RabbitMQ因为自身内部错误导致消息丢失，就会发送一条basic.nack来代替basic.ack的消息，在这个情形下，basic.nack中各域值的含义与basic.ack中相应各域含义是相同的，同时requeue域的值应该被忽略。通过nack一条或多条消息， Broker表明自身无法对相应消息完成处理，并拒绝为这些消息的处理负责。在这种情况下，client可以选择将消息re-publish。</p><p>在channel 被设置成Confirm模式之后，所有被publish的后续消息都将被Confirm（即 ack）或者被nack一次。但是没有对消息被Confirm的快慢做任何保证，并且同一条消息不会既被Confirm又被nack。</p><h3 id="消费者-Consumer-的Confirm模式"><a href="#消费者-Consumer-的Confirm模式" class="headerlink" title="消费者(Consumer)的Confirm模式"></a>消费者(Consumer)的Confirm模式</h3><p>为了保证消息从队列可靠地到达消费者，RabbitMQ提供消息确认机制(message acknowledgment)。消费者在声明队列时，可以指定noAck参数，当noAck&#x3D;false时，RabbitMQ会等待消费者显式发回ack信号后才从内存(和磁盘，如果是持久化消息的话)中移去消息。否则，RabbitMQ会在队列中消息被消费后立即删除它。</p><p>采用消息确认机制后，只要令noAck&#x3D;false，消费者就有足够的时间处理消息(任务)，不用担心处理消息过程中消费者进程挂掉后消息丢失的问题，因为RabbitMQ会一直持有消息直到消费者显式调用basicAck为止。</p><p>在Consumer中Confirm模式中分为手动确认和自动确认。</p><p>手动确认主要并使用以下方法：</p><p>basic.ack: 用于肯定确认，multiple参数用于多个消息确认。<br>basic.recover：是路由不成功的消息可以使用recovery重新发送到队列中。<br>basic.reject：是接收端告诉服务器这个消息我拒绝接收,不处理,可以设置是否放回到队列中还是丢掉，而且只能一次拒绝一个消息,官网中有明确说明不能批量拒绝消息，为解决批量拒绝消息才有了basicNack。<br>basic.nack：可以一次拒绝N条消息，客户端可以设置basicNack方法的multiple参数为true，服务器会拒绝指定了delivery_tag的所有未确认的消息(tag是一个64位的long值，最大值是9223372036854775807)。</p><p>肯定的确认只是指导RabbitMQ将一个消息记录为已投递。basic.reject的否定确认具有相同的效果。 两者的差别在于：肯定的确认假设一个消息已经成功处理，而对立面则表示投递没有被处理，但仍然应该被删除。</p><p>同样的Consumer中的Confirm模式也具有同时确认多个投递，通过将确认方法的 multiple 字段设置为true完成的，实现的意义与Producer的一致。</p><p>在自动确认模式下，消息在发送后立即被认为是发送成功。 这种模式可以提高吞吐量（只要消费者能够跟上），不过会降低投递和消费者处理的安全性。 这种模式通常被称为“发后即忘”。 与手动确认模式不同，如果消费者的TCP连接或信道在成功投递之前关闭，该消息则会丢失。</p><p>使用自动确认模式时需要考虑的另一件事是消费者过载。 手动确认模式通常与有限的信道预取一起使用，限制信道上未完成（“进行中”）传送的数量。 然而，对于自动确认，根据定义没有这样的限制。 因此，消费者可能会被交付速度所压倒，可能积压在内存中，堆积如山，或者被操作系统终止。 某些客户端库将应用TCP反压（直到未处理的交付积压下降超过一定的限制时才停止从套接字读取）。 因此，只建议当消费者可以有效且稳定地处理投递时才使用自动投递方式。</p>]]></content>
    
    
    <categories>
      
      <category>技术文档</category>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java8新特性</title>
    <link href="/2024/07/31/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <url>/2024/07/31/Java8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="Java8新特性"><a href="#Java8新特性" class="headerlink" title="Java8新特性"></a>Java8新特性</h1><h2 id="Java8新特性简介"><a href="#Java8新特性简介" class="headerlink" title="Java8新特性简介"></a>Java8新特性简介</h2><p>速度更快</p><p>代码更少（增加了新的语法Lambda表达式）</p><p>强大的Stream API </p><p>便于并行</p><p>最大化减少空指针异常Optional</p><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><p>Java8中引入了一个新的操作符“-&gt;”该操作符或Lambda操作符</p><p>箭头操作符将Lambda表达式拆分成两部分：</p><p>左侧：Lambda表达式的参数列表</p><p>右侧：Lambda表达式中所需要执行的功能，即Lambda体</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><p>无参数，无返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>    &#125;<br>&#125;;<br>r.run();<br>System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br><span class="hljs-type">Runnable</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> () -&gt; System.out.println(<span class="hljs-string">&quot;Hello Lambda!&quot;</span>);<br>r1.run();<br></code></pre></td></tr></table></figure><p>有一个参数，并且无返回值（若只有一个参数，小括号可以不写）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Consumer&lt;String&gt; con = (x) -&gt; System.out.println(x);<br>con.accept(<span class="hljs-string">&quot;Lambda&quot;</span>);<br></code></pre></td></tr></table></figure><p>有多个参数，有返回值，并且Lambda体中有多条语句（Lambda体中只有一条语句，return和大括号都可以省略不写）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Comparator&lt;Integer&gt; com = (x,y) -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;函数式接口&quot;</span>);<br>    <span class="hljs-keyword">return</span> Integer.compare(x,y);<br>&#125;;<br>System.out.println(com.compare(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><p>Lambda表达式的参数列表的数据类型可以省略不写，因为JVM编译器通过上下文推断数据类型，即“类型判断”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Comparator&lt;Integer&gt; com = (x,y) -&gt; Integer.compare(x,y);<br>System.out.println(com.compare(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><p>左右遇一括号省，左侧推断类型省</p><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>接口中只有一个抽象方法的接口，称为函数式接口，可使用注解@FunctionalInterface修饰可以检查是否是函数式接口。</p><p>Lambda表达式需要函数式接口的支持。</p><h3 id="四大内置核心函数式接口"><a href="#四大内置核心函数式接口" class="headerlink" title="四大内置核心函数式接口"></a>四大内置核心函数式接口</h3><p>Consumer<T>：消费型接口void accept(T t);</p><p>Supplier<T>：供给型接口T get();</p><p>Function&lt;T,R&gt;：函数型接口R apply(T t);</p><p>Predicate<T>：断言型接口boolean test(T t);</p><h2 id="方法引用与构造器引用"><a href="#方法引用与构造器引用" class="headerlink" title="方法引用与构造器引用"></a>方法引用与构造器引用</h2><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p>Lambda体中的内容有方法已经实现了，我们可以使用“方法引用”（可以理解为方法引用是Lambda表达式的另外一种表现形式）</p><h4 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h4><p>对象::实例方法名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">(x)-&gt;System.out.println(x);<br>System.out::println;<br></code></pre></td></tr></table></figure><p>类::静态方法名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">BinaryOperator&lt;Double&gt; bo=(x,y)-&gt;Math.pow(x,y)<br>BinaryOperator&lt;Double&gt; bo=Math::pow;<br></code></pre></td></tr></table></figure><p>类::实例方法名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">compare((x,y)-&gt;x.equals(y),“abcdef”,“abcdef”);<br>compare(String::equals,“abcdef”,“abcdef”);<br></code></pre></td></tr></table></figure><h3 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h3><h4 id="语法格式-2"><a href="#语法格式-2" class="headerlink" title="语法格式"></a>语法格式</h4><p>ClassName::new</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Function&lt;Integer,MyClass&gt; fun=(n)-&gt;<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>(n);<br>Function&lt;Integer,MyClass&gt; fun=MyClass::<span class="hljs-keyword">new</span>;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong>需要调用的构造器的参数列表要与函数式接口中抽象方法的参数列表保持一致</p><p>type[]::new</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Function&lt;Integer,Integer[]&gt; fun=(n)-&gt;<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[n];<br>Function&lt;Integer,Integer[]&gt; fun=Integer[]::<span class="hljs-keyword">new</span>;<br></code></pre></td></tr></table></figure><h2 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Java8中有两个最为重要的改变。第一个是Lambda表达式；另外一个则是Stream API(java.util.stream.*)。</p><p>Stream是Java8中处理集合的关键抽象概念，他可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API对集合数据进行操作，就类似于使用SQL执行的数据库查询。也可以使用Stream API来并行执行操作。简而言之，Stream API提供了一种高效且易于使用的处理数据的方式。</p><p>流(Stream)是数据渠道，用于操作数据源(集合、数组等)所生成的元素序列。</p><p>”集合讲的是数据，流讲的是计算“</p><p><strong>注意：</strong></p><p>1、Stream不会存储元素</p><p>2、Stream不会改变源对象，会返回一个持有结果的新Stream</p><p>3、Stream操作是延迟执行的，这意味着在需要结果的时候才会执行</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><h4 id="创建Stream"><a href="#创建Stream" class="headerlink" title="创建Stream"></a><strong>创建Stream</strong></h4><p>一个数据源(如：集合、数组)，获取一个流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过Collection系列集合提供的stream()或parallelStream()</span><br>List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Stream&lt;String&gt; collectionStream = list.stream();<br><br><span class="hljs-comment">//通过Arrays中的静态方法stream()获取数组流</span><br>Student[] students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[<span class="hljs-number">10</span>];<br>Stream&lt;Student&gt; arraysStream = Arrays.stream(students);<br><br><span class="hljs-comment">//通过Stream类中的静态方法of()</span><br>Stream&lt;String&gt; stream = Stream.of(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;bb&quot;</span>, <span class="hljs-string">&quot;cc&quot;</span>);<br><br><span class="hljs-comment">//创建无限流</span><br><span class="hljs-comment">//迭代</span><br>Stream&lt;Integer&gt; iterateStream = Stream.iterate(<span class="hljs-number">0</span>, (x) -&gt; x + <span class="hljs-number">2</span>);<br>iterateStream.limit(<span class="hljs-number">10</span>).forEach(System.out::println);<br><br><span class="hljs-comment">//生成</span><br>Stream.generate(() -&gt; Math.random())<br>        .limit(<span class="hljs-number">5</span>)<br>        .forEach(System.out::println);<br></code></pre></td></tr></table></figure><h4 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a><strong>中间操作</strong></h4><p>一个中间操作链，对数据源的数据进行处理</p><p>多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何处理，而在终止操作时一次性处理全部，称为“惰性求值”</p><h5 id="筛选与切片"><a href="#筛选与切片" class="headerlink" title="筛选与切片"></a><strong>筛选与切片</strong></h5><p><strong>filter</strong>——接收Lambda，从流中排除某些元素</p><p>**limit(n)**——截断流，使其元素不超过给定数量</p><p>**skip(n)**——跳过元素，返回一个扔掉了前n个元素的流。若流中元素不足n个，则返回一个空流。与limit(n)互补</p><p><strong>distinct</strong>——筛选，通过流所生成元素的hashCode()和equals()去除重复元素</p><h5 id="映射"><a href="#映射" class="headerlink" title="映射"></a><strong>映射</strong></h5><p><strong>map</strong>——接收Lambda，将元素转换成其它形式或提取信息。接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</p><p><strong>flatMap</strong>——接收一个函数作为参数，将流中的每个值都转换成另一个流，然后把所有流连接成一个流</p><h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><p>**sorted()**——自然排序</p><p>**sorted(Comparator com)**——定制排序</p><h4 id="终止操作-终端操作"><a href="#终止操作-终端操作" class="headerlink" title="终止操作(终端操作)"></a><strong>终止操作(终端操作)</strong></h4><p>一个终止操作，执行中间操作链，并产生结果，即“惰性求值”</p><h5 id="查找与匹配"><a href="#查找与匹配" class="headerlink" title="查找与匹配"></a>查找与匹配</h5><p><strong>allMatch</strong>——检查是否匹配所有元素</p><p><strong>anyMatch</strong>——检查是否至少匹配一个元素</p><p><strong>noneMatch</strong>——检查是否没有匹配所有元素</p><p><strong>findFirst</strong>——返回第一个元素</p><p><strong>findAny</strong>——返回当前流中的任意元素</p><p><strong>count</strong>——返回流中元素的总个数</p><p><strong>max</strong>——返回流中最大值</p><p><strong>min</strong>——返回流中最小值</p><h5 id="归约"><a href="#归约" class="headerlink" title="归约"></a>归约</h5><p>**reduce(T identity,BinaryOperator)&#x2F;reduce(BinaryOperator)**——可以将流中元素反复结合起来，得到一个值</p><p><strong>collect</strong>——将流转换为其它形式。接收一个Collection接口的实现，用于给Stream中元素做汇总的方法</p><h3 id="并行流和顺序流"><a href="#并行流和顺序流" class="headerlink" title="并行流和顺序流"></a>并行流和顺序流</h3><h4 id="Fork-Join框架"><a href="#Fork-Join框架" class="headerlink" title="Fork&#x2F;Join框架"></a>Fork&#x2F;Join框架</h4><p>在必要的条件下，将一个大任务，进行拆分(fork)成若干个小任务(拆到不可再拆时)，再将一个个的小任务运算的结果进行join汇总</p><p><img src="/img/java8/forkjoin.jpg" alt="fork/join"></p><p><strong>Fork&#x2F;Join框架与传统线程池的区别</strong></p><p>采用“工作窃取”模式(work-stealing)：</p><p>当执行新的任务时，它可以将其拆分成更小的任务执行，并将小任务加到线程队列中，然后再从一个随机线程的队列中偷一个并把它放在自己的队列中。</p><p>相对于一般线程池实现，fork&#x2F;join框架的优势体现在对其中包含的任务的处理方式上。在一般的线程池中，如果一个线程正在执行的任务有鱼某些原因无法继续运行，那么该线程会处于等待状态，而fork&#x2F;join框架实现中，如果某个子问题由于等待另外一个子问题的完成而无法继续运行，那么处理该子问题的线程会主动寻找其它尚未运行的子问题来执行。这种方式减少了线程的等待时间，提高了性能。</p><h2 id="接口中的默认方法与静态方法"><a href="#接口中的默认方法与静态方法" class="headerlink" title="接口中的默认方法与静态方法"></a>接口中的默认方法与静态方法</h2><h3 id="接口默认方法的“类优先”原则"><a href="#接口默认方法的“类优先”原则" class="headerlink" title="接口默认方法的“类优先”原则"></a>接口默认方法的“类优先”原则</h3><p>若一个借口中定义了一个默认方法，而另外一个父类或接口中又定义了一个同名的方法时：</p><h4 id="选择父类中的方法"><a href="#选择父类中的方法" class="headerlink" title="选择父类中的方法"></a>选择父类中的方法</h4><p>如果父类提供了具体的实现，那么接口中具有相同名称和参数的默认方法会被忽略。</p><h4 id="接口冲突"><a href="#接口冲突" class="headerlink" title="接口冲突"></a>接口冲突</h4><p>如果一个父类接口提供一个默认方法，而另外一个接口也提供了一个具有相同名称和参数列表的方法（不管方法是否是默认方法），那么必须覆盖该方法来解决冲突。</p><h2 id="新时间日期API"><a href="#新时间日期API" class="headerlink" title="新时间日期API"></a>新时间日期API</h2><p><strong>LocalDate、LocalTime、LocalDateTime</strong>类的实例是不可变对象，分别表示使用ISO-8601日历系统的日期、时间、日期和时间。它们提供了简单的日期或时间，并不包含当前的时间信息。也不包含与时区相关的信息。</p><p><strong>TemporalAdjuster</strong>：时间校正器。有时我们可能需要获取例如：将日期调整到“下个周日”等操作。</p><p><strong>TemporalAdjusters：</strong>该类通过静态方法提供了大量的常用TemporalAdjuster的实现。</p><p>Java8中加入了对时区的支持，带时区的时间分别为：<strong>ZonedDate、ZonedTime、ZoneDateTime</strong>，其中每个时区都对应着ID，地区ID都为“**{区域}&#x2F;{城市}**”的格式</p><p><strong>ZoneId</strong>：该类中包含了所有的时区信息</p><p>​**getAvailableZoneIds()**：可以获取所有时区信息</p><p>​**of(id)**：用指定的时区信息获取ZoneId对象</p><h2 id="其它新特性"><a href="#其它新特性" class="headerlink" title="其它新特性"></a>其它新特性</h2><h3 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h3><p>Optional<T>类(java.util.Optional)是一个容器类，代表一个值存在或不存在，原来用null表示一个值不存在，现在Optional可以更好的表达这个概念。并且可以避免空指针异常。</p><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><p><strong>Optional.of(T t)：</strong>创建一个Optional实例</p><p><strong>Optional.empty()：</strong>创建一个空的Optional实例</p><p><strong>Optional.ofNullable(T t)：</strong>若t不为null，创建Optional实例，否则创建空实例</p><p><strong>isPresent()：</strong>判断是否包含值</p><p><strong>orElse(T t)：</strong>如果调用对象包含值，返回该值，否则返回t</p><p><strong>orElseGet(Supplier s)：</strong>如果调用对象包含值，则返回该值，否则返回s获取的值</p><p><strong>map(Function f)：</strong>如果有值对其处理，并返回处理后的Optional，否则返回Optional.empty()</p><p><strong>flatMap(Function mapper)：</strong>与map类似，要求返回值必须是Optional</p><h3 id="重复注解与类型注解"><a href="#重复注解与类型注解" class="headerlink" title="重复注解与类型注解"></a>重复注解与类型注解</h3><p>未完待续-</p>]]></content>
    
    
    <categories>
      
      <category>技术文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Seata安装教程</title>
    <link href="/2024/07/25/Seata%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <url>/2024/07/25/Seata%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h1><p>如果选择nacos作为注册中心，在nacos新建namespace，并新建seataServer.properties，指定为SEATA_GROUP</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#For details about configuration items, see https://seata.io/zh-cn/docs/user/configurations.html</span><br><span class="hljs-comment">#Transport configuration, for client and server</span><br><span class="hljs-attr">transport.type</span>=<span class="hljs-string">TCP</span><br><span class="hljs-attr">transport.server</span>=<span class="hljs-string">NIO</span><br><span class="hljs-attr">transport.heartbeat</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">transport.enableTmClientBatchSendRequest</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">transport.enableRmClientBatchSendRequest</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">transport.enableTcServerBatchSendResponse</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">transport.rpcRmRequestTimeout</span>=<span class="hljs-string">30000</span><br><span class="hljs-attr">transport.rpcTmRequestTimeout</span>=<span class="hljs-string">30000</span><br><span class="hljs-attr">transport.rpcTcRequestTimeout</span>=<span class="hljs-string">30000</span><br><span class="hljs-attr">transport.threadFactory.bossThreadPrefix</span>=<span class="hljs-string">NettyBoss</span><br><span class="hljs-attr">transport.threadFactory.workerThreadPrefix</span>=<span class="hljs-string">NettyServerNIOWorker</span><br><span class="hljs-attr">transport.threadFactory.serverExecutorThreadPrefix</span>=<span class="hljs-string">NettyServerBizHandler</span><br><span class="hljs-attr">transport.threadFactory.shareBossWorker</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">transport.threadFactory.clientSelectorThreadPrefix</span>=<span class="hljs-string">NettyClientSelector</span><br><span class="hljs-attr">transport.threadFactory.clientSelectorThreadSize</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">transport.threadFactory.clientWorkerThreadPrefix</span>=<span class="hljs-string">NettyClientWorkerThread</span><br><span class="hljs-attr">transport.threadFactory.bossThreadSize</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">transport.threadFactory.workerThreadSize</span>=<span class="hljs-string">default</span><br><span class="hljs-attr">transport.shutdown.wait</span>=<span class="hljs-string">3</span><br><span class="hljs-attr">transport.serialization</span>=<span class="hljs-string">seata</span><br><span class="hljs-attr">transport.compressor</span>=<span class="hljs-string">none</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#Transaction routing rules configuration, only for the client</span><br><span class="hljs-attr">service.vgroupMapping.default_tx_group</span>=<span class="hljs-string">default</span><br><span class="hljs-attr">service.vgroupMapping.user_server_tx_group</span>=<span class="hljs-string">default</span><br><span class="hljs-attr">service.vgroupMapping.auth_server_tx_group</span>=<span class="hljs-string">default</span><br><span class="hljs-attr">service.vgroupMapping.goods_server_tx_group</span>=<span class="hljs-string">default</span><br><span class="hljs-comment">#If you use a registry, you can ignore it</span><br><span class="hljs-attr">service.default.grouplist</span>=<span class="hljs-string">192.168.80.108:8091</span><br><span class="hljs-attr">service.enableDegrade</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">service.disableGlobalTransaction</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#Transaction rule configuration, only for the client</span><br><span class="hljs-attr">client.rm.asyncCommitBufferLimit</span>=<span class="hljs-string">10000</span><br><span class="hljs-attr">client.rm.lock.retryInterval</span>=<span class="hljs-string">10</span><br><span class="hljs-attr">client.rm.lock.retryTimes</span>=<span class="hljs-string">30</span><br><span class="hljs-attr">client.rm.lock.retryPolicyBranchRollbackOnConflict</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">client.rm.reportRetryCount</span>=<span class="hljs-string">5</span><br><span class="hljs-attr">client.rm.tableMetaCheckEnable</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">client.rm.tableMetaCheckerInterval</span>=<span class="hljs-string">60000</span><br><span class="hljs-attr">client.rm.sqlParserType</span>=<span class="hljs-string">druid</span><br><span class="hljs-attr">client.rm.reportSuccessEnable</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">client.rm.sagaBranchRegisterEnable</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">client.rm.sagaJsonParser</span>=<span class="hljs-string">fastjson</span><br><span class="hljs-attr">client.rm.tccActionInterceptorOrder</span>=<span class="hljs-string">-2147482648</span><br><span class="hljs-attr">client.tm.commitRetryCount</span>=<span class="hljs-string">5</span><br><span class="hljs-attr">client.tm.rollbackRetryCount</span>=<span class="hljs-string">5</span><br><span class="hljs-attr">client.tm.defaultGlobalTransactionTimeout</span>=<span class="hljs-string">60000</span><br><span class="hljs-attr">client.tm.degradeCheck</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">client.tm.degradeCheckAllowTimes</span>=<span class="hljs-string">10</span><br><span class="hljs-attr">client.tm.degradeCheckPeriod</span>=<span class="hljs-string">2000</span><br><span class="hljs-attr">client.tm.interceptorOrder</span>=<span class="hljs-string">-2147482648</span><br><span class="hljs-attr">client.undo.dataValidation</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">client.undo.logSerialization</span>=<span class="hljs-string">jackson</span><br><span class="hljs-attr">client.undo.onlyCareUpdateColumns</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">server.undo.logSaveDays</span>=<span class="hljs-string">7</span><br><span class="hljs-attr">server.undo.logDeletePeriod</span>=<span class="hljs-string">86400000</span><br><span class="hljs-attr">client.undo.logTable</span>=<span class="hljs-string">undo_log</span><br><span class="hljs-attr">client.undo.compress.enable</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">client.undo.compress.type</span>=<span class="hljs-string">zip</span><br><span class="hljs-attr">client.undo.compress.threshold</span>=<span class="hljs-string">64k</span><br><span class="hljs-comment">#For TCC transaction mode</span><br><span class="hljs-attr">tcc.fence.logTableName</span>=<span class="hljs-string">tcc_fence_log</span><br><span class="hljs-attr">tcc.fence.cleanPeriod</span>=<span class="hljs-string">1h</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#Log rule configuration, for client and server</span><br><span class="hljs-attr">log.exceptionRate</span>=<span class="hljs-string">100</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#Transaction storage configuration, only for the server. The file, db, and redis configuration values are optional.</span><br><span class="hljs-attr">store.mode</span>=<span class="hljs-string">db</span><br><span class="hljs-attr">store.lock.mode</span>=<span class="hljs-string">db</span><br><span class="hljs-attr">store.session.mode</span>=<span class="hljs-string">db</span><br><span class="hljs-comment">#Used for password encryption</span><br><span class="hljs-attr">store.publicKey</span>=<span class="hljs-string"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#If `store.mode,store.lock.mode,store.session.mode` are not equal to `file`, you can remove the configuration block.</span><br><span class="hljs-attr">store.file.dir</span>=<span class="hljs-string">file_store/data</span><br><span class="hljs-attr">store.file.maxBranchSessionSize</span>=<span class="hljs-string">16384</span><br><span class="hljs-attr">store.file.maxGlobalSessionSize</span>=<span class="hljs-string">512</span><br><span class="hljs-attr">store.file.fileWriteBufferCacheSize</span>=<span class="hljs-string">16384</span><br><span class="hljs-attr">store.file.flushDiskMode</span>=<span class="hljs-string">async</span><br><span class="hljs-attr">store.file.sessionReloadReadSize</span>=<span class="hljs-string">100</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#These configurations are required if the `store mode` is `db`. If `store.mode,store.lock.mode,store.session.mode` are not equal to `db`, you can remove the configuration block.</span><br><span class="hljs-attr">store.db.datasource</span>=<span class="hljs-string">druid</span><br><span class="hljs-attr">store.db.dbType</span>=<span class="hljs-string">mysql</span><br><span class="hljs-attr">store.db.driverClassName</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">store.db.url</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/seata?useUnicode=true&amp;rewriteBatchedStatements=true</span><br><span class="hljs-attr">store.db.user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">store.db.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-attr">store.db.minConn</span>=<span class="hljs-string">5</span><br><span class="hljs-attr">store.db.maxConn</span>=<span class="hljs-string">30</span><br><span class="hljs-attr">store.db.globalTable</span>=<span class="hljs-string">global_table</span><br><span class="hljs-attr">store.db.branchTable</span>=<span class="hljs-string">branch_table</span><br><span class="hljs-attr">store.db.distributedLockTable</span>=<span class="hljs-string">distributed_lock</span><br><span class="hljs-attr">store.db.queryLimit</span>=<span class="hljs-string">100</span><br><span class="hljs-attr">store.db.lockTable</span>=<span class="hljs-string">lock_table</span><br><span class="hljs-attr">store.db.maxWait</span>=<span class="hljs-string">5000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#These configurations are required if the `store mode` is `redis`. If `store.mode,store.lock.mode,store.session.mode` are not equal to `redis`, you can remove the configuration block.</span><br><span class="hljs-attr">store.redis.mode</span>=<span class="hljs-string">single</span><br><span class="hljs-attr">store.redis.single.host</span>=<span class="hljs-string">192.168.80.108</span><br><span class="hljs-attr">store.redis.single.port</span>=<span class="hljs-string">6379</span><br><span class="hljs-attr">store.redis.sentinel.masterName</span>=<span class="hljs-string"></span><br><span class="hljs-attr">store.redis.sentinel.sentinelHosts</span>=<span class="hljs-string"></span><br><span class="hljs-attr">store.redis.sentinel.sentinelPassword</span>=<span class="hljs-string"></span><br><span class="hljs-attr">store.redis.maxConn</span>=<span class="hljs-string">10</span><br><span class="hljs-attr">store.redis.minConn</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">store.redis.maxTotal</span>=<span class="hljs-string">100</span><br><span class="hljs-attr">store.redis.database</span>=<span class="hljs-string">0</span><br><span class="hljs-attr">store.redis.password</span>=<span class="hljs-string"></span><br><span class="hljs-attr">store.redis.queryLimit</span>=<span class="hljs-string">100</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#Transaction rule configuration, only for the server</span><br><span class="hljs-attr">server.recovery.committingRetryPeriod</span>=<span class="hljs-string">1000</span><br><span class="hljs-attr">server.recovery.asynCommittingRetryPeriod</span>=<span class="hljs-string">1000</span><br><span class="hljs-attr">server.recovery.rollbackingRetryPeriod</span>=<span class="hljs-string">1000</span><br><span class="hljs-attr">server.recovery.timeoutRetryPeriod</span>=<span class="hljs-string">1000</span><br><span class="hljs-attr">server.maxCommitRetryTimeout</span>=<span class="hljs-string">-1</span><br><span class="hljs-attr">server.maxRollbackRetryTimeout</span>=<span class="hljs-string">-1</span><br><span class="hljs-attr">server.rollbackRetryTimeoutUnlockEnable</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">server.distributedLockExpireTime</span>=<span class="hljs-string">10000</span><br><span class="hljs-attr">server.xaerNotaRetryTimeout</span>=<span class="hljs-string">60000</span><br><span class="hljs-attr">server.session.branchAsyncQueueSize</span>=<span class="hljs-string">5000</span><br><span class="hljs-attr">server.session.enableBranchAsyncRemove</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">server.enableParallelRequestHandle</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#Metrics configuration, only for the server</span><br><span class="hljs-attr">metrics.enabled</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">metrics.registryType</span>=<span class="hljs-string">compact</span><br><span class="hljs-attr">metrics.exporterList</span>=<span class="hljs-string">prometheus</span><br><span class="hljs-attr">metrics.exporterPrometheusPort</span>=<span class="hljs-string">9898</span><br></code></pre></td></tr></table></figure><p>在数据库中新建seata数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- -------------------------------- The script used when storeMode is &#x27;db&#x27; --------------------------------</span><br><span class="hljs-comment">-- the table to store GlobalSession data</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `global_table`<br>(<br>    `xid`                       <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `transaction_id`            <span class="hljs-type">BIGINT</span>,<br>    `status`                    TINYINT      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `application_id`            <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>    `transaction_service_group` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>    `transaction_name`          <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>),<br>    `timeout`                   <span class="hljs-type">INT</span>,<br>    `begin_time`                <span class="hljs-type">BIGINT</span>,<br>    `application_data`          <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">2000</span>),<br>    `gmt_create`                DATETIME,<br>    `gmt_modified`              DATETIME,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`xid`),<br>    KEY `idx_status_gmt_modified` (`status` , `gmt_modified`),<br>    KEY `idx_transaction_id` (`transaction_id`)<br>) ENGINE <span class="hljs-operator">=</span> InnoDB<br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8mb4;<br><br><span class="hljs-comment">-- the table to store BranchSession data</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `branch_table`<br>(<br>    `branch_id`         <span class="hljs-type">BIGINT</span>       <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `xid`               <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `transaction_id`    <span class="hljs-type">BIGINT</span>,<br>    `resource_group_id` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>    `resource_id`       <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">256</span>),<br>    `branch_type`       <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">8</span>),<br>    `status`            TINYINT,<br>    `client_id`         <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">64</span>),<br>    `application_data`  <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">2000</span>),<br>    `gmt_create`        DATETIME(<span class="hljs-number">6</span>),<br>    `gmt_modified`      DATETIME(<span class="hljs-number">6</span>),<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`branch_id`),<br>    KEY `idx_xid` (`xid`)<br>) ENGINE <span class="hljs-operator">=</span> InnoDB<br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8mb4;<br><br><span class="hljs-comment">-- the table to store lock data</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `lock_table`<br>(<br>    `row_key`        <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `xid`            <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>),<br>    `transaction_id` <span class="hljs-type">BIGINT</span>,<br>    `branch_id`      <span class="hljs-type">BIGINT</span>       <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `resource_id`    <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">256</span>),<br>    `table_name`     <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>    `pk`             <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">36</span>),<br>    `status`         TINYINT      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;0:locked ,1:rollbacking&#x27;</span>,<br>    `gmt_create`     DATETIME,<br>    `gmt_modified`   DATETIME,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`row_key`),<br>    KEY `idx_status` (`status`),<br>    KEY `idx_branch_id` (`branch_id`),<br>    KEY `idx_xid` (`xid`)<br>) ENGINE <span class="hljs-operator">=</span> InnoDB<br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8mb4;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `distributed_lock`<br>(<br>    `lock_key`       <span class="hljs-type">CHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `lock_value`     <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `expire`         <span class="hljs-type">BIGINT</span>,<br>    <span class="hljs-keyword">primary</span> key (`lock_key`)<br>) ENGINE <span class="hljs-operator">=</span> InnoDB<br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8mb4;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;AsyncCommitting&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;RetryCommitting&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;RetryRollbacking&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;TxTimeoutCheck&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>在业务库中添加undo_log表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `undo_log`<br>(<br>  `branch_id`     <span class="hljs-type">BIGINT</span>       <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;branch transaction id&#x27;</span>,<br>  `xid`           <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;global transaction id&#x27;</span>,<br>  `context`       <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;undo_log context,such as serialization&#x27;</span>,<br>  `rollback_info` LONGBLOB     <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;rollback info&#x27;</span>,<br>  `log_status`    <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>)      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;0:normal status,1:defense status&#x27;</span>,<br>  `log_created`   DATETIME(<span class="hljs-number">6</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;create datetime&#x27;</span>,<br>  `log_modified`  DATETIME(<span class="hljs-number">6</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;modify datetime&#x27;</span>,<br>  <span class="hljs-keyword">UNIQUE</span> KEY `ux_undo_log` (`xid`, `branch_id`)<br>) ENGINE <span class="hljs-operator">=</span> InnoDB AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8mb4 COMMENT <span class="hljs-operator">=</span><span class="hljs-string">&#x27;AT transaction mode undo table&#x27;</span>;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `undo_log` <span class="hljs-keyword">ADD</span> INDEX `ix_log_created` (`log_created`);<br></code></pre></td></tr></table></figure><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>拉取seata镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull seataio/seata-server<br></code></pre></td></tr></table></figure><p>运行seata镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d --name seata-server -p 8091:8091 seataio/seata-server<br></code></pre></td></tr></table></figure><p>复制容器内的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker cp seata-server:/seata-server /usr/local/src/seata<br></code></pre></td></tr></table></figure><p>停止并删除容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker stop seata-server;<br>docker image rm seata-server;<br></code></pre></td></tr></table></figure><p>进去&#x2F;usr&#x2F;local&#x2F;src&#x2F;seat&#x2F;seata-server&#x2F;resource目录下编辑application.yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#  Copyright 1999-2019 Seata.io Group.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment">#  you may not use this file except in compliance with the License.</span><br><span class="hljs-comment">#  You may obtain a copy of the License at</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment">#  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment">#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment">#  See the License for the specific language governing permissions and</span><br><span class="hljs-comment">#  limitations under the License.</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7091</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">seata-server</span><br><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">config:</span> <span class="hljs-string">classpath:logback-spring.xml</span><br>  <span class="hljs-attr">file:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">$&#123;log.home:$&#123;user.home&#125;/logs/seata&#125;</span><br>  <span class="hljs-attr">extend:</span><br>    <span class="hljs-attr">logstash-appender:</span><br>      <span class="hljs-attr">destination:</span> <span class="hljs-string">$&#123;LOGSTASH_IP_ADDRESS:192.168.80.108&#125;:4560</span><br>    <span class="hljs-attr">kafka-appender:</span><br>      <span class="hljs-attr">bootstrap-servers:</span> <span class="hljs-string">$&#123;BOOTSTRAP_IP_ADDRESS:192.168.80.108&#125;:9092</span><br>      <span class="hljs-attr">topic:</span> <span class="hljs-string">logback_to_logstash</span><br><br><span class="hljs-attr">seata:</span><br>  <span class="hljs-attr">security:</span><br>    <span class="hljs-attr">secretKey:</span> <span class="hljs-string">&quot;seata&quot;</span><br>    <span class="hljs-attr">tokenValidityInMilliseconds:</span> <span class="hljs-number">1000000000</span><br>  <span class="hljs-attr">config:</span><br>    <span class="hljs-comment"># support: nacos 、 consul 、 apollo 、 zk  、 etcd3</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">nacos</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">$&#123;NACOS_IP_ADDRESS:192.168.80.108&#125;:8848</span><br>      <span class="hljs-attr">namespace:</span> <span class="hljs-string">$&#123;NACOS_NAMESPACE:0a5d487c-4e3a-4988-ba8e-1796f0a9d913&#125;</span><br>      <span class="hljs-attr">group:</span> <span class="hljs-string">SEATA_GROUP</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">$&#123;NACOS_USERNAME:nacos&#125;</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">$&#123;NACOS_PASSWORD:nacos&#125;</span><br>      <span class="hljs-attr">context-path:</span><br>      <span class="hljs-comment">##if use MSE Nacos with auth, mutex with username/password attribute</span><br>      <span class="hljs-comment">#access-key:</span><br>      <span class="hljs-comment">#secret-key:</span><br>      <span class="hljs-attr">data-id:</span> <span class="hljs-string">seata.properties</span><br>  <span class="hljs-attr">registry:</span><br>    <span class="hljs-comment"># support: nacos 、 eureka 、 redis 、 zk  、 consul 、 etcd3 、 sofa</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">nacos</span><br>    <span class="hljs-attr">preferred-networks:</span> <span class="hljs-number">30.240</span><span class="hljs-string">.*</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">application:</span> <span class="hljs-string">seata-server</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">$&#123;NACOS_IP_ADDRESS:192.168.80.108&#125;:8848</span><br>      <span class="hljs-attr">group:</span> <span class="hljs-string">SEATA_GROUP</span><br>      <span class="hljs-attr">namespace:</span> <span class="hljs-string">$&#123;NACOS_NAMESPACE:0a5d487c-4e3a-4988-ba8e-1796f0a9d913&#125;</span><br>      <span class="hljs-attr">cluster:</span> <span class="hljs-string">default</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">$&#123;NACOS_USERNAME:nacos&#125;</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">$&#123;NACOS_PASSWORD:nacos&#125;</span><br>      <span class="hljs-attr">context-path:</span><br>      <span class="hljs-comment">##if use MSE Nacos with auth, mutex with username/password attribute</span><br>      <span class="hljs-comment">#access-key:</span><br>      <span class="hljs-comment">#secret-key:</span><br><br>  <span class="hljs-attr">server:</span><br>    <span class="hljs-attr">service-port:</span> <span class="hljs-number">8091</span> <span class="hljs-comment">#If not configured, the default is &#x27;$&#123;server.port&#125; + 1000&#x27;</span><br>    <span class="hljs-attr">max-commit-retry-timeout:</span> <span class="hljs-number">-1</span><br>    <span class="hljs-attr">max-rollback-retry-timeout:</span> <span class="hljs-number">-1</span><br>    <span class="hljs-attr">rollback-retry-timeout-unlock-enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">enable-check-auth:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">enable-parallel-request-handle:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">retry-dead-threshold:</span> <span class="hljs-number">130000</span><br>    <span class="hljs-attr">xaer-nota-retry-timeout:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">enableParallelRequestHandle:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">recovery:</span><br>      <span class="hljs-attr">committing-retry-period:</span> <span class="hljs-number">1000</span><br>      <span class="hljs-attr">async-committing-retry-period:</span> <span class="hljs-number">1000</span><br>      <span class="hljs-attr">rollbacking-retry-period:</span> <span class="hljs-number">1000</span><br>      <span class="hljs-attr">timeout-retry-period:</span> <span class="hljs-number">1000</span><br>    <span class="hljs-attr">undo:</span><br>      <span class="hljs-attr">log-save-days:</span> <span class="hljs-number">7</span><br>      <span class="hljs-attr">log-delete-period:</span> <span class="hljs-number">86400000</span><br>    <span class="hljs-attr">session:</span><br>      <span class="hljs-attr">branch-async-queue-size:</span> <span class="hljs-number">5000</span> <span class="hljs-comment">#branch async remove queue size</span><br>      <span class="hljs-attr">enable-branch-async-remove:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#enable to asynchronous remove branchSession</span><br>  <span class="hljs-attr">store:</span><br>    <span class="hljs-comment"># support: file 、 db 、 redis</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">db</span><br>    <span class="hljs-attr">session:</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-string">db</span><br>    <span class="hljs-attr">lock:</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-string">db</span><br>    <span class="hljs-attr">db:</span><br>      <span class="hljs-attr">datasource:</span> <span class="hljs-string">druid</span><br>      <span class="hljs-attr">db-type:</span> <span class="hljs-string">mysql</span><br>      <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://$&#123;DB_IP_ADDRESS:192.168.80.108&#125;:3306/seata?rewriteBatchedStatements=true</span><br>      <span class="hljs-attr">user:</span> <span class="hljs-string">$&#123;DB_USERNAME:root&#125;</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">$&#123;DB_PASSWORD:123456&#125;</span><br>      <span class="hljs-attr">min-conn:</span> <span class="hljs-number">10</span><br>      <span class="hljs-attr">max-conn:</span> <span class="hljs-number">100</span><br>      <span class="hljs-attr">global-table:</span> <span class="hljs-string">global_table</span><br>      <span class="hljs-attr">branch-table:</span> <span class="hljs-string">branch_table</span><br>      <span class="hljs-attr">lock-table:</span> <span class="hljs-string">lock_table</span><br>      <span class="hljs-attr">distributed-lock-table:</span> <span class="hljs-string">distributed_lock</span><br>      <span class="hljs-attr">query-limit:</span> <span class="hljs-number">1000</span><br>      <span class="hljs-attr">max-wait:</span> <span class="hljs-number">5000</span><br>  <span class="hljs-attr">metrics:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">registry-type:</span> <span class="hljs-string">compact</span><br>    <span class="hljs-attr">exporter-list:</span> <span class="hljs-string">prometheus</span><br>    <span class="hljs-attr">exporter-prometheus-port:</span> <span class="hljs-number">9898</span><br>  <span class="hljs-attr">transport:</span><br>    <span class="hljs-attr">rpc-tc-request-timeout:</span> <span class="hljs-number">15000</span><br>    <span class="hljs-attr">enable-tc-server-batch-send-response:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">shutdown:</span><br>      <span class="hljs-attr">wait:</span> <span class="hljs-number">3</span><br>    <span class="hljs-attr">thread-factory:</span><br>      <span class="hljs-attr">boss-thread-prefix:</span> <span class="hljs-string">NettyBoss</span><br>      <span class="hljs-attr">worker-thread-prefix:</span> <span class="hljs-string">NettyServerNIOWorker</span><br>      <span class="hljs-attr">boss-thread-size:</span> <span class="hljs-number">1</span><br><span class="hljs-comment">#seata启动console相关报错解决</span><br><span class="hljs-attr">console:</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">seata</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">seata</span><br></code></pre></td></tr></table></figure><p>启动seata镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -it \<br>--name seata-scorpio \<br>--restart=always \<br>--privileged=true \<br>-p 8091:8091 \<br>-p 7091:7091 \<br>-e SEATA_IP=192.168.80.108 \<br>-v /usr/local/src/seata/seata-server/resources:/seata-server/resources  \<br>-v /usr/local/src/seata/logs:/root/logs/seata  \<br>-d seataio/seata-server<br></code></pre></td></tr></table></figure><p>可选参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">--env LOGSTASH_IP_ADDRESS=192.168.80.108 \<br>--env BOOTSTRAP_IP_ADDRESS=192.168.80.108 \<br>--env NACOS_IP_ADDRESS=192.168.80.108 \<br>--env NACOS_NAMESAPCE=0a5d487c-4e3a-4988-ba8e-1796f0a9d913 \<br>--env NACOS_USERNAME=nacos \<br>--env NACOS_PASSWORD=nacos \<br>--env DB_IP_ADDRESS=192.168.80.108 \<br>--env DB_USERNAME=root \<br>--env DB_PASSWORD=123456 \<br></code></pre></td></tr></table></figure><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>下载二进制包</p><p><a href="https://seata.apache.org/zh-cn/unversioned/download/seata-server">https://seata.apache.org/zh-cn/unversioned/download/seata-server</a></p><p><img src="/img/seata-install/win-seata-1.png" alt="win-seata-1"></p><p>在解压目录&#x2F;conf文件夹下找到application.yml文件，参考application.excample.yml编辑</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#  Copyright 1999-2019 Seata.io Group.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment">#  you may not use this file except in compliance with the License.</span><br><span class="hljs-comment">#  You may obtain a copy of the License at</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment">#  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment">#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment">#  See the License for the specific language governing permissions and</span><br><span class="hljs-comment">#  limitations under the License.</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7091</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">seata-server</span><br><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">config:</span> <span class="hljs-string">classpath:logback-spring.xml</span><br>  <span class="hljs-attr">file:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">$&#123;log.home:$&#123;user.home&#125;/logs/seata&#125;</span><br>  <span class="hljs-attr">extend:</span><br>    <span class="hljs-attr">logstash-appender:</span><br>      <span class="hljs-attr">destination:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:4560</span><br>    <span class="hljs-attr">kafka-appender:</span><br>      <span class="hljs-attr">bootstrap-servers:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:9092</span><br>      <span class="hljs-attr">topic:</span> <span class="hljs-string">logback_to_logstash</span><br><br><span class="hljs-attr">seata:</span><br>  <span class="hljs-attr">config:</span><br>    <span class="hljs-comment"># support: nacos 、 consul 、 apollo 、 zk  、 etcd3</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">nacos</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>      <span class="hljs-comment">#配置新建的seata的命名空间</span><br>      <span class="hljs-attr">namespace:</span> <span class="hljs-string">56dc73c6-c952-40ea-92d8-43a4d1af1c2c</span><br>      <span class="hljs-attr">group:</span> <span class="hljs-string">SEATA_GROUP</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">nacos</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">nacos</span><br>      <span class="hljs-attr">context-path:</span><br>      <span class="hljs-comment">##if use MSE Nacos with auth, mutex with username/password attribute</span><br>      <span class="hljs-comment">#access-key:</span><br>      <span class="hljs-comment">#secret-key:</span><br>      <span class="hljs-attr">data-id:</span> <span class="hljs-string">seataServer.properties</span><br>      <br>  <span class="hljs-attr">registry:</span><br>    <span class="hljs-comment"># support: nacos 、 eureka 、 redis 、 zk  、 consul 、 etcd3 、 sofa</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">nacos</span><br>    <span class="hljs-attr">preferred-networks:</span> <span class="hljs-number">30.240</span><span class="hljs-string">.*</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">application:</span> <span class="hljs-string">seata-server</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>      <span class="hljs-attr">group:</span> <span class="hljs-string">SEATA_GROUP</span><br>      <span class="hljs-comment">#配置新建的seata的命名空间</span><br>      <span class="hljs-attr">namespace:</span> <span class="hljs-string">56dc73c6-c952-40ea-92d8-43a4d1af1c2c</span><br>      <span class="hljs-attr">cluster:</span> <span class="hljs-string">default</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">nacos</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">nacos</span><br>      <span class="hljs-attr">context-path:</span><br>      <span class="hljs-comment">##if use MSE Nacos with auth, mutex with username/password attribute</span><br>      <span class="hljs-comment">#access-key:</span><br>      <span class="hljs-comment">#secret-key:</span><br>      <br>  <span class="hljs-attr">server:</span><br>    <span class="hljs-attr">raft:</span><br>      <span class="hljs-attr">group:</span> <span class="hljs-string">default</span><br>      <span class="hljs-attr">cluster:</span><br>      <span class="hljs-attr">snapshot-interval:</span> <span class="hljs-number">600</span><br>      <span class="hljs-attr">apply-batch:</span> <span class="hljs-number">32</span><br>      <span class="hljs-attr">max-append-bufferSize:</span> <span class="hljs-number">262144</span><br>      <span class="hljs-attr">max-replicator-inflight-msgs:</span> <span class="hljs-number">256</span><br>      <span class="hljs-attr">disruptor-buffer-size:</span> <span class="hljs-number">16384</span><br>      <span class="hljs-attr">election-timeout-ms:</span> <span class="hljs-number">1000</span><br>      <span class="hljs-attr">reporter-enabled:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">reporter-initial-delay:</span> <span class="hljs-number">60</span><br>      <span class="hljs-attr">serialization:</span> <span class="hljs-string">jackson</span><br>      <span class="hljs-attr">compressor:</span> <span class="hljs-string">none</span><br>      <span class="hljs-attr">sync:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># sync log&amp;snapshot to disk</span><br>    <span class="hljs-attr">service-port:</span> <span class="hljs-number">8091</span> <span class="hljs-comment">#If not configured, the default is &#x27;$&#123;server.port&#125; + 1000&#x27;</span><br>    <span class="hljs-attr">max-commit-retry-timeout:</span> <span class="hljs-number">-1</span><br>    <span class="hljs-attr">max-rollback-retry-timeout:</span> <span class="hljs-number">-1</span><br>    <span class="hljs-attr">rollback-retry-timeout-unlock-enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">enable-check-auth:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">enable-parallel-request-handle:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">enable-parallel-handle-branch:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">retry-dead-threshold:</span> <span class="hljs-number">130000</span><br>    <span class="hljs-attr">xaer-nota-retry-timeout:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">enableParallelRequestHandle:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">recovery:</span><br>      <span class="hljs-attr">committing-retry-period:</span> <span class="hljs-number">1000</span><br>      <span class="hljs-attr">async-committing-retry-period:</span> <span class="hljs-number">1000</span><br>      <span class="hljs-attr">rollbacking-retry-period:</span> <span class="hljs-number">1000</span><br>      <span class="hljs-attr">timeout-retry-period:</span> <span class="hljs-number">1000</span><br>    <span class="hljs-attr">undo:</span><br>      <span class="hljs-attr">log-save-days:</span> <span class="hljs-number">7</span><br>      <span class="hljs-attr">log-delete-period:</span> <span class="hljs-number">86400000</span><br>    <span class="hljs-attr">session:</span><br>      <span class="hljs-attr">branch-async-queue-size:</span> <span class="hljs-number">5000</span> <span class="hljs-comment">#branch async remove queue size</span><br>      <span class="hljs-attr">enable-branch-async-remove:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#enable to asynchronous remove branchSession</span><br>  <span class="hljs-attr">store:</span><br>    <span class="hljs-comment"># support: file 、 db 、 redis 、 raft</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">db</span><br>    <span class="hljs-attr">session:</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-string">db</span><br>    <span class="hljs-attr">lock:</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-string">db</span><br>    <span class="hljs-attr">db:</span><br>      <span class="hljs-attr">datasource:</span> <span class="hljs-string">druid</span><br>      <span class="hljs-attr">db-type:</span> <span class="hljs-string">mysql</span><br>      <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/seata?rewriteBatchedStatements=true</span><br>      <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>      <span class="hljs-attr">min-conn:</span> <span class="hljs-number">10</span><br>      <span class="hljs-attr">max-conn:</span> <span class="hljs-number">100</span><br>      <span class="hljs-attr">global-table:</span> <span class="hljs-string">global_table</span><br>      <span class="hljs-attr">branch-table:</span> <span class="hljs-string">branch_table</span><br>      <span class="hljs-attr">lock-table:</span> <span class="hljs-string">lock_table</span><br>      <span class="hljs-attr">distributed-lock-table:</span> <span class="hljs-string">distributed_lock</span><br>      <span class="hljs-attr">query-limit:</span> <span class="hljs-number">1000</span><br>      <span class="hljs-attr">max-wait:</span> <span class="hljs-number">5000</span><br>  <span class="hljs-attr">metrics:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">registry-type:</span> <span class="hljs-string">compact</span><br>    <span class="hljs-attr">exporter-list:</span> <span class="hljs-string">prometheus</span><br>    <span class="hljs-attr">exporter-prometheus-port:</span> <span class="hljs-number">9898</span><br>  <span class="hljs-attr">transport:</span><br>    <span class="hljs-attr">rpc-tc-request-timeout:</span> <span class="hljs-number">15000</span><br>    <span class="hljs-attr">enable-tc-server-batch-send-response:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">shutdown:</span><br>      <span class="hljs-attr">wait:</span> <span class="hljs-number">3</span><br>    <span class="hljs-attr">thread-factory:</span><br>      <span class="hljs-attr">boss-thread-prefix:</span> <span class="hljs-string">NettyBoss</span><br>      <span class="hljs-attr">worker-thread-prefix:</span> <span class="hljs-string">NettyServerNIOWorker</span><br>      <span class="hljs-attr">boss-thread-size:</span> <span class="hljs-number">1</span><br><span class="hljs-comment">#seata启动console相关报错解决</span><br><span class="hljs-attr">console:</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">seata</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">seata</span><br><span class="hljs-comment"># 这两个属性放到原配置文件键seata下面</span><br><span class="hljs-attr">seata:</span><br>  <span class="hljs-attr">security:</span><br>    <span class="hljs-attr">secretKey:</span> <span class="hljs-string">&quot;seata&quot;</span><br>    <span class="hljs-attr">tokenValidityInMilliseconds:</span> <span class="hljs-number">1000000000</span><br></code></pre></td></tr></table></figure><p>在解压目录&#x2F;bin文件夹下执行seata-server.bat</p><p><img src="/img/seata-install/win-seata-4.png" alt="win-seata-4"></p><p>出现以下结果则安装成功</p><p><img src="/img/seata-install/win-seata-5.png" alt="win-seata-5"></p>]]></content>
    
    
    <categories>
      
      <category>DevTool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安装教程</tag>
      
      <tag>Windows</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nacos安装教程</title>
    <link href="/2024/07/21/Nacos%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <url>/2024/07/21/Nacos%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Naocs安装教程"><a href="#Naocs安装教程" class="headerlink" title="Naocs安装教程"></a>Naocs安装教程</h1><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>下载nacos官方镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull nacos/nacos-server<br></code></pre></td></tr></table></figure><p>运行nacos镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d -p 8849:8848 --name nacos \<br>--privileged=true \<br>--restart=always \<br>-e JVM_XMS=256m \<br>-e JVM_XMX=256m \<br>-e MODE=standalone \<br>-e PREFER_HOST_MODE=hostname \<br>-v /usr/local/src/nacos/logs:/home/nacos/logs \<br>-v /usr/local/src/nacos/init.d/custom.properties:/home/nacos/init.d/custom.properties \<br>-d nacos/nacos-server<br></code></pre></td></tr></table></figure><p>复制配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker cp -a nacos:/home/nacos /usr/local/src/<br></code></pre></td></tr></table></figure><p>停止并删除容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker stop nacos;<br>docker image rm nacos;<br></code></pre></td></tr></table></figure><p>在&#x2F;usr&#x2F;locla&#x2F;src&#x2F;nacos&#x2F;修改配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># spring</span><br><span class="hljs-attr">server.servlet.contextPath</span>=<span class="hljs-string">$&#123;SERVER_SERVLET_CONTEXTPATH:/nacos&#125;</span><br><span class="hljs-attr">server.tomcat.accesslog.max-days</span>=<span class="hljs-string">30</span><br><span class="hljs-attr">server.tomcat.accesslog.pattern</span>=<span class="hljs-string">%h %l %u %t &quot;%r&quot; %s %b %D %&#123;User-Agent&#125;i %&#123;Request-Source&#125;i</span><br><span class="hljs-attr">server.tomcat.accesslog.enabled</span>=<span class="hljs-string">$&#123;TOMCAT_ACCESSLOG_ENABLED:false&#125;</span><br><span class="hljs-attr">server.tomcat.basedir</span>=<span class="hljs-string">file:.</span><br><span class="hljs-comment">#*************** Config Module Related Configurations ***************#</span><br><span class="hljs-comment">### Deprecated configuration property, it is recommended to use `spring.sql.init.platform` replaced.</span><br><span class="hljs-comment">#spring.datasource.platform=$&#123;SPRING_DATASOURCE_PLATFORM:&#125;</span><br><span class="hljs-attr">spring.sql.init.platform</span>=<span class="hljs-string">$&#123;SPRING_DATASOURCE_PLATFORM:mysql&#125;</span><br><span class="hljs-attr">nacos.cmdb.dumpTaskInterval</span>=<span class="hljs-string">3600</span><br><span class="hljs-attr">nacos.cmdb.eventTaskInterval</span>=<span class="hljs-string">10</span><br><span class="hljs-attr">nacos.cmdb.labelTaskInterval</span>=<span class="hljs-string">300</span><br><span class="hljs-attr">nacos.cmdb.loadDataAtStart</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">db.num</span>=<span class="hljs-string">$&#123;MYSQL_DATABASE_NUM:1&#125;</span><br><span class="hljs-attr">db.url.0</span>=<span class="hljs-string">jdbc:mysql://$&#123;MYSQL_SERVICE_HOST:192.168.80.108&#125;:$&#123;MYSQL_SERVICE_PORT:3306&#125;/$&#123;MYSQL_SERVICE_DB_NAME:nacos&#125;?$&#123;MYSQL_SERVICE_DB_PARAM:characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false&#125;</span><br><span class="hljs-attr">db.user.0</span>=<span class="hljs-string">$&#123;MYSQL_SERVICE_USER:root&#125;</span><br><span class="hljs-attr">db.password.0</span>=<span class="hljs-string">$&#123;MYSQL_SERVICE_PASSWORD:123456&#125;</span><br><span class="hljs-comment">## DB connection pool settings</span><br><span class="hljs-attr">db.pool.config.connectionTimeout</span>=<span class="hljs-string">$&#123;DB_POOL_CONNECTION_TIMEOUT:30000&#125;</span><br><span class="hljs-attr">db.pool.config.validationTimeout</span>=<span class="hljs-string">10000</span><br><span class="hljs-attr">db.pool.config.maximumPoolSize</span>=<span class="hljs-string">20</span><br><span class="hljs-attr">db.pool.config.minimumIdle</span>=<span class="hljs-string">2</span><br><span class="hljs-comment">### The auth system to use, currently only &#x27;nacos&#x27; and &#x27;ldap&#x27; is supported:</span><br><span class="hljs-attr">nacos.core.auth.system.type</span>=<span class="hljs-string">$&#123;NACOS_AUTH_SYSTEM_TYPE:nacos&#125;</span><br><span class="hljs-comment">### worked when nacos.core.auth.system.type=nacos</span><br><span class="hljs-comment">### The token expiration in seconds:</span><br><span class="hljs-attr">nacos.core.auth.plugin.nacos.token.expire.seconds</span>=<span class="hljs-string">$&#123;NACOS_AUTH_TOKEN_EXPIRE_SECONDS:15638400&#125;</span><br><span class="hljs-comment">### The default token:</span><br><span class="hljs-attr">nacos.core.auth.enable</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">nacos.core.auth.plugin.nacos.token.secret.key</span>=<span class="hljs-string">$&#123;NACOS_AUTH_TOKEN:SecretKey012345678901234567890123456789012345678901234567890123456789&#125;</span><br><span class="hljs-comment">### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.</span><br><span class="hljs-attr">nacos.core.auth.caching.enabled</span>=<span class="hljs-string">$&#123;NACOS_AUTH_CACHE_ENABLE:false&#125;</span><br><span class="hljs-attr">nacos.core.auth.enable.userAgentAuthWhite</span>=<span class="hljs-string">$&#123;NACOS_AUTH_USER_AGENT_AUTH_WHITE_ENABLE:false&#125;</span><br><span class="hljs-attr">nacos.core.auth.server.identity.key</span>=<span class="hljs-string">$&#123;NACOS_AUTH_IDENTITY_KEY:serverIdentity&#125;</span><br><span class="hljs-attr">nacos.core.auth.server.identity.value</span>=<span class="hljs-string">$&#123;NACOS_AUTH_IDENTITY_VALUE:security&#125;</span><br><span class="hljs-comment">## spring security config</span><br><span class="hljs-comment">### turn off security</span><br><span class="hljs-attr">nacos.security.ignore.urls</span>=<span class="hljs-string">$&#123;NACOS_SECURITY_IGNORE_URLS:/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**&#125;</span><br><span class="hljs-comment"># metrics for elastic search</span><br><span class="hljs-attr">management.metrics.export.elastic.enabled</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">management.metrics.export.influx.enabled</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">nacos.naming.distro.taskDispatchThreadCount</span>=<span class="hljs-string">10</span><br><span class="hljs-attr">nacos.naming.distro.taskDispatchPeriod</span>=<span class="hljs-string">200</span><br><span class="hljs-attr">nacos.naming.distro.batchSyncKeyCount</span>=<span class="hljs-string">1000</span><br><span class="hljs-attr">nacos.naming.distro.initDataRatio</span>=<span class="hljs-string">0.9</span><br><span class="hljs-attr">nacos.naming.distro.syncRetryDelay</span>=<span class="hljs-string">5000</span><br><span class="hljs-attr">nacos.naming.data.warmup</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">nacos.console.ui.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">nacos.core.param.check.enabled</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><p>运行nacos镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -it \<br>--name nacos-scorpio \<br>--restart=always \<br>--privileged=true \<br>-p 8848:8848 -p 9848:9848 -p 9849:9849 \<br>-e MODE=standalone \<br>-e JVM_XMS=256m \<br>-e JVM_XMX=256m \<br>--env NACOS_AUTH_ENABLE=true \<br>-v /usr/local/src/nacos/conf:/home/nacos/conf \<br>-v /usr/local/src/nacos/logs:/home/nacos/logs \<br>-v /usr/local/src/nacos/data:/home/nacos/data \<br>-d nacos/nacos-server<br></code></pre></td></tr></table></figure><p>可选参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">--env SPRING_DATASOURCE_PLATFORM=mysql \<br>--env MYSQL_SERVICE_HOST=192.168.80.108 \<br>--env MYSQL_SERVICE_PORT=3306 \<br>--env MYSQL_SERVICE_DB_NAME=nacos \<br>--env MYSQL_SERVICE_USER=root \<br>--env MYSQL_SERVICE_PASSWORD=123456 \<br></code></pre></td></tr></table></figure><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>下载二进制包</p><p><a href="https://nacos.io/download/nacos-server/">https://nacos.io/download/nacos-server/</a></p><p><img src="/img/nacos-install/win-nacos-1.png" alt="win-nacos-1"></p><p>解压到任意位置后，在nacos目录&#x2F;config文件夹下找到配置文件</p><p><img src="/img/nacos-install/win-nacos-2.png" alt="win-nacos-2"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#</span><br><span class="hljs-comment"># Copyright 1999-2021 Alibaba Group Holding Ltd.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment"># you may not use this file except in compliance with the License.</span><br><span class="hljs-comment"># You may obtain a copy of the License at</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#      http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"># See the License for the specific language governing permissions and</span><br><span class="hljs-comment"># limitations under the License.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#*************** Spring Boot Related Configurations ***************#</span><br><span class="hljs-comment">### Default web context path:</span><br><span class="hljs-attr">server.servlet.contextPath</span>=<span class="hljs-string">/nacos</span><br><span class="hljs-comment">### Include message field</span><br><span class="hljs-attr">server.error.include-message</span>=<span class="hljs-string">ALWAYS</span><br><span class="hljs-comment">### Default web server port:</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8848</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#*************** Network Related Configurations ***************#</span><br><span class="hljs-comment">### If prefer hostname over ip for Nacos server addresses in cluster.conf:</span><br><span class="hljs-comment"># nacos.inetutils.prefer-hostname-over-ip=false</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### Specify local server&#x27;s IP:</span><br><span class="hljs-comment"># nacos.inetutils.ip-address=</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#*************** Config Module Related Configurations ***************#</span><br><span class="hljs-comment">### If use MySQL as datasource:</span><br><span class="hljs-comment">### Deprecated configuration property, it is recommended to use `spring.sql.init.platform` replaced.</span><br><span class="hljs-attr">spring.datasource.platform</span>=<span class="hljs-string">mysql</span><br><span class="hljs-comment"># spring.sql.init.platform=mysql</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### Count of DB:</span><br><span class="hljs-attr">db.num</span>=<span class="hljs-string">1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### Connect URL of DB:</span><br><span class="hljs-attr">db.url.0</span>=<span class="hljs-string">jdbc:mysql://192.168.80.108:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span><br><span class="hljs-attr">db.user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">db.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### Connection pool configuration: hikariCP</span><br><span class="hljs-attr">db.pool.config.connectionTimeout</span>=<span class="hljs-string">30000</span><br><span class="hljs-attr">db.pool.config.validationTimeout</span>=<span class="hljs-string">10000</span><br><span class="hljs-attr">db.pool.config.maximumPoolSize</span>=<span class="hljs-string">20</span><br><span class="hljs-attr">db.pool.config.minimumIdle</span>=<span class="hljs-string">2</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### the maximum retry times for push</span><br><span class="hljs-attr">nacos.config.push.maxRetryTime</span>=<span class="hljs-string">50</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#*************** Naming Module Related Configurations ***************#</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### If enable data warmup. If set to false, the server would accept request without local data preparation:</span><br><span class="hljs-comment"># nacos.naming.data.warmup=true</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### If enable the instance auto expiration, kind like of health check of instance:</span><br><span class="hljs-comment"># nacos.naming.expireInstance=true</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### Add in 2.0.0</span><br><span class="hljs-comment">### The interval to clean empty service, unit: milliseconds.</span><br><span class="hljs-comment"># nacos.naming.clean.empty-service.interval=60000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### The expired time to clean empty service, unit: milliseconds.</span><br><span class="hljs-comment"># nacos.naming.clean.empty-service.expired-time=60000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### The interval to clean expired metadata, unit: milliseconds.</span><br><span class="hljs-comment"># nacos.naming.clean.expired-metadata.interval=5000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### The expired time to clean metadata, unit: milliseconds.</span><br><span class="hljs-comment"># nacos.naming.clean.expired-metadata.expired-time=60000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### The delay time before push task to execute from service changed, unit: milliseconds.</span><br><span class="hljs-comment"># nacos.naming.push.pushTaskDelay=500</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### The timeout for push task execute, unit: milliseconds.</span><br><span class="hljs-comment"># nacos.naming.push.pushTaskTimeout=5000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### The delay time for retrying failed push task, unit: milliseconds.</span><br><span class="hljs-comment"># nacos.naming.push.pushTaskRetryDelay=1000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### Since 2.0.3</span><br><span class="hljs-comment">### The expired time for inactive client, unit: milliseconds.</span><br><span class="hljs-comment"># nacos.naming.client.expired.time=180000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#*************** CMDB Module Related Configurations ***************#</span><br><span class="hljs-comment">### The interval to dump external CMDB in seconds:</span><br><span class="hljs-comment"># nacos.cmdb.dumpTaskInterval=3600</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### The interval of polling data change event in seconds:</span><br><span class="hljs-comment"># nacos.cmdb.eventTaskInterval=10</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### The interval of loading labels in seconds:</span><br><span class="hljs-comment"># nacos.cmdb.labelTaskInterval=300</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### If turn on data loading task:</span><br><span class="hljs-comment"># nacos.cmdb.loadDataAtStart=false</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#***********Metrics for tomcat **************************#</span><br><span class="hljs-attr">server.tomcat.mbeanregistry.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#***********Expose prometheus and health **************************#</span><br><span class="hljs-comment">#management.endpoints.web.exposure.include=prometheus,health</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### Metrics for elastic search</span><br><span class="hljs-attr">management.metrics.export.elastic.enabled</span>=<span class="hljs-string">false</span><br><span class="hljs-comment">#management.metrics.export.elastic.host=http://localhost:9200</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### Metrics for influx</span><br><span class="hljs-attr">management.metrics.export.influx.enabled</span>=<span class="hljs-string">false</span><br><span class="hljs-comment">#management.metrics.export.influx.db=springboot</span><br><span class="hljs-comment">#management.metrics.export.influx.uri=http://localhost:8086</span><br><span class="hljs-comment">#management.metrics.export.influx.auto-create-db=true</span><br><span class="hljs-comment">#management.metrics.export.influx.consistency=one</span><br><span class="hljs-comment">#management.metrics.export.influx.compressed=true</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#*************** Access Log Related Configurations ***************#</span><br><span class="hljs-comment">### If turn on the access log:</span><br><span class="hljs-attr">server.tomcat.accesslog.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### file name pattern, one file per hour</span><br><span class="hljs-attr">server.tomcat.accesslog.rotate</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">server.tomcat.accesslog.file-date-format</span>=<span class="hljs-string">.yyyy-MM-dd-HH</span><br><span class="hljs-comment">### The access log pattern:</span><br><span class="hljs-attr">server.tomcat.accesslog.pattern</span>=<span class="hljs-string">%h %l %u %t &quot;%r&quot; %s %b %D %&#123;User-Agent&#125;i %&#123;Request-Source&#125;i</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### The directory of access log:</span><br><span class="hljs-attr">server.tomcat.basedir</span>=<span class="hljs-string">file:.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#*************** Access Control Related Configurations ***************#</span><br><span class="hljs-comment">### If enable spring security, this option is deprecated in 1.2.0:</span><br><span class="hljs-comment">#spring.security.enabled=false</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### The ignore urls of auth</span><br><span class="hljs-attr">nacos.security.ignore.urls</span>=<span class="hljs-string">/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-ui/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### The auth system to use, currently only &#x27;nacos&#x27; and &#x27;ldap&#x27; is supported:</span><br><span class="hljs-attr">nacos.core.auth.system.type</span>=<span class="hljs-string">nacos</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### If turn on auth system:</span><br><span class="hljs-attr">nacos.core.auth.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.</span><br><span class="hljs-attr">nacos.core.auth.caching.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### Since 1.4.1, Turn on/off white auth for user-agent: nacos-server, only for upgrade from old version.</span><br><span class="hljs-attr">nacos.core.auth.enable.userAgentAuthWhite</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### Since 1.4.1, worked when nacos.core.auth.enabled=true and nacos.core.auth.enable.userAgentAuthWhite=false.</span><br><span class="hljs-comment">### The two properties is the white list for auth and used by identity the request from other server.</span><br><span class="hljs-attr">nacos.core.auth.server.identity.key</span>=<span class="hljs-string">serverIdentity</span><br><span class="hljs-attr">nacos.core.auth.server.identity.value</span>=<span class="hljs-string">security</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### worked when nacos.core.auth.system.type=nacos</span><br><span class="hljs-comment">### The token expiration in seconds:</span><br><span class="hljs-attr">nacos.core.auth.plugin.nacos.token.cache.enable</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">nacos.core.auth.plugin.nacos.token.expire.seconds</span>=<span class="hljs-string">15638400</span><br><span class="hljs-comment">### The default token (Base64 String):</span><br><span class="hljs-attr">nacos.core.auth.plugin.nacos.token.secret.key</span>=<span class="hljs-string">SecretKey012345678901234567890123456789012345678901234567890123456789</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### worked when nacos.core.auth.system.type=ldap，&#123;0&#125; is Placeholder,replace login username</span><br><span class="hljs-comment">#nacos.core.auth.ldap.url=ldap://localhost:389</span><br><span class="hljs-comment">#nacos.core.auth.ldap.basedc=dc=example,dc=org</span><br><span class="hljs-comment">#nacos.core.auth.ldap.userDn=cn=admin,$&#123;nacos.core.auth.ldap.basedc&#125;</span><br><span class="hljs-comment">#nacos.core.auth.ldap.password=admin</span><br><span class="hljs-comment">#nacos.core.auth.ldap.userdn=cn=&#123;0&#125;,dc=example,dc=org</span><br><span class="hljs-comment">#nacos.core.auth.ldap.filter.prefix=uid</span><br><span class="hljs-comment">#nacos.core.auth.ldap.case.sensitive=true</span><br><span class="hljs-comment">#nacos.core.auth.ldap.ignore.partial.result.exception=false</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#*************** Control Plugin Related Configurations ***************#</span><br><span class="hljs-comment"># plugin type</span><br><span class="hljs-comment">#nacos.plugin.control.manager.type=nacos</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># local control rule storage dir, default $&#123;nacos.home&#125;/data/connection and $&#123;nacos.home&#125;/data/tps</span><br><span class="hljs-comment">#nacos.plugin.control.rule.local.basedir=$&#123;nacos.home&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># external control rule storage type, if exist</span><br><span class="hljs-comment">#nacos.plugin.control.rule.external.storage=</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#*************** Config Change Plugin Related Configurations ***************#</span><br><span class="hljs-comment"># webhook</span><br><span class="hljs-comment">#nacos.core.config.plugin.webhook.enabled=false</span><br><span class="hljs-comment"># It is recommended to use EB https://help.aliyun.com/document_detail/413974.html</span><br><span class="hljs-comment">#nacos.core.config.plugin.webhook.url=http://localhost:8080/webhook/send?token=***</span><br><span class="hljs-comment"># The content push max capacity ,byte</span><br><span class="hljs-comment">#nacos.core.config.plugin.webhook.contentMaxCapacity=102400</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># whitelist</span><br><span class="hljs-comment">#nacos.core.config.plugin.whitelist.enabled=false</span><br><span class="hljs-comment"># The import file suffixs</span><br><span class="hljs-comment">#nacos.core.config.plugin.whitelist.suffixs=xml,text,properties,yaml,html</span><br><span class="hljs-comment"># fileformatcheck,which validate the import file of type and content</span><br><span class="hljs-comment">#nacos.core.config.plugin.fileformatcheck.enabled=false</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#*************** Istio Related Configurations ***************#</span><br><span class="hljs-comment">### If turn on the MCP server:</span><br><span class="hljs-attr">nacos.istio.mcp.server.enabled</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#*************** Core Related Configurations ***************#</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### set the WorkerID manually</span><br><span class="hljs-comment"># nacos.core.snowflake.worker-id=</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### Member-MetaData</span><br><span class="hljs-comment"># nacos.core.member.meta.site=</span><br><span class="hljs-comment"># nacos.core.member.meta.adweight=</span><br><span class="hljs-comment"># nacos.core.member.meta.weight=</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### MemberLookup</span><br><span class="hljs-comment">### Addressing pattern category, If set, the priority is highest</span><br><span class="hljs-comment"># nacos.core.member.lookup.type=[file,address-server]</span><br><span class="hljs-comment">## Set the cluster list with a configuration file or command-line argument</span><br><span class="hljs-comment"># nacos.member.list=192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809</span><br><span class="hljs-comment">## for AddressServerMemberLookup</span><br><span class="hljs-comment"># Maximum number of retries to query the address server upon initialization</span><br><span class="hljs-comment"># nacos.core.address-server.retry=5</span><br><span class="hljs-comment">## Server domain name address of [address-server] mode</span><br><span class="hljs-comment"># address.server.domain=jmenv.tbsite.net</span><br><span class="hljs-comment">## Server port of [address-server] mode</span><br><span class="hljs-comment"># address.server.port=8080</span><br><span class="hljs-comment">## Request address of [address-server] mode</span><br><span class="hljs-comment"># address.server.url=/nacos/serverlist</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#*************** JRaft Related Configurations ***************#</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### Sets the Raft cluster election timeout, default value is 5 second</span><br><span class="hljs-comment"># nacos.core.protocol.raft.data.election_timeout_ms=5000</span><br><span class="hljs-comment">### Sets the amount of time the Raft snapshot will execute periodically, default is 30 minute</span><br><span class="hljs-comment"># nacos.core.protocol.raft.data.snapshot_interval_secs=30</span><br><span class="hljs-comment">### raft internal worker threads</span><br><span class="hljs-comment"># nacos.core.protocol.raft.data.core_thread_num=8</span><br><span class="hljs-comment">### Number of threads required for raft business request processing</span><br><span class="hljs-comment"># nacos.core.protocol.raft.data.cli_service_thread_num=4</span><br><span class="hljs-comment">### raft linear read strategy. Safe linear reads are used by default, that is, the Leader tenure is confirmed by heartbeat</span><br><span class="hljs-comment"># nacos.core.protocol.raft.data.read_index_type=ReadOnlySafe</span><br><span class="hljs-comment">### rpc request timeout, default 5 seconds</span><br><span class="hljs-comment"># nacos.core.protocol.raft.data.rpc_request_timeout_ms=5000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#*************** Distro Related Configurations ***************#</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### Distro data sync delay time, when sync task delayed, task will be merged for same data key. Default 1 second.</span><br><span class="hljs-comment"># nacos.core.protocol.distro.data.sync.delayMs=1000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### Distro data sync timeout for one sync data, default 3 seconds.</span><br><span class="hljs-comment"># nacos.core.protocol.distro.data.sync.timeoutMs=3000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### Distro data sync retry delay time when sync data failed or timeout, same behavior with delayMs, default 3 seconds.</span><br><span class="hljs-comment"># nacos.core.protocol.distro.data.sync.retryDelayMs=3000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### Distro data verify interval time, verify synced data whether expired for a interval. Default 5 seconds.</span><br><span class="hljs-comment"># nacos.core.protocol.distro.data.verify.intervalMs=5000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### Distro data verify timeout for one verify, default 3 seconds.</span><br><span class="hljs-comment"># nacos.core.protocol.distro.data.verify.timeoutMs=3000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### Distro data load retry delay when load snapshot data failed, default 30 seconds.</span><br><span class="hljs-comment"># nacos.core.protocol.distro.data.load.retryDelayMs=30000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### enable to support prometheus service discovery</span><br><span class="hljs-comment">#nacos.prometheus.metrics.enabled=true</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### Since 2.3</span><br><span class="hljs-comment">#*************** Grpc Configurations ***************#</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">## sdk grpc(between nacos server and client) configuration</span><br><span class="hljs-comment">## Sets the maximum message size allowed to be received on the server.</span><br><span class="hljs-comment">#nacos.remote.server.grpc.sdk.max-inbound-message-size=10485760</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">## Sets the time(milliseconds) without read activity before sending a keepalive ping. The typical default is two hours.</span><br><span class="hljs-comment">#nacos.remote.server.grpc.sdk.keep-alive-time=7200000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">## Sets a time(milliseconds) waiting for read activity after sending a keepalive ping. Defaults to 20 seconds.</span><br><span class="hljs-comment">#nacos.remote.server.grpc.sdk.keep-alive-timeout=20000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">## Sets a time(milliseconds) that specify the most aggressive keep-alive time clients are permitted to configure. The typical default is 5 minutes</span><br><span class="hljs-comment">#nacos.remote.server.grpc.sdk.permit-keep-alive-time=300000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">## cluster grpc(inside the nacos server) configuration</span><br><span class="hljs-comment">#nacos.remote.server.grpc.cluster.max-inbound-message-size=10485760</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">## Sets the time(milliseconds) without read activity before sending a keepalive ping. The typical default is two hours.</span><br><span class="hljs-comment">#nacos.remote.server.grpc.cluster.keep-alive-time=7200000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">## Sets a time(milliseconds) waiting for read activity after sending a keepalive ping. Defaults to 20 seconds.</span><br><span class="hljs-comment">#nacos.remote.server.grpc.cluster.keep-alive-timeout=20000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">## Sets a time(milliseconds) that specify the most aggressive keep-alive time clients are permitted to configure. The typical default is 5 minutes</span><br><span class="hljs-comment">#nacos.remote.server.grpc.cluster.permit-keep-alive-time=300000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">## open nacos default console ui</span><br><span class="hljs-comment">#nacos.console.ui.enabled=true</span><br></code></pre></td></tr></table></figure><p>在nacos安装目录&#x2F;bin文件夹下打开管理员控制台执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">startup.cmd -m standalone<br></code></pre></td></tr></table></figure><p><img src="/img/nacos-install/win-nacos-3.png" alt="win-nacos-3"></p>]]></content>
    
    
    <categories>
      
      <category>DevTool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安装教程</tag>
      
      <tag>Windows</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql安装教程</title>
    <link href="/2024/07/19/Mysql%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <url>/2024/07/19/Mysql%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -qa | grep mariadb<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -e --nodeps mariadb-libs-5.5.65-1.el7.x86_64<br></code></pre></td></tr></table></figure><p>1、添加mysql仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -ivh https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm<br></code></pre></td></tr></table></figure><p><img src="/img/mysql/mysql.png" alt="mysql"></p><p>2、查看仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum repolist all | grep mysql | grep enabled<br></code></pre></td></tr></table></figure><p>3、安装mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install mysql-community-server<br></code></pre></td></tr></table></figure><p>4、启动mysql并设置开机自启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start mysqld<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl enable mysqld<br></code></pre></td></tr></table></figure><p>5、修改mysql初始化密码</p><p>获取到初始密码，登录mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /var/log/mysqld.log | grep -i &#x27;temporary password&#x27;<br></code></pre></td></tr></table></figure><p>重新设置密码规则</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">set global validate_password_policy=0;<br>set global validate_password_length=4;<br>alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;<br></code></pre></td></tr></table></figure><p>设置新密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">use mysql;<br>UPDATE user SET authentication_string=password(&#x27;123456&#x27;) WHERE user=&#x27;root&#x27;;<br></code></pre></td></tr></table></figure><p>允许远程访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27; with grant option;<br></code></pre></td></tr></table></figure><p>刷新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">flush privileges; <br></code></pre></td></tr></table></figure><p>6、设置数据库编码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/my.cnf<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[client]<br>default-character-set=utf8<br><br>[mysql]<br>default-character-set=utf8<br><br>[mysqld]<br>collation-server = utf8_unicode_ci<br>init-connect=&#x27;SET NAMES utf8&#x27;<br>character-set-server = utf8<br></code></pre></td></tr></table></figure><p>7、开启端口访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">firewall-cmd --zone=public --add-port=3306/tcp --permanent<br>systemctl restart firewalld.service<br>firewall-cmd --zone=public --list-ports<br></code></pre></td></tr></table></figure><p>8、重启mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart mysqld<br></code></pre></td></tr></table></figure><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull mysql:latest<br></code></pre></td></tr></table></figure><p>启动镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -p 3306:3306 --name mysql-scorpio \<br>--restart=always \<br>--privileged=true \<br>-v /usr/local/src/mysql/log:/var/log/mysql \<br>-v /usr/local/src/mysql/data:/var/lib/mysql \<br>-v /usr/local/src/mysql/conf:/etc/mysql/conf.d \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>-d mysql:latest \<br>--character-set-server=utf8mb4 \<br>--collation-server=utf8mb4_unicode_ci<br></code></pre></td></tr></table></figure><p>命令解析</p><blockquote><p> -p 3306:3306：指定宿主机端口与容器端口映射关系</p><p> –name mysql-scorpio：创建的容器名称</p><p> –restart&#x3D;always：总是跟随docker启动</p><p> –privileged&#x3D;true：获取宿主机root权限<br> -v &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql：映射日志目录，宿主机:容器<br> -v &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql：映射数据目录，宿主机:容器<br> -v &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql：映射配置目录，宿主机:容器<br> -v &#x2F;etc&#x2F;localtime:&#x2F;etc&#x2F;localtime:ro：让容器的时钟与宿主机时钟同步，避免时区的问题，ro是read only的意思，就是只读。<br> -e MYSQL_ROOT_PASSWORD&#x3D;123456：指定mysql环境变量，root用户的密码为123456</p><p> -d mysql:latest：后台运行mysql容器，版本是latest。</p><p> –character-set-server&#x3D;utf8mb4 ：设置mysql-server编码<br> –collation-server&#x3D;utf8mb4_unicode_ci设置mysql-server的collation-server编码</p></blockquote><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>检测并删除已存在的MySQL服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sc query mysql<br></code></pre></td></tr></table></figure><p><strong>无结果，说明未安装过mysql或者已经卸载mysql服务，接下来直接安装mysql即可，否则需要删除之前安装的mysql</strong></p><p>若存在MySQL服务，则需要进行删除操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">net stop mysql<br></code></pre></td></tr></table></figure><p><strong>ps：删除服务之前，必须先进行停止操作，否则无法执行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sc delete mysql<br></code></pre></td></tr></table></figure><p>检查是否删除成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sc query mysql<br></code></pre></td></tr></table></figure><p><strong>无结果，说明已删除</strong></p><p>下载MySQL安装包</p><p><a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><p><img src="/img/mysql/win-mysql-1.png" alt="win-mysql-1"></p><p>运行xxx.msi程序进行安装，点击next下一步</p><p><img src="/img/mysql/win-mysql-2.png" alt="win-mysql-2"></p><p>点击next下一步</p><p><img src="/img/mysql/win-mysql-3.png" alt="win-mysql-3"></p><p>选择自定义安装</p><p><img src="/img/mysql/win-mysql-4.png" alt="win-mysql-4"></p><p>自定义安装位置后点击next下一步</p><p><img src="/img/mysql/win-mysql-5.png" alt="win-mysql-5"></p><p>点击Install进行安装</p><p><img src="/img/mysql/win-mysql-6.png" alt="win-mysql-6"></p><p>勾选配置项后点击finish</p><p><img src="/img/mysql/win-mysql-7.png" alt="win-mysql-7"></p><p>点击next下一步</p><p><img src="/img/mysql/win-mysql-8.png" alt="win-mysql-8"></p><p>自定义data文件夹位置，点击next下一步</p><p><img src="/img/mysql/win-mysql-9.png" alt="win-mysql-9"></p><p>点击next下一步</p><p><img src="/img/mysql/win-mysql-10.png" alt="image\win-mysql-10"></p><p>设置root密码</p><p><img src="/img/mysql/win-mysql-11.png" alt="win-mysql-11"></p><p>设置MySQL服务名，点击next下一步</p><p><img src="/img/mysql/win-mysql-12.png" alt="win-mysql-12"></p><p>设置访问权限</p><p><img src="/img/mysql/win-mysql-13.png" alt="win-mysql-13"></p><p>创建简单示例数据库，点击next下一步</p><p><img src="/img/mysql/win-mysql-14.png" alt="win-mysql-14"></p><p>确认配置项，点击Execute执行</p><p><img src="/img/mysql/win-mysql-15.png" alt="win-mysql-15"></p><p>点击next下一步</p><p><img src="/img/mysql/win-mysql-16.png" alt="win-mysql-16"></p><p>点击finish完成安装</p><p><img src="/img/mysql/win-mysql-17.png" alt="win-mysql-17"></p><p>在系统变量中新建MYSQL_HOME</p><p><img src="/img/mysql/win-mysql-18.png" alt="win-mysql-18"></p><p>在系统变量中找到Path(PATH)变量，点击新建</p><p><img src="/img/mysql/win-mysql-19.png" alt="win-mysql-19"></p><p>连接mysql，测试安装是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysql -uroot -p123456<br></code></pre></td></tr></table></figure><p>开启远程访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">USE mysql;<br>UPDATE user SET Host = &#x27;%&#x27; WHERE User = &#x27;root&#x27;;<br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><p>重启MySQL服务（服务名查看方式：Win+R输入services.msc找到MySQL）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">net stop MySQL84<br>net stop MySQL84<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>DevTool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>安装教程</tag>
      
      <tag>Windows</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis安装教程</title>
    <link href="/2024/07/15/Redis%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <url>/2024/07/15/Redis%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull redis<br></code></pre></td></tr></table></figure><p>新建redis.conf</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs txt"># 是否以守护进程启动 默认：no<br>daemonize no<br># 用于设置Redis绑定的网络接口（网卡）。如果不配置bind，默认情况下Redis监听所有可用的网卡，redis只接受来自绑定网络接口的请求。<br># Redis的配置文件中一般默认有bind 127.0.0.1，只允许本地连接，如果想要被远程访问注释掉bind配置或者bind外网ip即可。<br>bind 0.0.0.0<br># 是否开启保护模式 默认：yes，是否有效会被bind和requirepass配置影响<br>## 当protected-mode为yes<br>### 注释bind和requirepass，redis的保护模式生效，只能通过本地连接<br>### 只注释bind，配置requirepass，redis的保护模式失效，可以通过密码远程连接<br>### 只注释requirepass，redis的保护模式失效，可以通过bind的ip无密码连接<br>## 当protected-mode为no<br>### 无论上面的哪种场景，客户端都可以根据 bind 及 requirepass 实际参数来连接到 redis<br>protected-mode yes<br># redis服务端口 默认：6379<br>port 6379<br># 客户端连接空闲时间单位秒，如果在指定时间内没有操作则会断开连接 默认：0（不超时）<br>timeout 0<br># tcp心跳检测时间单位秒，对访问客户端的一种心跳检测，每个n秒检测一次 默认：0（不检测），建议设置成60<br>tcp-keepalive 0<br># 客户端最大连接数，设置redis同时可以与多少个客户端进行连接 默认：10000<br>maxclients 10000<br># 日志级别配置 默认：notice<br>## debug：能设置的最高的日志级别，打印所有信息，包括debug信息。<br>## verbose：打印除了debug日志之外的所有日志。<br>## notice：打印除了debug和verbose级别的所有日志。<br>## warning：仅打印非常重要的信息。<br>loglevel notice<br># 日志文件输出路径配置<br>## 该路径默认为空。可以根据自己需要把日志文件输出到指定位置。<br>logfile &quot;/etc/redis.log&quot;<br># 数据库数量配置 默认：16<br>databases 16<br># 连接密码配置 默认无密码<br>requirepass 123456<br><br># 持久化数据存储在本地的文件名称 默认：dump.rdb<br>dbfilename dump.rdb<br># 持久化数据存储在本地的路径，默认：./（当前工作目录）<br>dir /data<br><br># 用于设置RDB持久化的时间间隔和条件<br>## 表示每900秒内有至少1个写操作就保存一次RDB文件<br>save 900 1<br>## 表示每300秒内有至少10个写操作就保存一次RDB文件<br>save 300 10<br>## 表示每10秒内有至少1000个写操作就保存一次RDB文件<br>save 60 10000<br><br># 当RDB持久化时出现错误无法继续时，是否阻塞客户端变更操作，错误可能因为磁盘已满/磁盘故障/OS级别异常等 默认：yes<br>stop-writes-on-bgsave-error yes  <br># 是否启用RDB文件压缩，默认: yes，压缩往往意味着额外的cpu消耗，同时也意味这较小的文件尺寸以及较短的网络传输时间  <br>rdbcompression yes  <br><br># 是否开启AOP 默认：no<br>appendonly yes  <br><br># 指定AOF文件名称  <br>appendfilename appendonly.aof  <br><br># 用于设置AOF文件的同步策略 默认：everysec<br>## 可以选择&quot;always&quot;、&quot;everysec&quot;或&quot;no&quot;。always表示每次写入都同步，everysec表示每秒同步一次，no表示由操作系统决定何时同步<br>appendfsync everysec  <br><br># 用于设置自动AOF重写的阈值。当AOF文件的扩展比例超过该值时，Redis会自动执行重写操作。默认值为100，表示当AOF文件的大小是上一次重写后大小的一倍时触发重写。  <br>auto-aof-rewrite-percentage 100  <br><br># 用于设置自动AOF重写的最小大小。只有在AOF文件的大小大于该值时，才会执行重写操作。默认值为64MB，建议512mb<br>auto-aof-rewrite-min-size 64mb  <br><br># 用于设置在执行AOF文件重写时是否禁用同步。如果设置为yes，则在进行重写时不会进行同步操作，默认：no<br>no-appendfsync-on-rewrite no  <br><br># 用于设置在加载AOF文件时是否允许Redis忽略出现错误的命令。如果设置为&quot;yes&quot;，则忽略错误；如果设置为&quot;no&quot;，则不允许加载出现错误的AOF文件。默认：yes<br>aof-load-truncated yes<br><br># 用于设置AOF文件的开头是否包含RDB格式的部分。如果设置为&quot;yes&quot;，则在AOF文件的开头会先保存一份RDB格式的数据，这有助于加速数据加载。默认：no<br>aof-use-rdb-preamble no<br><br># key过期监听 默认：&quot;&quot;（关闭），将notify-keyspace-events设置为Ex代表开启<br>notify-keyspace-events Ex<br></code></pre></td></tr></table></figure><p>指定配置文件启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -it \<br>--name redis-scorpio \<br>--restart=always \<br>--privileged=true \<br>-p 6379:6379 \<br>-v /usr/local/src/redis/conf/redis.conf:/etc/redis/redis.conf \<br>-v /usr/local/src/redis/data/:/data \<br>-v /usr/local/src/redis/log/redis.log:/etc/redis.log \<br>-d redis:latest \<br>/etc/redis/redis.conf<br></code></pre></td></tr></table></figure><p>命令解析</p><blockquote><p> –name redis-scorpio：创建的容器名称</p><p> –restart&#x3D;always：总是跟随docker启动</p><p> –privileged&#x3D;true：获取宿主机root权限</p><p> -p 6379:6379：指定宿主机端口与容器端口映射关系</p><p> -v &#x2F;usr&#x2F;local&#x2F;src&#x2F;redis&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf：映射日志目录，宿主机:容器<br> -v &#x2F;usr&#x2F;local&#x2F;src&#x2F;redis&#x2F;data&#x2F;:&#x2F;data：映射数据目录，宿主机:容器<br> -v &#x2F;usr&#x2F;local&#x2F;src&#x2F;redis&#x2F;log&#x2F;redis.log:&#x2F;etc&#x2F;redis.log：映射配置目录，宿主机:容器</p><p> -d redis:latest：后台运行mysql容器，版本是latest</p></blockquote><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>下载压缩包</p><p><a href="https://github.com/tporadowski/redis/releases/download/v5.0.14.1/Redis-x64-5.0.14.1.zip">https://github.com/tporadowski/redis/releases/download/v5.0.14.1/Redis-x64-5.0.14.1.zip</a></p><p>修改redis.windows.conf</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs txt"># 是否以守护进程启动 默认：no<br>daemonize no<br># 用于设置Redis绑定的网络接口（网卡）。如果不配置bind，默认情况下Redis监听所有可用的网卡，redis只接受来自绑定网络接口的请求。<br># Redis的配置文件中一般默认有bind 127.0.0.1，只允许本地连接，如果想要被远程访问注释掉bind配置或者bind外网ip即可。<br>bind 0.0.0.0<br># 是否开启保护模式 默认：yes，是否有效会被bind和requirepass配置影响<br>## 当protected-mode为yes<br>### 注释bind和requirepass，redis的保护模式生效，只能通过本地连接<br>### 只注释bind，配置requirepass，redis的保护模式失效，可以通过密码远程连接<br>### 只注释requirepass，redis的保护模式失效，可以通过bind的ip无密码连接<br>## 当protected-mode为no<br>### 无论上面的哪种场景，客户端都可以根据 bind 及 requirepass 实际参数来连接到 redis<br>protected-mode yes<br># redis服务端口 默认：6379<br>port 6379<br># 客户端连接空闲时间单位秒，如果在指定时间内没有操作则会断开连接 默认：0（不超时）<br>timeout 0<br># tcp心跳检测时间单位秒，对访问客户端的一种心跳检测，每个n秒检测一次 默认：0（不检测），建议设置成60<br>tcp-keepalive 0<br># 客户端最大连接数，设置redis同时可以与多少个客户端进行连接 默认：10000<br>maxclients 10000<br># 日志级别配置 默认：notice<br>## debug：能设置的最高的日志级别，打印所有信息，包括debug信息。<br>## verbose：打印除了debug日志之外的所有日志。<br>## notice：打印除了debug和verbose级别的所有日志。<br>## warning：仅打印非常重要的信息。<br>loglevel notice<br># 日志文件输出路径配置<br>## 该路径默认为空。可以根据自己需要把日志文件输出到指定位置。<br>logfile &quot;/etc/redis.log&quot;<br># 数据库数量配置 默认：16<br>databases 16<br># 连接密码配置 默认无密码<br>requirepass 123456<br><br># 持久化数据存储在本地的文件名称 默认：dump.rdb<br>dbfilename dump.rdb<br># 持久化数据存储在本地的路径，默认：./（当前工作目录）<br>dir /data<br><br># 用于设置RDB持久化的时间间隔和条件<br>## 表示每900秒内有至少1个写操作就保存一次RDB文件<br>save 900 1<br>## 表示每300秒内有至少10个写操作就保存一次RDB文件<br>save 300 10<br>## 表示每10秒内有至少1000个写操作就保存一次RDB文件<br>save 60 10000<br><br># 当RDB持久化时出现错误无法继续时，是否阻塞客户端变更操作，错误可能因为磁盘已满/磁盘故障/OS级别异常等 默认：yes<br>stop-writes-on-bgsave-error yes  <br># 是否启用RDB文件压缩，默认: yes，压缩往往意味着额外的cpu消耗，同时也意味这较小的文件尺寸以及较短的网络传输时间  <br>rdbcompression yes  <br><br># 是否开启AOP 默认：no<br>appendonly yes  <br><br># 指定AOF文件名称  <br>appendfilename appendonly.aof  <br><br># 用于设置AOF文件的同步策略 默认：everysec<br>## 可以选择&quot;always&quot;、&quot;everysec&quot;或&quot;no&quot;。always表示每次写入都同步，everysec表示每秒同步一次，no表示由操作系统决定何时同步<br>appendfsync everysec  <br><br># 用于设置自动AOF重写的阈值。当AOF文件的扩展比例超过该值时，Redis会自动执行重写操作。默认值为100，表示当AOF文件的大小是上一次重写后大小的一倍时触发重写。  <br>auto-aof-rewrite-percentage 100  <br><br># 用于设置自动AOF重写的最小大小。只有在AOF文件的大小大于该值时，才会执行重写操作。默认值为64MB，建议512mb<br>auto-aof-rewrite-min-size 64mb  <br><br># 用于设置在执行AOF文件重写时是否禁用同步。如果设置为yes，则在进行重写时不会进行同步操作，默认：no<br>no-appendfsync-on-rewrite no  <br><br># 用于设置在加载AOF文件时是否允许Redis忽略出现错误的命令。如果设置为&quot;yes&quot;，则忽略错误；如果设置为&quot;no&quot;，则不允许加载出现错误的AOF文件。默认：yes<br>aof-load-truncated yes<br><br># 用于设置AOF文件的开头是否包含RDB格式的部分。如果设置为&quot;yes&quot;，则在AOF文件的开头会先保存一份RDB格式的数据，这有助于加速数据加载。默认：no<br>aof-use-rdb-preamble no<br><br># key过期监听 默认：&quot;&quot;（关闭），将notify-keyspace-events设置为Ex代表开启<br>notify-keyspace-events Ex<br></code></pre></td></tr></table></figure><p>在管理员控制台执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-server.exe  redis.windows.conf<br></code></pre></td></tr></table></figure><p><img src="/img/redis/win-redis-1.png" alt="win-redis-1"></p>]]></content>
    
    
    <categories>
      
      <category>DevTool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安装教程</tag>
      
      <tag>Windows</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven安装教程</title>
    <link href="/2024/07/13/Maven%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <url>/2024/07/13/Maven%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>下载压缩包</p><p><a href="https://dlcdn.apache.org/maven/maven-3/3.9.8/binaries/apache-maven-3.9.8-bin.tar.gz">https://dlcdn.apache.org/maven/maven-3/3.9.8/binaries/apache-maven-3.9.8-bin.tar.gz</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -P /usr/local/src https://dlcdn.apache.org/maven/maven-3/3.9.8/binaries/apache-maven-3.9.8-bin.tar.gz<br></code></pre></td></tr></table></figure><p>放入指定目录（没有就自己创建）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/src/maven<br></code></pre></td></tr></table></figure><p>解压文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf apache-maven-3.6.3-bin.tar.gz<br></code></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/profile<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export MAVEN_HOME=/usr/local/src/apache-maven-3.6.3<br>export PATH=$MAVEN_HOME/bin:$PATH <br></code></pre></td></tr></table></figure><p>刷新配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile<br></code></pre></td></tr></table></figure><p>检查版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn -v<br></code></pre></td></tr></table></figure><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>下载压缩包</p><p><a href="https://dlcdn.apache.org/maven/maven-3/3.9.8/binaries/apache-maven-3.9.8-bin.zip">https://dlcdn.apache.org/maven/maven-3/3.9.8/binaries/apache-maven-3.9.8-bin.zip</a></p><p>解压到自定义目录，设置系统环境变量</p><p><img src="/img/maven/win-maven-1.png" alt="win-maven-1"></p><p>新建系统变量<strong>MAVEN_HOME</strong></p><p><img src="/img/maven/win-maven-2.png" alt="win-maven-2"></p><p>双击或编辑**Path(PATH)**，点击新建，创建以下变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">%</span><span class="language-bash">MAVEN_HOME%/bin</span><br></code></pre></td></tr></table></figure><p><img src="/img/maven/win-maven-3.png" alt="win-maven-3"></p><p>找到**管理控制台(cmd)**，输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn -v<br></code></pre></td></tr></table></figure><p><img src="/img/maven/win-maven-4.png" alt="win-maven-4"></p>]]></content>
    
    
    <categories>
      
      <category>DevTool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>安装教程</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK安装教程</title>
    <link href="/2024/07/12/JDK%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <url>/2024/07/12/JDK%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>下载jdk压缩包</p><p><a href="http://download.macromedia.com/pub/coldfusion/java/java8/8u261/jdk/jdk-8u261-linux-i586.tar.gz">http://download.macromedia.com/pub/coldfusion/java/java8/8u261/jdk/jdk-8u261-linux-i586.tar.gz</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -P /usr/local/src http://download.macromedia.com/pub/coldfusion/java/java8/8u261/jdk/jdk-8u261-linux-i586.tar.gz<br></code></pre></td></tr></table></figure><p>放入到相应jdk目录下（没有就自己创建一个）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/src/jdk<br></code></pre></td></tr></table></figure><p>解压文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar  -zxvf  jdk-8u261-linux-i586.tar.gz<br></code></pre></td></tr></table></figure><p>修改名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv jdk1.8.0_261/ jdk8<br></code></pre></td></tr></table></figure><p>编辑环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/profile<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">export JAVA_HOME=/usr/local/src/jdk8<br>export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br>export PATH=$PATH:$&#123;JAVA_HOME&#125;/bin<br></code></pre></td></tr></table></figure><p>刷新配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile<br></code></pre></td></tr></table></figure><p>测试安装情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -version<br>javac<br></code></pre></td></tr></table></figure><p>如果报错</p><p><img src="/img/jdk/error.png" alt="error"></p><p>解决方案</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install glibc.i686<br>sudo yum install libgcc.i686 --setopt=protected_multilib=false<br></code></pre></td></tr></table></figure><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>下载资源文件</p><p><a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a></p><p>双击安装下载好的jdkxxxx.exe，点击下一步</p><p><img src="/img/jdk/linux-jdk-1.png" alt="linux-jdk-1"></p><p>自定义安装位置，点击下一步</p><p><img src="/img/jdk/linux-jdk-2.png" alt="linux-jdk-2"></p><p>修改或保持不变安装位置，点击下一步</p><p><img src="/img/jdk/linux-jdk-3.png" alt="linux-jdk-3"></p><p>安装完成</p><p><img src="/img/jdk/linux-jdk-4.png" alt="linux-jdk-4"></p><p>找到<strong>系统-高级系统设置</strong>，点击<strong>环境变量</strong></p><p><img src="/img/jdk/linux-jdk-5.png" alt="linux-jdk-5"></p><p>在系统变量点击新建<strong>JAVA_HOME</strong></p><p><img src="/img/jdk/linux-jdk-6.png" alt="linux-jdk-6"></p><p>在系统变量点击新建<strong>CLASS_PATH</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">.;%JAVA_HOME%/lib;%JAVA_HOME%/lib/tools.jar<br></code></pre></td></tr></table></figure><p><img src="/img/jdk/linux-jdk-7.png" alt="linux-jdk-7"></p><p>在系统变量中找到**Path(PATH)**变量，双击或点击编辑，点击新建添加以下两行</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haml"><span class="hljs-tag">%<span class="hljs-selector-tag">JAVA_HOME</span></span>%/bin<br><span class="hljs-tag">%<span class="hljs-selector-tag">JAVA_HOME</span></span>%/jre/bin<br></code></pre></td></tr></table></figure><p><img src="/img/jdk/linux-jdk-8.png" alt="linux-jdk-8"></p><p>找到**系统控制台(cmd)**，运行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -version<br>javac<br></code></pre></td></tr></table></figure><p><img src="/img/jdk/linux-jdk-9.png" alt="linux-jdk-9"></p>]]></content>
    
    
    <categories>
      
      <category>DevTool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>安装教程</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ安装教程</title>
    <link href="/2024/07/11/RabbitMQ%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <url>/2024/07/11/RabbitMQ%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull rabbitmq:management<br></code></pre></td></tr></table></figure><p>启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -it \<br>--restart=always \<br>--privileged=true \<br>-e RABBITMQ_DEFAULT_VHOST=scorpio_vhost  \<br>-e RABBITMQ_DEFAULT_USER=scorpio \<br>-e RABBITMQ_DEFAULT_PASS=123456 \<br>--hostname rabbitmq-scorpio \<br>--name rabbitmq-scorpio \<br>-p 15672:15672 \<br>-p 5672:5672 \<br>-d rabbitmq:management<br></code></pre></td></tr></table></figure><p>命令解析</p><blockquote><p> –restart&#x3D;always：总是跟随docker启动</p><p> –privileged&#x3D;true：获取宿主机root权限</p><p> –name rabbitmq-scorpio：创建的容器名称</p><p> -e RABBITMQ_DEFAULT_VHOST&#x3D;scorpio_vhost：指定rabbitmq环境变量，默认虚拟机</p><p> -e RABBITMQ_DEFAULT_USER&#x3D;scorpio：指定rabbitmq环境变量，默认账号</p><p> -e RABBITMQ_DEFAULT_PASS&#x3D;123456：指定rabbitmq环境变量，默认密码</p><p> –hostname rabbitmq-scorpio：指定rabbitmqhostname</p><p> -p 15672:15672：指定宿主机端口与容器端口映射关系</p><p> -p 5672:5672：指定宿主机端口与容器端口映射关系</p><p> -d rabbitmq:management：后台运行rabbitmq容器，版本是latest。</p></blockquote><p>进入容器内部开启管理控制台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it rabbitmq-scorpio /bin/bash<br></code></pre></td></tr></table></figure><p><img src="/img/rabbitmq/win-rabbitmq-1.png" alt="win-rabbitmq-1"></p><p>下载延时插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -P /usr/local/src/rabbitmq https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/v3.13.0/rabbitmq_delayed_message_exchange-3.13.0.ez<br></code></pre></td></tr></table></figure><p>将延时插件复制到容器内</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker cp /usr/local/src/rabbitmq/rabbitmq_delayed_message_exchange-3.13.0.ez rabbitmq-scorpio:/plugins<br></code></pre></td></tr></table></figure><p>开启延时插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rabbitmq-plugins enable rabbitmq_delayed_message_exchange<br></code></pre></td></tr></table></figure><p><img src="/img/rabbitmq/win-rabbitmq-2.png" alt="win-rabbitmq-2"></p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>下载erlang安装包</p><p><a href="https://www.erlang.org/downloads">https://www.erlang.org/downloads</a></p><p><img src="/img/rabbitmq/win-rabbitmq-3.png" alt="win-rabbitmq-3"></p><p>安装erlang</p><p><img src="/img/rabbitmq/win-rabbitmq-4.png" alt="win-rabbitmq-4"></p><p>自定义安装位置</p><p><img src="/img/rabbitmq/win-rabbitmq-5.png" alt="win-rabbitmq-5"></p><p>点击Install进行安装</p><p><img src="/img/rabbitmq/win-rabbitmq-6.png" alt="win-rabbitmq-6"></p><p>安装完成</p><p><img src="/img/rabbitmq/win-rabbitmq-7.png" alt="win-rabbitmq-7"></p><p>配置ERLANG_HOME变量</p><p><img src="/img/rabbitmq/win-rabbitmq-8.png" alt="win-rabbitmq-8"></p><p>配置Path(PATH)变量</p><p><img src="/img/rabbitmq/win-rabbitmq-9.png" alt="win-rabbitmq-9"></p><p>在管理员控制台执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shel">erl<br></code></pre></td></tr></table></figure><p><img src="/img/rabbitmq/win-rabbitmq-10.png" alt="win-rabbitmq-10"></p><p>下载RabbitMQ安装包</p><p><a href="https://www.rabbitmq.com/docs/download">https://www.rabbitmq.com/docs/download</a></p><p><img src="/img/rabbitmq/win-rabbitmq-11.png" alt="win-rabbitmq-11"></p><p>开始安装</p><p><img src="/img/rabbitmq/win-rabbitmq-12.png" alt="win-rabbitmq-12"></p><p>自定义安装目录</p><p><img src="/img/rabbitmq/win-rabbitmq-13.png" alt="win-rabbitmq-13"></p><p>点击Install进行安装</p><p><img src="/img/rabbitmq/win-rabbitmq-14.png" alt="win-rabbitmq-14"></p><p>点击next下一步</p><p><img src="/img/rabbitmq/win-rabbitmq-15.png" alt="win-rabbitmq-15"></p><p>配置RABBITMQ_HOME变量</p><p><img src="/img/rabbitmq/win-rabbitmq-16.png" alt="win-rabbitmq-16"></p><p>配置Path(PATH)变量</p><p><img src="/img/rabbitmq/win-rabbitmq-17.png" alt="win-rabbitmq-17"></p><p>在管理员控制台执行命令开启管理界面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rabbitmq-plugins enable rabbitmq_management<br></code></pre></td></tr></table></figure><p><img src="/img/rabbitmq/win-rabbitmq-18.png" alt="win-rabbitmq-18"></p><p>下载延时插件</p><p><a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/v3.13.0/rabbitmq_delayed_message_exchange-3.13.0.ez">https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/v3.13.0/rabbitmq_delayed_message_exchange-3.13.0.ez</a></p><p>将延时插件放到安装目录的plugins文件夹下</p><p><img src="/img/rabbitmq/win-rabbitmq-19.png" alt="win-rabbitmq-19"></p><p>在管理员控制台执行命令开启延时插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rabbitmq-plugins enable rabbitmq_delayed_message_exchange<br></code></pre></td></tr></table></figure><p><img src="/img/rabbitmq/win-rabbitmq-20.png" alt="win-rabbitmq-20"></p>]]></content>
    
    
    <categories>
      
      <category>DevTool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安装教程</tag>
      
      <tag>Windows</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Win11优化教程</title>
    <link href="/2024/07/09/Win11%E4%BC%98%E5%8C%96%E6%95%99%E7%A8%8B/"/>
    <url>/2024/07/09/Win11%E4%BC%98%E5%8C%96%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Win11"><a href="#Win11" class="headerlink" title="Win11"></a>Win11</h1><h2 id="设置管理员身份运行"><a href="#设置管理员身份运行" class="headerlink" title="设置管理员身份运行"></a>设置管理员身份运行</h2><p>使用<code>Win+R</code>快捷键打开「运行」对话框，执行<code>regedit</code>打开注册表</p><p><img src="/img/win11/win11-45.png" alt="win11-45"></p><p>将<code>EnableLUA</code>设置为<code>0</code></p><p><img src="/img/win11/win11-44.png" alt="win11-44"></p><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p>管理员身份打开powershell</p><p><img src="/img/win11/win11-1.png" alt="win11-1"></p><p>执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">slmgr -ipk W269N-WFGWX-YVC9B-4J6C9-T83GX<br></code></pre></td></tr></table></figure><p><img src="/img/win11/win11-2.png" alt="win11-2"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">slmgr -skms kms.0t.net.cn<br></code></pre></td></tr></table></figure><p><img src="/img/win11/win11-3.png" alt="win11-3"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">slmgr -ato<br></code></pre></td></tr></table></figure><p><img src="/img/win11/win11-4.png" alt="win11-4"></p><p>检查激活状态</p><p><img src="/img/win11/win11-5.png" alt="win11-5"></p><h2 id="设置桌面图标"><a href="#设置桌面图标" class="headerlink" title="设置桌面图标"></a>设置桌面图标</h2><p>找到设置页面，选择个性化选项，点击主题选项卡，找到桌面图标设置</p><p><img src="/img/win11/win11-40.png" alt="win11-40"></p><p>按需选择需要的图标</p><p><img src="/img/win11/win11-41.png" alt="win11-41"></p><h2 id="关闭安装提醒"><a href="#关闭安装提醒" class="headerlink" title="关闭安装提醒"></a>关闭安装提醒</h2><p>在控制面板当中找到Windows Defender防火墙，选择安全和维护选项</p><p><img src="/img/win11/win11-38.png" alt="win11-38"></p><p>点击更改用户账户控制设置，降低到从不通知</p><p><img src="/img/win11/win11-39.png" alt="win11-39"></p><h2 id="关闭Windows-Defender"><a href="#关闭Windows-Defender" class="headerlink" title="关闭Windows Defender"></a>关闭Windows Defender</h2><p>在设置-&gt;隐私和安全-&gt;Windows安全中心点击打开安全中心，并选择管理设置</p><p><img src="/img/win11/win11-6.png" alt="win11-6"></p><p>在管理设置中关闭篡改防护</p><p><img src="/img/win11/win11-7.png" alt="win11-7"></p><p>使用<code>Win+R</code>快捷键打开「运行」对话框，执行<code>gpedit.ms</code>打开组策略编辑器</p><p><img src="/img/win11/win11-8.png" alt="win11-8"></p><p>配置关闭Microsoft Defender防病毒选项为已启用</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">计算机配置/管理模板/Windows组件/Microsoft Defender防病毒<br></code></pre></td></tr></table></figure><p><img src="/img/win11/win11-9.png" alt="win11-9"></p><p>使用<code>Windows + R</code>快捷键打开「运行」对话框，执行<code>regedit</code>打开注册表编辑器</p><p><img src="/img/win11/win11-10.png" alt="win11-10"></p><p>配置<code>DisableAntiSpyware</code>的 DWORD (32位) 值设置为<code>1</code>，如果没有就新建</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender<br></code></pre></td></tr></table></figure><p><img src="/img/win11/win11-11.png" alt="win11-11"></p><p>重启，在powershell运行以下命令查看运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Get-MpComputerStatus | select AMRunningMode<br></code></pre></td></tr></table></figure><p><img src="/img/win11/win11-12.png" alt="win11-12"></p><h2 id="视觉效果设置"><a href="#视觉效果设置" class="headerlink" title="视觉效果设置"></a>视觉效果设置</h2><p>在任务栏搜索<strong>高级系统设置</strong>并打开</p><p><img src="/img/win11/win11-13.png" alt="win11-13"></p><p>切换到“高级”选项卡，点击“性能”下的“设置”按钮，在“视觉效果”选项卡下，选择“调整为最佳性能”，点击“应用”保存</p><p><img src="/img/win11/win11-14.png" alt="win11-14"></p><p><strong>注意</strong>：如果发现保存后，字体显示不清晰，可以把“平滑屏幕字体边缘”勾选上，如下图所示</p><p><img src="/img/win11/win11-15.png" alt="win11-15"></p><h2 id="关闭透明效果"><a href="#关闭透明效果" class="headerlink" title="关闭透明效果"></a>关闭透明效果</h2><p>任务栏搜索“透明效果”，点击打开</p><p><img src="/img/win11/win11-16.png" alt="win11-16"></p><p>关闭透明效果</p><p><img src="/img/win11/win11-17.png" alt="win11-17"></p><h2 id="启用存储感知功能"><a href="#启用存储感知功能" class="headerlink" title="启用存储感知功能"></a>启用存储感知功能</h2><p>任务栏搜索“存储感知”，点击打开窗口</p><p><img src="/img/win11/win11-18.png" alt="win11-18"></p><p>点击存储感知选项卡，打开自动用户内容清除</p><p><img src="/img/win11/win11-19.png" alt="win11-19"></p><h2 id="关闭游戏模式"><a href="#关闭游戏模式" class="headerlink" title="关闭游戏模式"></a>关闭游戏模式</h2><p>任务栏搜索“游戏模式”，点击打开</p><p><img src="/img/win11/win11-20.png" alt="win11-20"></p><p>关闭游戏模式</p><p><img src="/img/win11/win11-21.png" alt="win11-21"></p><h2 id="窗口游戏优化"><a href="#窗口游戏优化" class="headerlink" title="窗口游戏优化"></a>窗口游戏优化</h2><p>在设置中找到系统-&gt;屏幕-&gt;显示卡-&gt;默认图形设置，打开窗口化游戏优化选项</p><p><img src="/img/win11/win11-24.png" alt="win11-24"></p><h2 id="关闭设置建议通知"><a href="#关闭设置建议通知" class="headerlink" title="关闭设置建议通知"></a>关闭设置建议通知</h2><p>任务栏搜索“建议我如何设置”，点击打开</p><p><img src="/img/win11/win11-22.png" alt="win11-22"></p><p>关闭不必要的通知选项</p><p><img src="/img/win11/win11-23.png" alt="win11-23"></p><h2 id="更改资源管理器显示"><a href="#更改资源管理器显示" class="headerlink" title="更改资源管理器显示"></a>更改资源管理器显示</h2><p>点击资源管理器筛选器右侧三个点，点击选项，如图所示选择应用</p><p><img src="/img/win11/win11-25.png" alt="win11-25"></p><h2 id="内存优化"><a href="#内存优化" class="headerlink" title="内存优化"></a>内存优化</h2><p>使用<code>windows+R</code>快捷键，输入<code>regedit</code>，点击<code>确定</code>按钮进入注册表</p><p><img src="/img/win11/win11-26.png" alt="win11-26"></p><p>配置<code>DisablePagingExecutive</code>的 DWORD (32位) 值设置为<code>1</code>，如果没有就新建</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management<br></code></pre></td></tr></table></figure><p><img src="/img/win11/win11-27.png" alt="win11-27"></p><h2 id="关闭系统广告"><a href="#关闭系统广告" class="headerlink" title="关闭系统广告"></a>关闭系统广告</h2><p>找到设置页面，选择左侧的<code>隐私和安全性</code>选项，点击<code>常规</code>选项</p><p><img src="/img/win11/win11-28.png" alt="win11-28"></p><p>关闭不必要的选项</p><p><img src="/img/win11/win11-29.png" alt="win11-29"></p><p>回到设置页面，选择左侧的<code>隐私和安全性</code>选项，点击<code>诊断和反馈</code>选项</p><p><img src="/img/win11/win11-30.png" alt="win11-30"></p><p>关闭不必要的选项</p><p><img src="/img/win11/win11-31.png" alt="win11-31"></p><h2 id="优化系统任务栏"><a href="#优化系统任务栏" class="headerlink" title="优化系统任务栏"></a>优化系统任务栏</h2><p>找到设置页面，选择左侧的<code>个性化</code>选项，点击<code>任务栏</code>选项</p><p><img src="/img/win11/win11-32.png" alt="win11-32"></p><p>关闭不必要选项</p><p><img src="/img/win11/win11-33.png" alt="win11-33"></p><h2 id="优化搜索页面"><a href="#优化搜索页面" class="headerlink" title="优化搜索页面"></a>优化搜索页面</h2><p>点击任务栏的<code>搜索</code>按钮，点击右上角的三个点，点击<code>搜索设置</code>选项</p><p><img src="/img/win11/win11-35.png" alt="win11-35"></p><h2 id="关闭系统不必要通知"><a href="#关闭系统不必要通知" class="headerlink" title="关闭系统不必要通知"></a>关闭系统不必要通知</h2><p>找到设置页面，选择左侧的<code>系统</code>选项，点击<code>通知</code>选项</p><p><img src="/img/win11/win11-36.png" alt="win11-36"></p><p>按需关闭不必要的选项</p><p><img src="/img/win11/win11-37.png" alt="win11-37"></p>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins安装教程</title>
    <link href="/2024/07/09/Jenkins%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <url>/2024/07/09/Jenkins%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h1><h2 id="Jenkins-简介"><a href="#Jenkins-简介" class="headerlink" title="Jenkins 简介"></a>Jenkins 简介</h2><p>  Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。<br>  Jenkins是一个功能强大的应用程序，允许持续集成和持续交付项目，无论用的是什么平台。这是一个免费的源代码，可以处理任何类型的构建或持续集成。集成Jenkins可以用于一些测试和部署技术。<br>  Jenkins是一种软件允许持续集成。Jenkins 安装在一台服务上也中央构建发生的地方。</p><p>Jenkins 是一个可扩展的持续集成引擎。</p><blockquote><p>主要用于：<br>1、持续、自动地构建&#x2F;测试软件项目。<br>2、 监控一些定时执行的任务。<br>Jenkins拥有的特性包括：<br>1、 易于安装-只要把jenkins.war部署到servlet容器，不需要数据库支持。<br>2、 易于配置-所有配置都是通过其提供的web界面实现。<br>3、 集成RSS&#x2F;E-mail通过RSS发布构建结果或当构建完成时通过e-mail通知。<br>4、 生成JUnit&#x2F;TestNG测试报告。<br>5、 分布式构建支持Jenkins能够让多台计算机一起构建&#x2F;测试。<br>9、 文件识别:Jenkins能够跟踪哪次构建生成哪些jar，哪次构建使用哪个版本的jar等。<br>10、 插件支持:支持扩展插件，你可以开发适合自己团队使用的工具。</p></blockquote><blockquote><p>Jenkins的目标：<br>Jenkins的主要目标是监控软件开发流程，快速显示问题。所以能保证开发人员以及相关人员省时省力提高开发效率。<br>CI系统在整个开发过程中的主要作用是控制：当系统在代码存储库中探测到修改时，它将运行构建的任务委托给构建过程本身。如果构建失败了，那么CI系统将通知相关人员，然后继续监视存储库。它的角色看起来是被动的；但它确能快速反映问题。</p></blockquote><blockquote><p>特别是它具有以下优点：<br>1、Jenkins一切配置都可以在web界面上完成。有些配置如MAVEN_HOME和Email，只需要配置一次，所有的项目就都能用。当然也可以通过修改XML进行配置。<br>2、 支持Maven的模块(Module)，Jenkins对Maven做了优化，因此它能自动识别Module，每个Module可以配置成一个job,相当灵活。<br>3、 测试报告聚合，所有模块的测试报告都被聚合在一起，结果一目了然，使用其他CI，这几乎是件不可能完成的任务。<br>4、 构件指纹(artifact fingerprint)，每次build的结果构件都被很好的自动管理，无需任何配置就可以方便的浏览下载。</p></blockquote><blockquote><p>Jenkins功能包括：<br>1、持续的软件版本发布&#x2F;测试项目。<br>2、监控外部调用执行的工作。</p></blockquote><p>官网：<a href="https://links.jianshu.com/go?to=https://jenkins.io/">https://jenkins.io/</a></p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><ol><li><p>下载地址：<a href="https://links.jianshu.com/go?to=https://jenkins.io/download/">https://jenkins.io/download/</a></p><p><img src="/img/jenkins/14929498-a62c47600cc9cd18.webp" alt="img"></p><p>下载地址</p><p><img src="/img/jenkins/14929498-310519d5a47d6416.webp" alt="img"></p></li><li><p>安装JDK与Maven</p></li></ol><p>下载安装与运行：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"># 下载 war 包<br>[root@localhost ~]<span class="hljs-meta"># wget http:<span class="hljs-comment">//ftp-chi.osuosl.org/pub/jenkins/war-stable/2.190.1/jenkins.war</span></span><br># 运行<br>[root@localhost ~]<span class="hljs-meta"># java -jar jenkins.war --httpPort=8080</span><br>Running from: /root/jenkins.war<br>webroot: $user.home/.jenkins<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">47.975</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">1</span>] INFO    org.eclipse.jetty.util.log.Log<span class="hljs-meta">#initialized: Logging initialized @307ms to org.eclipse.jetty.util.log.JavaUtilLog</span><br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">48.042</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">1</span>] INFO    winstone.Logger#logInternal: Beginning extraction from war file<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">48.061</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">1</span>] WARNING o.e.j.s.handler.ContextHandler#setContextPath: Empty contextPath<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">48.103</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">1</span>] INFO    org.eclipse.jetty.server.Server#doStart: jetty<span class="hljs-number">-9.4</span>.z-SNAPSHOT; built: <span class="hljs-number">2019</span><span class="hljs-number">-05</span><span class="hljs-number">-02</span>T00:<span class="hljs-number">04</span>:<span class="hljs-number">53.875</span>Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm <span class="hljs-number">1.8</span><span class="hljs-number">.0</span>_222-b10<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">48.276</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">1</span>] INFO    o.e.j.w.StandardDescriptorProcessor#visitServlet: <span class="hljs-literal">NO</span> JSP Support <span class="hljs-keyword">for</span> /, did not find org.eclipse.jetty.jsp.JettyJspServlet<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">48.306</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">1</span>] INFO    o.e.j.s.s.DefaultSessionIdManager#doStart: DefaultSessionIdManager workerName=node0<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">48.307</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">1</span>] INFO    o.e.j.s.s.DefaultSessionIdManager#doStart: No SessionScavenger set, using defaults<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">48.308</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">1</span>] INFO    o.e.j.server.session.HouseKeeper#startScavenging: node0 Scavenging every <span class="hljs-number">600000</span>ms<br>Jenkins home directory: /root/.jenkins found at: $user.home/.jenkins<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">48.643</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">1</span>] INFO    o.e.j.s.handler.ContextHandler#doStart: Started w.@<span class="hljs-number">37313</span>c65&#123;Jenkins v2<span class="hljs-number">.190</span><span class="hljs-number">.1</span>,/,file:<span class="hljs-comment">///root/.jenkins/war/,AVAILABLE&#125;&#123;/root/.jenkins/war&#125;</span><br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">48.666</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">1</span>] INFO    o.e.j.server.AbstractConnector#doStart: Started ServerConnector@<span class="hljs-number">26</span>ba2a48&#123;HTTP/<span class="hljs-number">1.1</span>,[http/<span class="hljs-number">1.1</span>]&#125;&#123;<span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">8080</span>&#125;<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">48.683</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">1</span>] INFO    org.eclipse.jetty.server.Server#doStart: Started @<span class="hljs-number">1016</span>ms<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">48.684</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">20</span>]    INFO    winstone.Logger#logInternal: Winstone Servlet Engine v4<span class="hljs-number">.0</span> running: controlPort=disabled<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">49.465</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">28</span>]    INFO    jenkins.InitReactorRunner$<span class="hljs-number">1</span>#onAttained: Started initialization<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">49.468</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">26</span>]    INFO    jenkins.InitReactorRunner$<span class="hljs-number">1</span>#onAttained: Listed all plugins<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">50.392</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">26</span>]    INFO    jenkins.InitReactorRunner$<span class="hljs-number">1</span>#onAttained: Prepared all plugins<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">50.395</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">26</span>]    INFO    jenkins.InitReactorRunner$<span class="hljs-number">1</span>#onAttained: Started all plugins<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">50.423</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">26</span>]    INFO    jenkins.InitReactorRunner$<span class="hljs-number">1</span>#onAttained: Augmented all extensions<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">50.797</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">28</span>]    INFO    jenkins.InitReactorRunner$<span class="hljs-number">1</span>#onAttained: Loaded all jobs<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">50.885</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">41</span>]    INFO    hudson.model.AsyncPeriodicWork$<span class="hljs-number">1</span><span class="hljs-meta">#run: Started Download metadata</span><br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">50.964</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">41</span>]    INFO    hudson.util.Retrier<span class="hljs-meta">#start: Attempt #1 to do the action check updates server</span><br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">51.497</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">25</span>]    INFO    o.s.c.s.AbstractApplicationContext#prepareRefresh: Refreshing org.springframework.web.context.support.StaticWebApplicationContext@<span class="hljs-number">37237</span>ab6: display name [Root WebApplicationContext]; startup date [Wed Oct <span class="hljs-number">09</span> <span class="hljs-number">10</span>:<span class="hljs-number">02</span>:<span class="hljs-number">51</span> CST <span class="hljs-number">2019</span>]; root of context hierarchy<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">51.497</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">25</span>]    INFO    o.s.c.s.AbstractApplicationContext#obtainFreshBeanFactory: Bean factory <span class="hljs-keyword">for</span> application context [org.springframework.web.context.support.StaticWebApplicationContext@<span class="hljs-number">37237</span>ab6]: org.springframework.beans.factory.support.DefaultListableBeanFactory@<span class="hljs-number">43064</span>edb<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">51.507</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">25</span>]    INFO    o.s.b.f.s.DefaultListableBeanFactory#preInstantiateSingletons: Pre-instantiating singletons <span class="hljs-keyword">in</span> org.springframework.beans.factory.support.DefaultListableBeanFactory@<span class="hljs-number">43064</span>edb: defining beans [authenticationManager]; root of factory hierarchy<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">51.645</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">25</span>]    INFO    o.s.c.s.AbstractApplicationContext#prepareRefresh: Refreshing org.springframework.web.context.support.StaticWebApplicationContext@<span class="hljs-number">20</span>cd72f: display name [Root WebApplicationContext]; startup date [Wed Oct <span class="hljs-number">09</span> <span class="hljs-number">10</span>:<span class="hljs-number">02</span>:<span class="hljs-number">51</span> CST <span class="hljs-number">2019</span>]; root of context hierarchy<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">51.645</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">25</span>]    INFO    o.s.c.s.AbstractApplicationContext#obtainFreshBeanFactory: Bean factory <span class="hljs-keyword">for</span> application context [org.springframework.web.context.support.StaticWebApplicationContext@<span class="hljs-number">20</span>cd72f]: org.springframework.beans.factory.support.DefaultListableBeanFactory@<span class="hljs-number">5</span>a4fc459<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">51.645</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">25</span>]    INFO    o.s.b.f.s.DefaultListableBeanFactory#preInstantiateSingletons: Pre-instantiating singletons <span class="hljs-keyword">in</span> org.springframework.beans.factory.support.DefaultListableBeanFactory@<span class="hljs-number">5</span>a4fc459: defining beans [filter,legacy]; root of factory hierarchy<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">02</span>:<span class="hljs-number">51.771</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">25</span>]    INFO    jenkins.install.SetupWizard<span class="hljs-meta">#init: </span><br><br>*************************************************************<br>*************************************************************<br>*************************************************************<br><br>Jenkins initial setup is required. An admin user has been created and a password generated.<br>Please use the following password to proceed to installation:<br><br><span class="hljs-number">6739</span>a91dcefe4b53b2685723bf1ecd71<br><br>This may also be found at: /root/.jenkins/secrets/initialAdminPassword<br><br>*************************************************************<br>*************************************************************<br>*************************************************************<br><br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">03</span>:<span class="hljs-number">02.041</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">25</span>]    INFO    hudson.model.UpdateSite#updateData: Obtained the latest update center data file <span class="hljs-keyword">for</span> UpdateSource <span class="hljs-keyword">default</span><br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">03</span>:<span class="hljs-number">03.121</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">25</span>]    INFO    jenkins.InitReactorRunner$<span class="hljs-number">1</span>#onAttained: Completed initialization<br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">03</span>:<span class="hljs-number">03.150</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">19</span>]    INFO    hudson.WebAppMain$<span class="hljs-number">3</span><span class="hljs-meta">#run: Jenkins is fully up and running</span><br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">03</span>:<span class="hljs-number">04.781</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">41</span>]    INFO    hudson.model.UpdateSite#updateData: Obtained the latest update center data file <span class="hljs-keyword">for</span> UpdateSource <span class="hljs-keyword">default</span><br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">03</span>:<span class="hljs-number">05.315</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">41</span>]    INFO    h.m.DownloadService$Downloadable<span class="hljs-meta">#load: Obtained the updated data file for hudson.tasks.Maven.MavenInstaller</span><br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">03</span>:<span class="hljs-number">05.315</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">41</span>]    INFO    hudson.util.Retrier<span class="hljs-meta">#start: Performed the action check updates server successfully at the attempt #1</span><br><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span> <span class="hljs-number">02</span>:<span class="hljs-number">03</span>:<span class="hljs-number">05.321</span>+<span class="hljs-number">0000</span> [<span class="hljs-type">id</span>=<span class="hljs-number">41</span>]    INFO    hudson.model.AsyncPeriodicWork$<span class="hljs-number">1</span><span class="hljs-meta">#run: Finished Download metadata. 14,430 ms</span><br></code></pre></td></tr></table></figure><p>YUM 安装：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># YUM 安装</span><br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># yum install jenkins</span><br><span class="hljs-comment"># WAR包 </span><br>/usr/lib/jenkins/jenkins.war    <br><span class="hljs-comment">#  配置文件, 修改用户为:root</span><br>/etc/sysconfig/jenkins      <br><span class="hljs-comment"># 默认的JENKINS_HOME目录</span><br>/var/lib/jenkins/       <br><span class="hljs-comment">#  Jenkins日志文件</span><br>/var/log/jenkins/jenkins.log   <br><span class="hljs-comment"># 添加服务</span><br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># service jenkins start</span><br><span class="hljs-comment"># 启动测试</span><br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># systemctl start jenkins</span><br><span class="hljs-title class_">Starting</span> jenkins (via systemctl):                          [  确定  ]<br><span class="hljs-comment"># 重启 jenkins</span><br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># systemctl restart jenkins</span><br>注意： systemctl start jenkins 启动不了<br></code></pre></td></tr></table></figure><p>RPM 安装</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">https:<span class="hljs-comment">//pkg.jenkins.io/redhat-stable/jenkins-2.190.1-1.1.noarch.rpm</span><br></code></pre></td></tr></table></figure><h2 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h2><p>启动</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">root@localhost ~</span>]<span class="hljs-meta"># java -jar jenkins.war --httpPort=8080</span><br>或<br>[<span class="hljs-meta">root@localhost ~</span>]<span class="hljs-meta"># systemctl restart jenkins</span><br></code></pre></td></tr></table></figure><ol><li><p>安装配置</p><p><img src="/img/jenkins/14929498-922c02b9449445c4.webp" alt="img"></p><p>获取密码</p></li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">root@localhost ~</span>]<span class="hljs-meta"># vi /root/.jenkins/secrets/initialAdminPassword</span><br></code></pre></td></tr></table></figure><p>默认插件安装<br>比较慢(看网速)：</p><p><img src="/img/jenkins/14929498-28360d323cf7d714.webp" alt="img"></p><p>安装插件</p><p><img src="/img/jenkins/14929498-b3f5b4a53e6383ad.webp" alt="img"></p><ol start="2"><li><p>创建管理员</p><p><img src="/img/jenkins/14929498-40303baec6348bc3.webp" alt="img"></p></li><li><p>实例配置</p><p><img src="/img/jenkins/14929498-66bc430edfb9d551.webp" alt="img"></p><ol start="4"><li>安装完成</li></ol><p><img src="/img/jenkins/14929498-a5951568e3907ba5.webp" alt="img"></p></li></ol><h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><p><img src="/img/jenkins/14929498-e39ccd75fa070882.webp" alt="img"></p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><ol><li><p>Maven构建插件<br>Maven Integration<br>Maven集成</p><p><img src="/img/jenkins/14929498-e8ef8190c9d8a8ca.webp" alt="img"></p><p>安装完成后，新建任务中会出现，Maven项目：</p><p><img src="/img/jenkins/14929498-52a2b6e1528f9fab.webp" alt="img"></p></li><li><p>Deploy to container<br>布署到容器如：Tomcat</p></li><li><p>Publish Over SSH<br>把jenkins服务器上的文件,传输到远程服务器的指定目录。</p><p><img src="/img/jenkins/14929498-72e9da0205453560.webp" alt="img"></p></li><li><p>Multijob plugin<br>可以让jenkins任务按照分组、顺序执行jenkins版本。</p></li><li><p>安装和Git，GitLab插件</p><p><img src="/img/jenkins/14929498-ab8742d8b90fcaa1.webp" alt="img"></p></li><li><p>Gitee<br>文档地址：<a href="https://links.jianshu.com/go?to=https://gitee.com/help/articles/4193%23article-header2">https://gitee.com/help/articles/4193#article-header2</a><br>码云插件。</p><p><img src="/img/jenkins/14929498-e8e5c666d185bcc7.webp" alt="img"></p></li></ol><blockquote><p>码云链接配置：<br>1)前往 Jenkins -&gt; Manage Jenkins -&gt; Configure System -&gt; Gitee Configuration -&gt; Gitee connections<br>2)在 Connection name 中输入 Gitee 或者你想要的名字(一般为项目名称)</p><p><img src="/img/jenkins/14929498-90f585a74910ece3.webp" alt="img"></p><p>名称</p><p>3)Gitee host URL 中输入码云完整 URL地址： </p><p><a href="https://gitee.com/">https://gitee.com</a></p><p>（码云私有化客户输入部署的域名）</p><p>4)创建码云私人令牌</p><p>地址：</p><p><a href="https://gitee.com/profile/personal_access_tokens">https://gitee.com/profile/personal_access_tokens</a></p><p><img src="/img/jenkins/14929498-b60a8c6980e387dc.webp" alt="img"></p><p>创建码云私人令牌</p><p><img src="/img/jenkins/14929498-d052f5e8b991a560.webp" alt="img"></p><p>5)认证配置</p><p><img src="/img/jenkins/14929498-960432e878f0c3bd.webp" alt="img"></p><p>认证配置</p><p><img src="/img/jenkins/14929498-6a7fce9e0def6043.webp" alt="img"></p><p>6)测试</p><p><img src="/img/jenkins/14929498-eaa2be0184e94709.webp" alt="img"></p></blockquote><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><ol><li><p>JDK</p><p><img src="/img/jenkins/14929498-880c6f7c9583ddce.webp" alt="img"></p></li><li><p>GIT</p><p><img src="/img/jenkins/14929498-78a48cae0a905aa2.webp" alt="img"></p><p>检查系统是否安装</p><p>如果没有安装，请使用以下命令安装:</p></li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">root@bogon ~</span>]<span class="hljs-meta"># yum install git</span><br></code></pre></td></tr></table></figure><ol><li><p>Maven</p><p><img src="/img/jenkins/14929498-1fa079d42e6ccf7d.webp" alt="img"></p></li></ol><h2 id="认证配置"><a href="#认证配置" class="headerlink" title="认证配置"></a>认证配置</h2><ol><li><p>添加一个jenkins连接到码云时，登录到码云的用户名和密码</p><p><img src="/img/jenkins/14929498-eb33c0085490e3f7.webp" alt="img"></p><p>新建认证</p><p><img src="/img/jenkins/14929498-0fe86d8c91eb8c33.webp" alt="img"></p><p>全局认证</p><p><img src="/img/jenkins/14929498-78c87efe1ad0c63d.webp" alt="img"></p></li></ol><h2 id="创建Maven构建任务"><a href="#创建Maven构建任务" class="headerlink" title="创建Maven构建任务"></a>创建Maven构建任务</h2><ol><li><p>Maven项目创建</p><p><img src="/img/jenkins/14929498-1c1ed6e07b76acda.webp" alt="img"></p></li><li><p>任务配置</p><p><img src="/img/jenkins/14929498-5d0ee855dff52153.webp" alt="img"></p><p>指定仓库及分支</p><p><img src="/img/jenkins/14929498-f13b777e8cff3cce.webp" alt="img"></p><p>添加时间戳</p><p><img src="/img/jenkins/14929498-a7f5a4d773dfea30.webp" alt="img"></p><p>前置构建设置：</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">clean install -Dmaven.test.skip=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><img src="/img/jenkins/14929498-a6b28d42dfb1ecde.webp" alt="img"></p><p>前置构建</p><p><img src="/img/jenkins/14929498-70d18d13068c7770.webp" alt="img"></p><ol><li><p>执行任务</p><p><img src="/img/jenkins/14929498-3a02ede1d6136f66.webp" alt="img"></p><p>执行任务</p><p><img src="/img/jenkins/14929498-152f584d7053b3c2.webp" alt="img"></p><p>查看输出</p><p><img src="/img/jenkins/14929498-9832926f41edf091.webp" alt="img"></p></li></ol><h2 id="使用Tomcat自动化部署"><a href="#使用Tomcat自动化部署" class="headerlink" title="使用Tomcat自动化部署"></a>使用Tomcat自动化部署</h2><p>在构建后操作中选择Deploy war&#x2F;ear to a container</p><p><img src="/img/jenkins/tomcat.jpg" alt="img"></p><p>进行相关配置</p><p><img src="/img/jenkins/container.jpg" alt="img"></p><h2 id="docker-tomcat自动化部署"><a href="#docker-tomcat自动化部署" class="headerlink" title="docker+tomcat自动化部署"></a>docker+tomcat自动化部署</h2><p>插件安装</p><p><img src="/img/jenkins/20190327132825800.png" alt="img"></p><p><img src="/img/jenkins/20190327132859908.png" alt="img"></p><p>添加ssh远程主机，系统管理-&gt;系统配置</p><p><img src="/img/jenkins/1598588986(1).jpg" alt="img"></p><p>部署私有镜像仓库 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d -v /opt/registry:/var/lib/registry -p 5000:5000 --restart=always --name registry registry<br></code></pre></td></tr></table></figure><p>添加HTTP可信任</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/docker/daemon.json<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;<br>    &quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;],<br>    &quot;insecure-registries&quot;:[&quot;192.168.1.55:5000&quot;]<br>&#125;<br></code></pre></td></tr></table></figure><p>构建Tomcat基础镜像</p><p>ps：通过Dockerfile构建镜像，需将Dockerfile放在与宿主机要复制到docker容器内的资源路径同级或上级，否则无法进行资源复制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim Dockerfile<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">FROM centos:7<br>MAINTAINER scorpio<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">切换镜像目录，进入/usr/local/src目录</span><br>WORKDIR /usr/local/src<br><span class="hljs-meta prompt_">#</span><span class="language-bash">在/usr/local/src/下创建jdk目录,用来存放jdk文件</span><br>RUN mkdir jdk<br><span class="hljs-meta prompt_">#</span><span class="language-bash">在/usr/local/src/下创建tomcat目录，用来存放tomcat</span><br>RUN mkdir tomcat<br><br>RUN rm -rf tomcat/webapps/*.war<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将宿主机的jdk目录下的文件拷至镜像的/usr/jdk目录下</span><br>ADD jdk /usr/local/src/jdk<br><span class="hljs-meta prompt_">#</span><span class="language-bash">将宿主机的tomcat目录下的文件拷至镜像的/usr/tomcat目录下</span><br>ADD tomcat /usr/local/src/tomcat/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置环境变量</span><br>ENV JAVA_HOME=/usr/local/src/jdk<br>ENV JRE_HOME=$JAVA_HOME/jre<br>ENV CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH<br>ENV PATH=/sbin:$JAVA_HOME/bin:$PATH<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">公开端口</span><br>EXPOSE 8080<br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置启动命令</span><br>ENTRYPOINT [&quot;/usr/local/src/tomcat/bin/catalina.sh&quot;,&quot;run&quot;]<br></code></pre></td></tr></table></figure><p>构建镜像并push到私有仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker build -t 192.168.1.55:5000/tomcat .<br>docker push  192.168.1.55:5000/tomcat<br></code></pre></td></tr></table></figure><p>在Post Steps中进行相关配置</p><p><img src="/img/jenkins/1598589460(1).jpg" alt="img"></p><p>获取仓库中构建的tomcat镜像，基于此镜像将编译打包后的war包拷贝到tomcat webapps目录，构建镜像并推送到私有仓库</p><p><img src="/img/jenkins/1598589544(1).jpg" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">REPOSITORY=192.168.1.55:5000/petzm-manage<br>VERSION=8.5.56<br><span class="hljs-meta prompt_"># </span><span class="language-bash">构建镜像</span><br>cat &gt; Dockerfile &lt;&lt; EOF<br>FROM 192.168.1.55:5000/tomcat<br>RUN rm -rf /usr/local/src/tomcat/webapps/*.war<br>COPY manage-admin/manage-admin-context/target/*.war /usr/local/src/tomcat/webapps<br>CMD [&quot;/usr/local/src/tomcat/bin/catalina.sh&quot;, &quot;run&quot;]<br>EOF<br>docker build -t $REPOSITORY .<br><span class="hljs-meta prompt_"># </span><span class="language-bash">上传镜像</span><br>docker push $REPOSITORY<br></code></pre></td></tr></table></figure><p>镜像构建完成后， 使用ssh远程登录部署服务器（192.168.1.121）上删除已经存在的容器和拉取的部署镜像，重新部署新的容器</p><p><img src="/img/jenkins/1598589628(1).jpg" alt="img"></p><p><img src="/img/jenkins/1598589682(1).jpg" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">REPOSITORY=192.168.1.55:5000/petzm-manage<br><span class="hljs-meta prompt_"># </span><span class="language-bash">部署</span><br>docker rm -f petzm-manage<br>docker rmi $REPOSITORY<br>docker run -d --name petzm-manage  -p 8080:8080 -v /usr/local/src/jdk:/usr/local/src/jdk $REPOSITORY<br></code></pre></td></tr></table></figure><h2 id="jar包打成镜像自动部署"><a href="#jar包打成镜像自动部署" class="headerlink" title="jar包打成镜像自动部署"></a>jar包打成镜像自动部署</h2><p>自定义Dockerfile</p><p>ps：通过Dockerfile构建镜像，需将Dockerfile放在与宿主机要复制到docker容器内的资源路径同级或上级，否则无法进行资源复制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim Dockerfile<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">FROM centos:7<br>MAINTAINER scorpio<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">切换镜像目录，进入/usr/local/src目录</span><br>WORKDIR /usr/local/src<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建工程目录</span><br>RUN mkdir project<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建jdk目录</span><br>RUN mkdir jdk<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">复制工程文件</span><br>ADD src/edit/petzm-admin-context.jar /usr/local/src/project<br><span class="hljs-meta prompt_">#</span><span class="language-bash">复制jdk</span><br>ADD src/jdk /usr/local/src/jdk<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">编辑环境变量</span><br>ENV JAVA_HOME=/usr/local/src/jdk<br>ENV JRE_HOME=$JAVA_HOME/jre<br>ENV CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH<br>ENV PATH=/sbin:$JAVA_HOME/bin:$PATH<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">公开端口</span><br>EXPOSE 8080<br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置启动命令</span><br>ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/usr/local/src/project/petzm-admin-context.jar&quot;]<br></code></pre></td></tr></table></figure><p>自定义脚本文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim mytest.sh<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">构建镜像</span><br>docker build -t 192.168.1.55:5000/petzm .<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">推送docker镜像</span><br>docker push 192.168.1.55:5000/petzm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">运行容器</span><br>docker run -d --name petzm -p 8080:8080 192.168.1.55:5000/petzm<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod u+x jartest.sh<br></code></pre></td></tr></table></figure><p>在Post Steps中进行相关配置</p><p><img src="/img/jenkins/1598589460(1).jpg" alt="img"></p><p>将build成功后的jar包打成镜像文件</p><p><img src="/img/jenkins/1598607541(1).jpg" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">REPOSITORY=192.168.1.55:5000/petzm<br>cat &gt; Dockerfile &lt;&lt; EOF <br>FROM java:8<br>MAINTAINER scorpio<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">切换镜像目录，进入/usr/local/src目录</span><br>WORKDIR /usr/local/src<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建工程目录</span><br>RUN mkdir project<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">复制工程文件</span><br>COPY manage-admin/manage-admin-context/target/*.jar /usr/local/src/project<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">公开端口</span><br>EXPOSE 8080<br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置启动命令</span><br>ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/usr/local/src/project/manage-admin-context.jar&quot;]<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">构建镜像</span><br>docker build -t $REPOSITORY .<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">推送docker镜像</span><br>docker push $REPOSITORY<br></code></pre></td></tr></table></figure><p>镜像构建完成后， 使用ssh远程登录部署服务器（192.168.1.121）上删除已经存在的容器和拉取的部署镜像，重新部署新的容器</p><p><img src="/img/jenkins/1598589628(1).jpg" alt="img"></p><p><img src="/img/jenkins/1598607621(1).jpg" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">REPOSITORY=192.168.1.55:5000/petzm<br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除同名docker容器</span><br>docker rm -f petzm<br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除镜像</span><br>docker rmi $REPOSITORY<br><span class="hljs-meta prompt_">#</span><span class="language-bash">运行容器</span><br>docker run -d --name petzm -p 8080:8888 $REPOSITORY<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>安装教程</tag>
      
      <tag>运维</tag>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装教程</title>
    <link href="/2024/07/08/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <url>/2024/07/08/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="基础准备："><a href="#基础准备：" class="headerlink" title="基础准备："></a>基础准备：</h2><p>yum update</p><p>yum install vim*</p><p>yum install wget</p><p>yum install net-tools</p><h2 id="版本支持"><a href="#版本支持" class="headerlink" title="版本支持"></a>版本支持</h2><p>1、Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</p><p>通过 <strong>uname -r</strong> 命令查看你当前的内核版本（uname -r）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">uname -r<br></code></pre></td></tr></table></figure><p>2、卸载旧版本(如果安装过旧版本的话)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum remove docker  docker-common docker-selinux docker-engine<br></code></pre></td></tr></table></figure><p>3、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y yum-utils<br></code></pre></td></tr></table></figure><p>4、设置yum源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><p><img src="/img/docker/image1.png" alt="image1"></p><p>5、可以查看所有仓库中所有docker版本，并选择特定版本安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum list docker-ce --showduplicates | sort -r<br></code></pre></td></tr></table></figure><p><img src="/img/docker/image2.png" alt="image2"></p><p>6、安装docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install docker-ce<br></code></pre></td></tr></table></figure><p><img src="/img/docker/image3.png" alt="image3"></p><p>7、启动并加入开机启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start docker<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl enable docker<br></code></pre></td></tr></table></figure><p>8、验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker version<br></code></pre></td></tr></table></figure><p><img src="/img/docker/image4.png" alt="image4"></p><h2 id="镜像源配置"><a href="#镜像源配置" class="headerlink" title="镜像源配置"></a>镜像源配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/docker/daemon.json<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl daemon-reload<br>systemctl restart docker<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>安装教程</tag>
      
      <tag>运维</tag>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
